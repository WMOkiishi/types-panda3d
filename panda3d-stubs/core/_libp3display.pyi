from collections.abc import Sequence
from os import PathLike
from typing import Any, ClassVar, Literal, TypeAlias, final, overload

_GraphicsStateGuardian_ShaderModel: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7]
_Vec4f: TypeAlias = LVecBase4f | UnalignedLVecBase4f | LMatrix4f.Row | LMatrix4f.CRow | ConfigVariableColor
_WindowProperties_MouseMode: TypeAlias = Literal[0, 1, 2]
_WindowProperties_ZOrder: TypeAlias = Literal[0, 1, 2]
_Filename: TypeAlias = Filename | ConfigVariableFilename | str | bytes | PathLike
_Lens_StereoChannel: TypeAlias = Literal[0, 1, 2, 3]
_DrawableRegion_RenderTexturePlane: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
_GraphicsOutput_RenderTextureMode: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6]
_CoordinateSystem: TypeAlias = Literal[0, 1, 2, 3, 4, 5]
_Texture_QualityLevel: TypeAlias = Literal[0, 1, 2, 3]
_CallbackGraphicsWindow_RenderCallbackType: TypeAlias = Literal[0, 1, 2, 3]
_GraphicsOutput_FrameMode: TypeAlias = Literal[0, 1, 2]

class GraphicsDevice(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_pipe(self) -> GraphicsPipe: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getPipe = get_pipe
    getClassType = get_class_type

class GraphicsPipe(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    OT_window: ClassVar[Literal[1]]
    OT_fullscreen_window: ClassVar[Literal[2]]
    OT_buffer: ClassVar[Literal[4]]
    OT_texture_buffer: ClassVar[Literal[8]]
    BF_refuse_parasite: ClassVar[Literal[1]]
    BF_require_parasite: ClassVar[Literal[2]]
    BF_refuse_window: ClassVar[Literal[4]]
    BF_require_window: ClassVar[Literal[8]]
    BF_require_callback_window: ClassVar[Literal[16]]
    BF_can_bind_color: ClassVar[Literal[64]]
    BF_can_bind_every: ClassVar[Literal[128]]
    BF_resizeable: ClassVar[Literal[256]]
    BF_size_track_host: ClassVar[Literal[512]]
    BF_rtt_cumulative: ClassVar[Literal[1024]]
    BF_fb_props_optional: ClassVar[Literal[2048]]
    BF_size_square: ClassVar[Literal[4096]]
    BF_size_power_2: ClassVar[Literal[8192]]
    BF_can_bind_layered: ClassVar[Literal[16384]]
    @property
    def display_width(self) -> int: ...
    @property
    def display_height(self) -> int: ...
    @property
    def display_zoom(self) -> float: ...
    @property
    def display_information(self) -> DisplayInformation: ...
    @property
    def interface_name(self) -> str: ...
    def is_valid(self) -> bool: ...
    def get_supported_types(self) -> int: ...
    def supports_type(self, flags: int) -> bool: ...
    def get_display_width(self) -> int: ...
    def get_display_height(self) -> int: ...
    def get_display_zoom(self) -> float: ...
    def get_display_information(self) -> DisplayInformation: ...
    def lookup_cpu_data(self) -> None: ...
    def get_interface_name(self) -> str: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    isValid = is_valid
    getSupportedTypes = get_supported_types
    supportsType = supports_type
    getDisplayWidth = get_display_width
    getDisplayHeight = get_display_height
    getDisplayZoom = get_display_zoom
    getDisplayInformation = get_display_information
    lookupCpuData = lookup_cpu_data
    getInterfaceName = get_interface_name
    getClassType = get_class_type
    OTWindow = OT_window
    OTFullscreenWindow = OT_fullscreen_window
    OTBuffer = OT_buffer
    OTTextureBuffer = OT_texture_buffer
    BFRefuseParasite = BF_refuse_parasite
    BFRequireParasite = BF_require_parasite
    BFRefuseWindow = BF_refuse_window
    BFRequireWindow = BF_require_window
    BFRequireCallbackWindow = BF_require_callback_window
    BFCanBindColor = BF_can_bind_color
    BFCanBindEvery = BF_can_bind_every
    BFResizeable = BF_resizeable
    BFSizeTrackHost = BF_size_track_host
    BFRttCumulative = BF_rtt_cumulative
    BFFbPropsOptional = BF_fb_props_optional
    BFSizeSquare = BF_size_square
    BFSizePower2 = BF_size_power_2
    BFCanBindLayered = BF_can_bind_layered

class DisplayInformation:
    DtoolClassDict: ClassVar[dict[str, Any]]
    DS_unknown: ClassVar[Literal[0]]
    DS_success: ClassVar[Literal[1]]
    DS_direct_3d_create_error: ClassVar[Literal[2]]
    DS_create_window_error: ClassVar[Literal[3]]
    DS_create_device_error: ClassVar[Literal[4]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: DisplayInformation) -> None: ...
    def get_display_state(self) -> int: ...
    def get_maximum_window_width(self) -> int: ...
    def get_maximum_window_height(self) -> int: ...
    def get_window_bits_per_pixel(self) -> int: ...
    def get_total_display_modes(self) -> int: ...
    def get_display_mode(self, display_index: int) -> DisplayMode: ...
    def get_display_mode_width(self, display_index: int) -> int: ...
    def get_display_mode_height(self, display_index: int) -> int: ...
    def get_display_mode_bits_per_pixel(self, display_index: int) -> int: ...
    def get_display_mode_refresh_rate(self, display_index: int) -> int: ...
    def get_display_mode_fullscreen_only(self, display_index: int) -> int: ...
    def get_shader_model(self) -> _GraphicsStateGuardian_ShaderModel: ...
    def get_video_memory(self) -> int: ...
    def get_texture_memory(self) -> int: ...
    def update_memory_information(self) -> None: ...
    def get_physical_memory(self) -> int: ...
    def get_available_physical_memory(self) -> int: ...
    def get_page_file_size(self) -> int: ...
    def get_available_page_file_size(self) -> int: ...
    def get_process_virtual_memory(self) -> int: ...
    def get_available_process_virtual_memory(self) -> int: ...
    def get_memory_load(self) -> int: ...
    def get_page_fault_count(self) -> int: ...
    def get_process_memory(self) -> int: ...
    def get_peak_process_memory(self) -> int: ...
    def get_page_file_usage(self) -> int: ...
    def get_peak_page_file_usage(self) -> int: ...
    def get_vendor_id(self) -> int: ...
    def get_device_id(self) -> int: ...
    def get_driver_product(self) -> int: ...
    def get_driver_version(self) -> int: ...
    def get_driver_sub_version(self) -> int: ...
    def get_driver_build(self) -> int: ...
    def get_driver_date_month(self) -> int: ...
    def get_driver_date_day(self) -> int: ...
    def get_driver_date_year(self) -> int: ...
    def get_cpu_vendor_string(self) -> str: ...
    def get_cpu_brand_string(self) -> str: ...
    def get_cpu_version_information(self) -> int: ...
    def get_cpu_brand_index(self) -> int: ...
    def get_cpu_frequency(self) -> int: ...
    @staticmethod
    def get_cpu_time() -> int: ...
    def get_maximum_cpu_frequency(self) -> int: ...
    def get_current_cpu_frequency(self) -> int: ...
    def update_cpu_frequency(self, processor_number: int) -> None: ...
    def get_num_cpu_cores(self) -> int: ...
    def get_num_logical_cpus(self) -> int: ...
    def get_os_version_major(self) -> int: ...
    def get_os_version_minor(self) -> int: ...
    def get_os_version_build(self) -> int: ...
    def get_os_platform_id(self) -> int: ...
    def get_display_modes(self) -> tuple[DisplayMode, ...]: ...
    getDisplayState = get_display_state
    getMaximumWindowWidth = get_maximum_window_width
    getMaximumWindowHeight = get_maximum_window_height
    getWindowBitsPerPixel = get_window_bits_per_pixel
    getTotalDisplayModes = get_total_display_modes
    getDisplayMode = get_display_mode
    getDisplayModeWidth = get_display_mode_width
    getDisplayModeHeight = get_display_mode_height
    getDisplayModeBitsPerPixel = get_display_mode_bits_per_pixel
    getDisplayModeRefreshRate = get_display_mode_refresh_rate
    getDisplayModeFullscreenOnly = get_display_mode_fullscreen_only
    getShaderModel = get_shader_model
    getVideoMemory = get_video_memory
    getTextureMemory = get_texture_memory
    updateMemoryInformation = update_memory_information
    getPhysicalMemory = get_physical_memory
    getAvailablePhysicalMemory = get_available_physical_memory
    getPageFileSize = get_page_file_size
    getAvailablePageFileSize = get_available_page_file_size
    getProcessVirtualMemory = get_process_virtual_memory
    getAvailableProcessVirtualMemory = get_available_process_virtual_memory
    getMemoryLoad = get_memory_load
    getPageFaultCount = get_page_fault_count
    getProcessMemory = get_process_memory
    getPeakProcessMemory = get_peak_process_memory
    getPageFileUsage = get_page_file_usage
    getPeakPageFileUsage = get_peak_page_file_usage
    getVendorId = get_vendor_id
    getDeviceId = get_device_id
    getDriverProduct = get_driver_product
    getDriverVersion = get_driver_version
    getDriverSubVersion = get_driver_sub_version
    getDriverBuild = get_driver_build
    getDriverDateMonth = get_driver_date_month
    getDriverDateDay = get_driver_date_day
    getDriverDateYear = get_driver_date_year
    getCpuVendorString = get_cpu_vendor_string
    getCpuBrandString = get_cpu_brand_string
    getCpuVersionInformation = get_cpu_version_information
    getCpuBrandIndex = get_cpu_brand_index
    getCpuFrequency = get_cpu_frequency
    getCpuTime = get_cpu_time
    getMaximumCpuFrequency = get_maximum_cpu_frequency
    getCurrentCpuFrequency = get_current_cpu_frequency
    updateCpuFrequency = update_cpu_frequency
    getNumCpuCores = get_num_cpu_cores
    getNumLogicalCpus = get_num_logical_cpus
    getOsVersionMajor = get_os_version_major
    getOsVersionMinor = get_os_version_minor
    getOsVersionBuild = get_os_version_build
    getOsPlatformId = get_os_platform_id
    getDisplayModes = get_display_modes
    DSUnknown = DS_unknown
    DSSuccess = DS_success
    DSDirect3dCreateError = DS_direct_3d_create_error
    DSCreateWindowError = DS_create_window_error
    DSCreateDeviceError = DS_create_device_error

class DrawableRegion:
    DtoolClassDict: ClassVar[dict[str, Any]]
    clear_color: LVecBase4f
    clear_depth: float
    clear_stencil: int
    pixel_zoom: float
    RTP_stencil: ClassVar[Literal[0]]
    RTP_depth_stencil: ClassVar[Literal[1]]
    RTP_color: ClassVar[Literal[2]]
    RTP_aux_rgba_0: ClassVar[Literal[3]]
    RTP_aux_rgba_1: ClassVar[Literal[4]]
    RTP_aux_rgba_2: ClassVar[Literal[5]]
    RTP_aux_rgba_3: ClassVar[Literal[6]]
    RTP_aux_hrgba_0: ClassVar[Literal[7]]
    RTP_aux_hrgba_1: ClassVar[Literal[8]]
    RTP_aux_hrgba_2: ClassVar[Literal[9]]
    RTP_aux_hrgba_3: ClassVar[Literal[10]]
    RTP_aux_float_0: ClassVar[Literal[11]]
    RTP_aux_float_1: ClassVar[Literal[12]]
    RTP_aux_float_2: ClassVar[Literal[13]]
    RTP_aux_float_3: ClassVar[Literal[14]]
    RTP_depth: ClassVar[Literal[15]]
    RTP_COUNT: ClassVar[Literal[16]]
    @property
    def pixel_factor(self) -> float: ...
    def set_clear_color_active(self, clear_color_active: bool) -> None: ...
    def get_clear_color_active(self) -> bool: ...
    def set_clear_depth_active(self, clear_depth_active: bool) -> None: ...
    def get_clear_depth_active(self) -> bool: ...
    def set_clear_stencil_active(self, clear_stencil_active: bool) -> None: ...
    def get_clear_stencil_active(self) -> bool: ...
    def set_clear_color(self, color: _Vec4f) -> None: ...
    def get_clear_color(self) -> LVecBase4f: ...
    def set_clear_depth(self, depth: float) -> None: ...
    def get_clear_depth(self) -> float: ...
    def set_clear_stencil(self, stencil: int) -> None: ...
    def get_clear_stencil(self) -> int: ...
    def set_clear_active(self, n: int, clear_aux_active: bool) -> None: ...
    def get_clear_active(self, n: int) -> bool: ...
    def set_clear_value(self, n: int, clear_value: _Vec4f) -> None: ...
    def get_clear_value(self, n: int) -> LVecBase4f: ...
    def disable_clears(self) -> None: ...
    def is_any_clear_active(self) -> bool: ...
    def set_pixel_zoom(self, pixel_zoom: float) -> None: ...
    def get_pixel_zoom(self) -> float: ...
    def get_pixel_factor(self) -> float: ...
    def supports_pixel_zoom(self) -> bool: ...
    @staticmethod
    def get_renderbuffer_type(plane: int) -> int: ...
    setClearColorActive = set_clear_color_active
    getClearColorActive = get_clear_color_active
    setClearDepthActive = set_clear_depth_active
    getClearDepthActive = get_clear_depth_active
    setClearStencilActive = set_clear_stencil_active
    getClearStencilActive = get_clear_stencil_active
    setClearColor = set_clear_color
    getClearColor = get_clear_color
    setClearDepth = set_clear_depth
    getClearDepth = get_clear_depth
    setClearStencil = set_clear_stencil
    getClearStencil = get_clear_stencil
    setClearActive = set_clear_active
    getClearActive = get_clear_active
    setClearValue = set_clear_value
    getClearValue = get_clear_value
    disableClears = disable_clears
    isAnyClearActive = is_any_clear_active
    setPixelZoom = set_pixel_zoom
    getPixelZoom = get_pixel_zoom
    getPixelFactor = get_pixel_factor
    supportsPixelZoom = supports_pixel_zoom
    getRenderbufferType = get_renderbuffer_type
    RTPStencil = RTP_stencil
    RTPDepthStencil = RTP_depth_stencil
    RTPColor = RTP_color
    RTPAuxRgba0 = RTP_aux_rgba_0
    RTPAuxRgba1 = RTP_aux_rgba_1
    RTPAuxRgba2 = RTP_aux_rgba_2
    RTPAuxRgba3 = RTP_aux_rgba_3
    RTPAuxHrgba0 = RTP_aux_hrgba_0
    RTPAuxHrgba1 = RTP_aux_hrgba_1
    RTPAuxHrgba2 = RTP_aux_hrgba_2
    RTPAuxHrgba3 = RTP_aux_hrgba_3
    RTPAuxFloat0 = RTP_aux_float_0
    RTPAuxFloat1 = RTP_aux_float_1
    RTPAuxFloat2 = RTP_aux_float_2
    RTPAuxFloat3 = RTP_aux_float_3
    RTPDepth = RTP_depth
    RTPCOUNT = RTP_COUNT

class WindowHandle(TypedReferenceCount):
    class OSHandle(TypedReferenceCount):
        DtoolClassDict: ClassVar[dict[str, Any]]
        def __init__(self, __param0: WindowHandle.OSHandle) -> None: ...
        def get_int_handle(self) -> int: ...
        def output(self, out: ostream) -> None: ...
        @staticmethod
        def get_class_type() -> TypeHandle: ...
        getIntHandle = get_int_handle
        getClassType = get_class_type
    DtoolClassDict: ClassVar[dict[str, Any]]
    os_handle: WindowHandle.OSHandle
    @overload
    def __init__(self, copy: WindowHandle) -> None: ...
    @overload
    def __init__(self, os_handle: WindowHandle.OSHandle) -> None: ...
    def get_os_handle(self) -> WindowHandle.OSHandle: ...
    def set_os_handle(self, os_handle: WindowHandle.OSHandle) -> None: ...
    def send_windows_message(self, msg: int, wparam: int, lparam: int) -> None: ...
    def get_int_handle(self) -> int: ...
    def output(self, out: ostream) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getOsHandle = get_os_handle
    setOsHandle = set_os_handle
    sendWindowsMessage = send_windows_message
    getIntHandle = get_int_handle
    getClassType = get_class_type

class WindowProperties:
    DtoolClassDict: ClassVar[dict[str, Any]]
    default: WindowProperties
    origin: LPoint2i
    size: LVector2i
    mouse_mode: _WindowProperties_MouseMode
    title: str
    undecorated: bool
    fixed_size: bool
    fullscreen: bool
    foreground: bool
    minimized: bool
    open: bool
    cursor_hidden: bool
    icon_filename: Filename
    cursor_filename: Filename
    z_order: _WindowProperties_ZOrder
    parent_window: WindowHandle
    Z_bottom: ClassVar[Literal[0]]
    Z_normal: ClassVar[Literal[1]]
    Z_top: ClassVar[Literal[2]]
    M_absolute: ClassVar[Literal[0]]
    M_relative: ClassVar[Literal[1]]
    M_confined: ClassVar[Literal[2]]
    @property
    def config_properties(self) -> WindowProperties: ...
    def __init__(self, args: Any, kwds: Any) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def assign(self, copy: WindowProperties) -> WindowProperties: ...
    @staticmethod
    def get_config_properties() -> WindowProperties: ...
    @staticmethod
    def get_default() -> WindowProperties: ...
    @staticmethod
    def set_default(default_properties: WindowProperties) -> None: ...
    @staticmethod
    def clear_default() -> None: ...
    @overload
    @staticmethod
    def size(size: LVecBase2i) -> WindowProperties: ...
    @overload
    @staticmethod
    def size(x_size: int, y_size: int) -> WindowProperties: ...
    def clear(self) -> None: ...
    def is_any_specified(self) -> bool: ...
    @overload
    def set_origin(self, origin: LVecBase2i) -> None: ...
    @overload
    def set_origin(self, x_origin: int, y_origin: int) -> None: ...
    def get_origin(self) -> LPoint2i: ...
    def get_x_origin(self) -> int: ...
    def get_y_origin(self) -> int: ...
    def has_origin(self) -> bool: ...
    def clear_origin(self) -> None: ...
    @overload
    def set_size(self, size: LVecBase2i) -> None: ...
    @overload
    def set_size(self, x_size: int, y_size: int) -> None: ...
    def get_size(self) -> LVector2i: ...
    def get_x_size(self) -> int: ...
    def get_y_size(self) -> int: ...
    def has_size(self) -> bool: ...
    def clear_size(self) -> None: ...
    def has_mouse_mode(self) -> bool: ...
    def set_mouse_mode(self, mode: _WindowProperties_MouseMode) -> None: ...
    def get_mouse_mode(self) -> _WindowProperties_MouseMode: ...
    def clear_mouse_mode(self) -> None: ...
    def set_title(self, title: str) -> None: ...
    def get_title(self) -> str: ...
    def has_title(self) -> bool: ...
    def clear_title(self) -> None: ...
    def set_undecorated(self, undecorated: bool) -> None: ...
    def get_undecorated(self) -> bool: ...
    def has_undecorated(self) -> bool: ...
    def clear_undecorated(self) -> None: ...
    def set_fixed_size(self, fixed_size: bool) -> None: ...
    def get_fixed_size(self) -> bool: ...
    def has_fixed_size(self) -> bool: ...
    def clear_fixed_size(self) -> None: ...
    def set_fullscreen(self, fullscreen: bool) -> None: ...
    def get_fullscreen(self) -> bool: ...
    def has_fullscreen(self) -> bool: ...
    def clear_fullscreen(self) -> None: ...
    def set_foreground(self, foreground: bool) -> None: ...
    def get_foreground(self) -> bool: ...
    def has_foreground(self) -> bool: ...
    def clear_foreground(self) -> None: ...
    def set_minimized(self, minimized: bool) -> None: ...
    def get_minimized(self) -> bool: ...
    def has_minimized(self) -> bool: ...
    def clear_minimized(self) -> None: ...
    def set_raw_mice(self, raw_mice: bool) -> None: ...
    def get_raw_mice(self) -> bool: ...
    def has_raw_mice(self) -> bool: ...
    def clear_raw_mice(self) -> None: ...
    def set_open(self, open: bool) -> None: ...
    def get_open(self) -> bool: ...
    def has_open(self) -> bool: ...
    def clear_open(self) -> None: ...
    def set_cursor_hidden(self, cursor_hidden: bool) -> None: ...
    def get_cursor_hidden(self) -> bool: ...
    def has_cursor_hidden(self) -> bool: ...
    def clear_cursor_hidden(self) -> None: ...
    def set_icon_filename(self, icon_filename: _Filename) -> None: ...
    def get_icon_filename(self) -> Filename: ...
    def has_icon_filename(self) -> bool: ...
    def clear_icon_filename(self) -> None: ...
    def set_cursor_filename(self, cursor_filename: _Filename) -> None: ...
    def get_cursor_filename(self) -> Filename: ...
    def has_cursor_filename(self) -> bool: ...
    def clear_cursor_filename(self) -> None: ...
    def set_z_order(self, z_order: _WindowProperties_ZOrder) -> None: ...
    def get_z_order(self) -> _WindowProperties_ZOrder: ...
    def has_z_order(self) -> bool: ...
    def clear_z_order(self) -> None: ...
    @overload
    def set_parent_window(self, parent_window: WindowHandle = ...) -> None: ...
    @overload
    def set_parent_window(self, parent: int) -> None: ...
    def get_parent_window(self) -> WindowHandle: ...
    def has_parent_window(self) -> bool: ...
    def clear_parent_window(self) -> None: ...
    def add_properties(self, other: WindowProperties) -> None: ...
    def output(self, out: ostream) -> None: ...
    getConfigProperties = get_config_properties
    getDefault = get_default
    setDefault = set_default
    clearDefault = clear_default
    isAnySpecified = is_any_specified
    setOrigin = set_origin
    getOrigin = get_origin
    getXOrigin = get_x_origin
    getYOrigin = get_y_origin
    hasOrigin = has_origin
    clearOrigin = clear_origin
    setSize = set_size
    getSize = get_size
    getXSize = get_x_size
    getYSize = get_y_size
    hasSize = has_size
    clearSize = clear_size
    hasMouseMode = has_mouse_mode
    setMouseMode = set_mouse_mode
    getMouseMode = get_mouse_mode
    clearMouseMode = clear_mouse_mode
    setTitle = set_title
    getTitle = get_title
    hasTitle = has_title
    clearTitle = clear_title
    setUndecorated = set_undecorated
    getUndecorated = get_undecorated
    hasUndecorated = has_undecorated
    clearUndecorated = clear_undecorated
    setFixedSize = set_fixed_size
    getFixedSize = get_fixed_size
    hasFixedSize = has_fixed_size
    clearFixedSize = clear_fixed_size
    setFullscreen = set_fullscreen
    getFullscreen = get_fullscreen
    hasFullscreen = has_fullscreen
    clearFullscreen = clear_fullscreen
    setForeground = set_foreground
    getForeground = get_foreground
    hasForeground = has_foreground
    clearForeground = clear_foreground
    setMinimized = set_minimized
    getMinimized = get_minimized
    hasMinimized = has_minimized
    clearMinimized = clear_minimized
    setRawMice = set_raw_mice
    getRawMice = get_raw_mice
    hasRawMice = has_raw_mice
    clearRawMice = clear_raw_mice
    setOpen = set_open
    getOpen = get_open
    hasOpen = has_open
    clearOpen = clear_open
    setCursorHidden = set_cursor_hidden
    getCursorHidden = get_cursor_hidden
    hasCursorHidden = has_cursor_hidden
    clearCursorHidden = clear_cursor_hidden
    setIconFilename = set_icon_filename
    getIconFilename = get_icon_filename
    hasIconFilename = has_icon_filename
    clearIconFilename = clear_icon_filename
    setCursorFilename = set_cursor_filename
    getCursorFilename = get_cursor_filename
    hasCursorFilename = has_cursor_filename
    clearCursorFilename = clear_cursor_filename
    setZOrder = set_z_order
    getZOrder = get_z_order
    hasZOrder = has_z_order
    clearZOrder = clear_z_order
    setParentWindow = set_parent_window
    getParentWindow = get_parent_window
    hasParentWindow = has_parent_window
    clearParentWindow = clear_parent_window
    addProperties = add_properties
    ZBottom = Z_bottom
    ZNormal = Z_normal
    ZTop = Z_top
    MAbsolute = M_absolute
    MRelative = M_relative
    MConfined = M_confined

class DisplayRegion(TypedReferenceCount, DrawableRegion):
    DtoolClassDict: ClassVar[dict[str, Any]]
    dimensions: LVecBase4f
    camera: NodePath
    active: bool
    sort: int
    stereo_channel: _Lens_StereoChannel
    tex_view_offset: int
    incomplete_render: bool
    texture_reload_priority: int
    lens_index: int
    cull_traverser: CullTraverser
    target_tex_page: int
    scissor_enabled: bool
    cull_callback: CallbackObject
    draw_callback: CallbackObject
    @property
    def window(self) -> GraphicsOutput: ...
    @property
    def pipe(self) -> GraphicsPipe: ...
    @property
    def stereo(self) -> bool: ...
    @property
    def pixel_size(self) -> LVecBase2i: ...
    def upcast_to_TypedReferenceCount(self) -> TypedReferenceCount: ...
    def upcast_to_DrawableRegion(self) -> DrawableRegion: ...
    def get_num_regions(self) -> int: ...
    def set_num_regions(self, i: int) -> None: ...
    def get_dimensions(self, i: int = ...) -> LVecBase4f: ...
    def get_left(self, i: int = ...) -> float: ...
    def get_right(self, i: int = ...) -> float: ...
    def get_bottom(self, i: int = ...) -> float: ...
    def get_top(self, i: int = ...) -> float: ...
    @overload
    def set_dimensions(self, dimensions: _Vec4f) -> None: ...
    @overload
    def set_dimensions(self, i: int, dimensions: _Vec4f) -> None: ...
    @overload
    def set_dimensions(self, l: float, r: float, b: float, t: float) -> None: ...
    @overload
    def set_dimensions(self, i: int, l: float, r: float, b: float, t: float) -> None: ...
    def get_window(self) -> GraphicsOutput: ...
    def get_pipe(self) -> GraphicsPipe: ...
    def is_stereo(self) -> bool: ...
    def set_camera(self, camera: NodePath) -> None: ...
    def get_camera(self, current_thread: Thread = ...) -> NodePath: ...
    def set_active(self, active: bool) -> None: ...
    def is_active(self) -> bool: ...
    def set_sort(self, sort: int) -> None: ...
    def get_sort(self) -> int: ...
    def set_stereo_channel(self, stereo_channel: _Lens_StereoChannel) -> None: ...
    def get_stereo_channel(self) -> _Lens_StereoChannel: ...
    def set_tex_view_offset(self, tex_view_offset: int) -> None: ...
    def get_tex_view_offset(self) -> int: ...
    def set_incomplete_render(self, incomplete_render: bool) -> None: ...
    def get_incomplete_render(self) -> bool: ...
    def set_texture_reload_priority(self, texture_reload_priority: int) -> None: ...
    def get_texture_reload_priority(self) -> int: ...
    def set_lens_index(self, index: int) -> None: ...
    def get_lens_index(self) -> int: ...
    def set_cull_traverser(self, trav: CullTraverser) -> None: ...
    def get_cull_traverser(self) -> CullTraverser: ...
    def set_cube_map_index(self, cube_map_index: int) -> None: ...
    def set_target_tex_page(self, page: int) -> None: ...
    def get_target_tex_page(self) -> int: ...
    def set_scissor_enabled(self, scissor_enabled: bool) -> None: ...
    def get_scissor_enabled(self) -> bool: ...
    def set_cull_callback(self, object: CallbackObject) -> None: ...
    def clear_cull_callback(self) -> None: ...
    def get_cull_callback(self) -> CallbackObject: ...
    def set_draw_callback(self, object: CallbackObject) -> None: ...
    def clear_draw_callback(self) -> None: ...
    def get_draw_callback(self) -> CallbackObject: ...
    def get_pixel_width(self, i: int = ...) -> int: ...
    def get_pixel_height(self, i: int = ...) -> int: ...
    def get_pixel_size(self, i: int = ...) -> LVecBase2i: ...
    def output(self, out: ostream) -> None: ...
    @staticmethod
    def make_screenshot_filename(prefix: str = ...) -> Filename: ...
    def save_screenshot_default(self, prefix: str = ...) -> Filename: ...
    def save_screenshot(self, filename: _Filename, image_comment: str = ...) -> bool: ...
    @overload
    def get_screenshot(self) -> Texture: ...
    @overload
    def get_screenshot(self, image: PNMImage) -> bool: ...
    def clear_cull_result(self) -> None: ...
    def make_cull_result_graph(self) -> PandaNode: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToTypedReferenceCount = upcast_to_TypedReferenceCount
    upcastToDrawableRegion = upcast_to_DrawableRegion
    getNumRegions = get_num_regions
    setNumRegions = set_num_regions
    getDimensions = get_dimensions
    getLeft = get_left
    getRight = get_right
    getBottom = get_bottom
    getTop = get_top
    setDimensions = set_dimensions
    getWindow = get_window
    getPipe = get_pipe
    isStereo = is_stereo
    setCamera = set_camera
    getCamera = get_camera
    setActive = set_active
    isActive = is_active
    setSort = set_sort
    getSort = get_sort
    setStereoChannel = set_stereo_channel
    getStereoChannel = get_stereo_channel
    setTexViewOffset = set_tex_view_offset
    getTexViewOffset = get_tex_view_offset
    setIncompleteRender = set_incomplete_render
    getIncompleteRender = get_incomplete_render
    setTextureReloadPriority = set_texture_reload_priority
    getTextureReloadPriority = get_texture_reload_priority
    setLensIndex = set_lens_index
    getLensIndex = get_lens_index
    setCullTraverser = set_cull_traverser
    getCullTraverser = get_cull_traverser
    setCubeMapIndex = set_cube_map_index
    setTargetTexPage = set_target_tex_page
    getTargetTexPage = get_target_tex_page
    setScissorEnabled = set_scissor_enabled
    getScissorEnabled = get_scissor_enabled
    setCullCallback = set_cull_callback
    clearCullCallback = clear_cull_callback
    getCullCallback = get_cull_callback
    setDrawCallback = set_draw_callback
    clearDrawCallback = clear_draw_callback
    getDrawCallback = get_draw_callback
    getPixelWidth = get_pixel_width
    getPixelHeight = get_pixel_height
    getPixelSize = get_pixel_size
    makeScreenshotFilename = make_screenshot_filename
    saveScreenshotDefault = save_screenshot_default
    saveScreenshot = save_screenshot
    getScreenshot = get_screenshot
    clearCullResult = clear_cull_result
    makeCullResultGraph = make_cull_result_graph
    getClassType = get_class_type

class GraphicsOutput(GraphicsOutputBase, DrawableRegion):
    DtoolClassDict: ClassVar[dict[str, Any]]
    active: bool
    one_shot: bool
    inverted: bool
    swap_eyes: bool
    sort: int
    child_sort: int
    RTM_none: ClassVar[Literal[0]]
    RTM_bind_or_copy: ClassVar[Literal[1]]
    RTM_copy_texture: ClassVar[Literal[2]]
    RTM_copy_ram: ClassVar[Literal[3]]
    RTM_triggered_copy_texture: ClassVar[Literal[4]]
    RTM_triggered_copy_ram: ClassVar[Literal[5]]
    RTM_bind_layered: ClassVar[Literal[6]]
    FM_render: ClassVar[Literal[0]]
    FM_parasite: ClassVar[Literal[1]]
    FM_refresh: ClassVar[Literal[2]]
    @property
    def gsg(self) -> GraphicsStateGuardian: ...
    @property
    def pipe(self) -> GraphicsPipe: ...
    @property
    def engine(self) -> GraphicsEngine: ...
    @property
    def name(self) -> str: ...
    @property
    def size(self) -> LVecBase2i: ...
    @property
    def fb_size(self) -> LVecBase2i: ...
    @property
    def sbs_left_size(self) -> LVecBase2i: ...
    @property
    def sbs_right_size(self) -> LVecBase2i: ...
    @property
    def display_regions(self) -> Sequence[DisplayRegion]: ...
    @property
    def active_display_regions(self) -> Sequence[DisplayRegion]: ...
    @property
    def supports_render_texture(self) -> bool: ...
    def upcast_to_GraphicsOutputBase(self) -> GraphicsOutputBase: ...
    def upcast_to_DrawableRegion(self) -> DrawableRegion: ...
    def get_gsg(self) -> GraphicsStateGuardian: ...
    def get_pipe(self) -> GraphicsPipe: ...
    def get_engine(self) -> GraphicsEngine: ...
    def get_name(self) -> str: ...
    def count_textures(self) -> int: ...
    def has_texture(self) -> bool: ...
    def get_texture(self, i: int = ...) -> Texture: ...
    def get_texture_plane(self, i: int = ...) -> _DrawableRegion_RenderTexturePlane: ...
    def get_rtm_mode(self, i: int = ...) -> _GraphicsOutput_RenderTextureMode: ...
    def clear_render_textures(self) -> None: ...
    def add_render_texture(self, tex: Texture, mode: _GraphicsOutput_RenderTextureMode, bitplane: _DrawableRegion_RenderTexturePlane = ...) -> None: ...
    def setup_render_texture(self, tex: Texture, allow_bind: bool, to_ram: bool) -> None: ...
    def get_size(self) -> LVecBase2i: ...
    def get_x_size(self) -> int: ...
    def get_y_size(self) -> int: ...
    def get_fb_size(self) -> LVecBase2i: ...
    def get_fb_x_size(self) -> int: ...
    def get_fb_y_size(self) -> int: ...
    def get_sbs_left_size(self) -> LVecBase2i: ...
    def get_sbs_left_x_size(self) -> int: ...
    def get_sbs_left_y_size(self) -> int: ...
    def get_sbs_right_size(self) -> LVecBase2i: ...
    def get_sbs_right_x_size(self) -> int: ...
    def get_sbs_right_y_size(self) -> int: ...
    def has_size(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def is_nonzero_size(self) -> bool: ...
    def set_active(self, active: bool) -> None: ...
    def is_active(self) -> bool: ...
    def set_one_shot(self, one_shot: bool) -> None: ...
    def get_one_shot(self) -> bool: ...
    def set_inverted(self, inverted: bool) -> None: ...
    def get_inverted(self) -> bool: ...
    def set_swap_eyes(self, swap_eyes: bool) -> None: ...
    def get_swap_eyes(self) -> bool: ...
    def set_red_blue_stereo(self, red_blue_stereo: bool, left_eye_color_mask: int, right_eye_color_mask: int) -> None: ...
    def get_red_blue_stereo(self) -> bool: ...
    def get_left_eye_color_mask(self) -> int: ...
    def get_right_eye_color_mask(self) -> int: ...
    @overload
    def set_side_by_side_stereo(self, side_by_side_stereo: bool) -> None: ...
    @overload
    def set_side_by_side_stereo(self, side_by_side_stereo: bool, sbs_left_dimensions: _Vec4f, sbs_right_dimensions: _Vec4f) -> None: ...
    def get_side_by_side_stereo(self) -> bool: ...
    def get_sbs_left_dimensions(self) -> LVecBase4f: ...
    def get_sbs_right_dimensions(self) -> LVecBase4f: ...
    def get_fb_properties(self) -> FrameBufferProperties: ...
    def is_stereo(self) -> bool: ...
    def clear_delete_flag(self) -> None: ...
    def get_delete_flag(self) -> bool: ...
    def set_sort(self, sort: int) -> None: ...
    def get_sort(self) -> int: ...
    def set_child_sort(self, child_sort: int) -> None: ...
    def clear_child_sort(self) -> None: ...
    def get_child_sort(self) -> int: ...
    def trigger_copy(self) -> AsyncFuture: ...
    @overload
    def make_display_region(self) -> DisplayRegion: ...
    @overload
    def make_display_region(self, dimensions: _Vec4f) -> DisplayRegion: ...
    @overload
    def make_display_region(self, l: float, r: float, b: float, t: float) -> DisplayRegion: ...
    @overload
    def make_mono_display_region(self) -> DisplayRegion: ...
    @overload
    def make_mono_display_region(self, dimensions: _Vec4f) -> DisplayRegion: ...
    @overload
    def make_mono_display_region(self, l: float, r: float, b: float, t: float) -> DisplayRegion: ...
    @overload
    def make_stereo_display_region(self) -> StereoDisplayRegion: ...
    @overload
    def make_stereo_display_region(self, dimensions: _Vec4f) -> StereoDisplayRegion: ...
    @overload
    def make_stereo_display_region(self, l: float, r: float, b: float, t: float) -> StereoDisplayRegion: ...
    def remove_display_region(self, display_region: DisplayRegion) -> bool: ...
    def remove_all_display_regions(self) -> None: ...
    def get_overlay_display_region(self) -> DisplayRegion: ...
    def set_overlay_display_region(self, display_region: DisplayRegion) -> None: ...
    def get_num_display_regions(self) -> int: ...
    def get_display_region(self, n: int) -> DisplayRegion: ...
    def get_num_active_display_regions(self) -> int: ...
    def get_active_display_region(self, n: int) -> DisplayRegion: ...
    def make_texture_buffer(self, name: str, x_size: int, y_size: int, tex: Texture = ..., to_ram: bool = ..., fbp: FrameBufferProperties = ...) -> GraphicsOutput: ...
    def make_cube_map(self, name: str, size: int, camera_rig: NodePath, camera_mask: BitMask_uint32_t_32 = ..., to_ram: bool = ..., fbp: FrameBufferProperties = ...) -> GraphicsOutput: ...
    @staticmethod
    def make_screenshot_filename(prefix: str = ...) -> Filename: ...
    def save_screenshot_default(self, prefix: str = ...) -> Filename: ...
    def save_screenshot(self, filename: _Filename, image_comment: str = ...) -> bool: ...
    @overload
    def get_screenshot(self) -> Texture: ...
    @overload
    def get_screenshot(self, image: PNMImage) -> bool: ...
    def get_texture_card(self) -> NodePath: ...
    def share_depth_buffer(self, graphics_output: GraphicsOutput) -> bool: ...
    def unshare_depth_buffer(self) -> None: ...
    def get_supports_render_texture(self) -> bool: ...
    def flip_ready(self) -> bool: ...
    def get_host(self) -> GraphicsOutput: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_display_regions(self) -> tuple[DisplayRegion, ...]: ...
    def get_active_display_regions(self) -> tuple[DisplayRegion, ...]: ...
    upcastToGraphicsOutputBase = upcast_to_GraphicsOutputBase
    upcastToDrawableRegion = upcast_to_DrawableRegion
    getGsg = get_gsg
    getPipe = get_pipe
    getEngine = get_engine
    getName = get_name
    countTextures = count_textures
    hasTexture = has_texture
    getTexture = get_texture
    getTexturePlane = get_texture_plane
    getRtmMode = get_rtm_mode
    clearRenderTextures = clear_render_textures
    addRenderTexture = add_render_texture
    setupRenderTexture = setup_render_texture
    getSize = get_size
    getXSize = get_x_size
    getYSize = get_y_size
    getFbSize = get_fb_size
    getFbXSize = get_fb_x_size
    getFbYSize = get_fb_y_size
    getSbsLeftSize = get_sbs_left_size
    getSbsLeftXSize = get_sbs_left_x_size
    getSbsLeftYSize = get_sbs_left_y_size
    getSbsRightSize = get_sbs_right_size
    getSbsRightXSize = get_sbs_right_x_size
    getSbsRightYSize = get_sbs_right_y_size
    hasSize = has_size
    isValid = is_valid
    isNonzeroSize = is_nonzero_size
    setActive = set_active
    isActive = is_active
    setOneShot = set_one_shot
    getOneShot = get_one_shot
    setInverted = set_inverted
    getInverted = get_inverted
    setSwapEyes = set_swap_eyes
    getSwapEyes = get_swap_eyes
    setRedBlueStereo = set_red_blue_stereo
    getRedBlueStereo = get_red_blue_stereo
    getLeftEyeColorMask = get_left_eye_color_mask
    getRightEyeColorMask = get_right_eye_color_mask
    setSideBySideStereo = set_side_by_side_stereo
    getSideBySideStereo = get_side_by_side_stereo
    getSbsLeftDimensions = get_sbs_left_dimensions
    getSbsRightDimensions = get_sbs_right_dimensions
    getFbProperties = get_fb_properties
    isStereo = is_stereo
    clearDeleteFlag = clear_delete_flag
    getDeleteFlag = get_delete_flag
    setSort = set_sort
    getSort = get_sort
    setChildSort = set_child_sort
    clearChildSort = clear_child_sort
    getChildSort = get_child_sort
    triggerCopy = trigger_copy
    makeDisplayRegion = make_display_region
    makeMonoDisplayRegion = make_mono_display_region
    makeStereoDisplayRegion = make_stereo_display_region
    removeDisplayRegion = remove_display_region
    removeAllDisplayRegions = remove_all_display_regions
    getOverlayDisplayRegion = get_overlay_display_region
    setOverlayDisplayRegion = set_overlay_display_region
    getNumDisplayRegions = get_num_display_regions
    getDisplayRegion = get_display_region
    getNumActiveDisplayRegions = get_num_active_display_regions
    getActiveDisplayRegion = get_active_display_region
    makeTextureBuffer = make_texture_buffer
    makeCubeMap = make_cube_map
    makeScreenshotFilename = make_screenshot_filename
    saveScreenshotDefault = save_screenshot_default
    saveScreenshot = save_screenshot
    getScreenshot = get_screenshot
    getTextureCard = get_texture_card
    shareDepthBuffer = share_depth_buffer
    unshareDepthBuffer = unshare_depth_buffer
    getSupportsRenderTexture = get_supports_render_texture
    flipReady = flip_ready
    getHost = get_host
    getClassType = get_class_type
    getDisplayRegions = get_display_regions
    getActiveDisplayRegions = get_active_display_regions
    RTMNone = RTM_none
    RTMBindOrCopy = RTM_bind_or_copy
    RTMCopyTexture = RTM_copy_texture
    RTMCopyRam = RTM_copy_ram
    RTMTriggeredCopyTexture = RTM_triggered_copy_texture
    RTMTriggeredCopyRam = RTM_triggered_copy_ram
    RTMBindLayered = RTM_bind_layered
    FMRender = FM_render
    FMParasite = FM_parasite
    FMRefresh = FM_refresh

class GraphicsStateGuardian(GraphicsStateGuardianBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    active: bool
    incomplete_render: bool
    loader: Loader
    shader_generator: ShaderGenerator
    shader_model: _GraphicsStateGuardian_ShaderModel
    coordinate_system: _CoordinateSystem
    gamma: float
    texture_quality_override: _Texture_QualityLevel
    flash_texture: Texture
    scene: SceneSetup
    SM_00: ClassVar[Literal[0]]
    SM_11: ClassVar[Literal[1]]
    SM_20: ClassVar[Literal[2]]
    SM_2X: ClassVar[Literal[3]]
    SM_30: ClassVar[Literal[4]]
    SM_40: ClassVar[Literal[5]]
    SM_50: ClassVar[Literal[6]]
    SM_51: ClassVar[Literal[7]]
    @property
    def valid(self) -> bool: ...
    @property
    def effective_incomplete_render(self) -> bool: ...
    @property
    def pipe(self) -> GraphicsPipe: ...
    @property
    def max_vertices_per_array(self) -> int: ...
    @property
    def max_vertices_per_primitive(self) -> int: ...
    @property
    def max_texture_stages(self) -> int: ...
    @property
    def max_texture_dimension(self) -> int: ...
    @property
    def max_3d_texture_dimension(self) -> int: ...
    @property
    def max_2d_texture_array_layers(self) -> int: ...
    @property
    def max_cube_map_dimension(self) -> int: ...
    @property
    def max_buffer_texture_size(self) -> int: ...
    @property
    def supports_texture_combine(self) -> bool: ...
    @property
    def supports_texture_saved_result(self) -> bool: ...
    @property
    def supports_texture_dot3(self) -> bool: ...
    @property
    def supports_3d_texture(self) -> bool: ...
    @property
    def supports_2d_texture_array(self) -> bool: ...
    @property
    def supports_cube_map(self) -> bool: ...
    @property
    def supports_buffer_texture(self) -> bool: ...
    @property
    def supports_cube_map_array(self) -> bool: ...
    @property
    def supports_tex_non_pow2(self) -> bool: ...
    @property
    def supports_texture_srgb(self) -> bool: ...
    @property
    def supports_compressed_texture(self) -> bool: ...
    @property
    def max_lights(self) -> int: ...
    @property
    def max_clip_planes(self) -> int: ...
    @property
    def max_vertex_transforms(self) -> int: ...
    @property
    def max_vertex_transform_indices(self) -> int: ...
    @property
    def copy_texture_inverted(self) -> bool: ...
    @property
    def supports_multisample(self) -> bool: ...
    @property
    def supports_generate_mipmap(self) -> bool: ...
    @property
    def supports_depth_texture(self) -> bool: ...
    @property
    def supports_depth_stencil(self) -> bool: ...
    @property
    def supports_luminance_texture(self) -> bool: ...
    @property
    def supports_shadow_filter(self) -> bool: ...
    @property
    def supports_sampler_objects(self) -> bool: ...
    @property
    def supports_basic_shaders(self) -> bool: ...
    @property
    def supports_geometry_shaders(self) -> bool: ...
    @property
    def supports_tessellation_shaders(self) -> bool: ...
    @property
    def supports_compute_shaders(self) -> bool: ...
    @property
    def supports_glsl(self) -> bool: ...
    @property
    def supports_hlsl(self) -> bool: ...
    @property
    def supports_stencil(self) -> bool: ...
    @property
    def supports_two_sided_stencil(self) -> bool: ...
    @property
    def supports_geometry_instancing(self) -> bool: ...
    @property
    def supports_indirect_draw(self) -> bool: ...
    @property
    def supports_occlusion_query(self) -> bool: ...
    @property
    def supports_timer_query(self) -> bool: ...
    @property
    def timer_queries_active(self) -> bool: ...
    @property
    def max_color_targets(self) -> int: ...
    @property
    def supports_dual_source_blending(self) -> bool: ...
    @property
    def prepared_objects(self) -> PreparedGraphicsObjects: ...
    @property
    def driver_vendor(self) -> str: ...
    @property
    def driver_renderer(self) -> str: ...
    @property
    def driver_version(self) -> str: ...
    @property
    def driver_version_major(self) -> int: ...
    @property
    def driver_version_minor(self) -> int: ...
    @property
    def driver_shader_version_major(self) -> int: ...
    @property
    def driver_shader_version_minor(self) -> int: ...
    def release_all(self) -> None: ...
    def release_all_textures(self) -> int: ...
    def release_all_samplers(self) -> int: ...
    def release_all_geoms(self) -> int: ...
    def release_all_vertex_buffers(self) -> int: ...
    def release_all_index_buffers(self) -> int: ...
    def release_all_shader_buffers(self) -> int: ...
    def set_active(self, active: bool) -> None: ...
    def is_active(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def needs_reset(self) -> bool: ...
    def set_incomplete_render(self, incomplete_render: bool) -> None: ...
    def set_loader(self, loader: Loader) -> None: ...
    def get_loader(self) -> Loader: ...
    def set_shader_generator(self, shader_generator: ShaderGenerator) -> None: ...
    def get_shader_generator(self) -> ShaderGenerator: ...
    def get_pipe(self) -> GraphicsPipe: ...
    def get_engine(self) -> GraphicsEngine: ...
    def get_threading_model(self) -> GraphicsThreadingModel: ...
    def is_hardware(self) -> bool: ...
    def get_max_texture_stages(self) -> int: ...
    def get_max_3d_texture_dimension(self) -> int: ...
    def get_max_2d_texture_array_layers(self) -> int: ...
    def get_max_cube_map_dimension(self) -> int: ...
    def get_max_buffer_texture_size(self) -> int: ...
    def get_supports_texture_combine(self) -> bool: ...
    def get_supports_texture_saved_result(self) -> bool: ...
    def get_supports_texture_dot3(self) -> bool: ...
    def get_supports_3d_texture(self) -> bool: ...
    def get_supports_2d_texture_array(self) -> bool: ...
    def get_supports_cube_map(self) -> bool: ...
    def get_supports_buffer_texture(self) -> bool: ...
    def get_supports_cube_map_array(self) -> bool: ...
    def get_supports_tex_non_pow2(self) -> bool: ...
    def get_supports_compressed_texture(self) -> bool: ...
    def get_max_lights(self) -> int: ...
    def get_max_clip_planes(self) -> int: ...
    def get_max_vertex_transforms(self) -> int: ...
    def get_max_vertex_transform_indices(self) -> int: ...
    def get_copy_texture_inverted(self) -> bool: ...
    def get_supports_generate_mipmap(self) -> bool: ...
    def get_supports_depth_texture(self) -> bool: ...
    def get_supports_depth_stencil(self) -> bool: ...
    def get_supports_luminance_texture(self) -> bool: ...
    def get_supports_sampler_objects(self) -> bool: ...
    def get_supports_basic_shaders(self) -> bool: ...
    def get_supports_geometry_shaders(self) -> bool: ...
    def get_supports_tessellation_shaders(self) -> bool: ...
    def get_supports_compute_shaders(self) -> bool: ...
    def get_supports_glsl(self) -> bool: ...
    def get_supports_stencil(self) -> bool: ...
    def get_supports_two_sided_stencil(self) -> bool: ...
    def get_supports_geometry_instancing(self) -> bool: ...
    def get_supports_indirect_draw(self) -> bool: ...
    def get_supports_occlusion_query(self) -> bool: ...
    def get_supports_timer_query(self) -> bool: ...
    def get_timer_queries_active(self) -> bool: ...
    def get_max_color_targets(self) -> int: ...
    def get_maximum_simultaneous_render_targets(self) -> int: ...
    def get_supports_dual_source_blending(self) -> bool: ...
    def get_shader_model(self) -> _GraphicsStateGuardian_ShaderModel: ...
    def set_shader_model(self, shader_model: _GraphicsStateGuardian_ShaderModel) -> None: ...
    def get_supports_cg_profile(self, name: str) -> bool: ...
    def get_color_scale_via_lighting(self) -> bool: ...
    @overload
    def get_alpha_scale_via_texture(self) -> bool: ...
    @overload
    def get_alpha_scale_via_texture(self, tex_attrib: TextureAttrib) -> bool: ...
    def get_runtime_color_scale(self) -> bool: ...
    @staticmethod
    def get_alpha_scale_texture_stage() -> TextureStage: ...
    def set_coordinate_system(self, cs: _CoordinateSystem) -> None: ...
    def get_coordinate_system(self) -> _CoordinateSystem: ...
    def get_internal_coordinate_system(self) -> _CoordinateSystem: ...
    def get_prepared_objects(self) -> PreparedGraphicsObjects: ...
    def set_gamma(self, gamma: float) -> bool: ...
    def get_gamma(self) -> float: ...
    def restore_gamma(self) -> None: ...
    def set_texture_quality_override(self, quality_level: _Texture_QualityLevel) -> None: ...
    def get_texture_quality_override(self) -> _Texture_QualityLevel: ...
    def get_prepared_textures(self) -> list[Any]: ...
    def set_flash_texture(self, tex: Texture) -> None: ...
    def clear_flash_texture(self) -> None: ...
    def get_flash_texture(self) -> Texture: ...
    def has_extension(self, extension: str) -> bool: ...
    def get_driver_vendor(self) -> str: ...
    def get_driver_renderer(self) -> str: ...
    def get_driver_version(self) -> str: ...
    def get_driver_version_major(self) -> int: ...
    def get_driver_version_minor(self) -> int: ...
    def get_driver_shader_version_major(self) -> int: ...
    def get_driver_shader_version_minor(self) -> int: ...
    def set_scene(self, scene_setup: SceneSetup) -> bool: ...
    def get_scene(self) -> SceneSetup: ...
    def begin_scene(self) -> bool: ...
    def end_scene(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    releaseAll = release_all
    releaseAllTextures = release_all_textures
    releaseAllSamplers = release_all_samplers
    releaseAllGeoms = release_all_geoms
    releaseAllVertexBuffers = release_all_vertex_buffers
    releaseAllIndexBuffers = release_all_index_buffers
    releaseAllShaderBuffers = release_all_shader_buffers
    setActive = set_active
    isActive = is_active
    isValid = is_valid
    needsReset = needs_reset
    setIncompleteRender = set_incomplete_render
    setLoader = set_loader
    getLoader = get_loader
    setShaderGenerator = set_shader_generator
    getShaderGenerator = get_shader_generator
    getPipe = get_pipe
    getEngine = get_engine
    getThreadingModel = get_threading_model
    isHardware = is_hardware
    getMaxTextureStages = get_max_texture_stages
    getMax3dTextureDimension = get_max_3d_texture_dimension
    getMax2dTextureArrayLayers = get_max_2d_texture_array_layers
    getMaxCubeMapDimension = get_max_cube_map_dimension
    getMaxBufferTextureSize = get_max_buffer_texture_size
    getSupportsTextureCombine = get_supports_texture_combine
    getSupportsTextureSavedResult = get_supports_texture_saved_result
    getSupportsTextureDot3 = get_supports_texture_dot3
    getSupports3dTexture = get_supports_3d_texture
    getSupports2dTextureArray = get_supports_2d_texture_array
    getSupportsCubeMap = get_supports_cube_map
    getSupportsBufferTexture = get_supports_buffer_texture
    getSupportsCubeMapArray = get_supports_cube_map_array
    getSupportsTexNonPow2 = get_supports_tex_non_pow2
    getSupportsCompressedTexture = get_supports_compressed_texture
    getMaxLights = get_max_lights
    getMaxClipPlanes = get_max_clip_planes
    getMaxVertexTransforms = get_max_vertex_transforms
    getMaxVertexTransformIndices = get_max_vertex_transform_indices
    getCopyTextureInverted = get_copy_texture_inverted
    getSupportsGenerateMipmap = get_supports_generate_mipmap
    getSupportsDepthTexture = get_supports_depth_texture
    getSupportsDepthStencil = get_supports_depth_stencil
    getSupportsLuminanceTexture = get_supports_luminance_texture
    getSupportsSamplerObjects = get_supports_sampler_objects
    getSupportsBasicShaders = get_supports_basic_shaders
    getSupportsGeometryShaders = get_supports_geometry_shaders
    getSupportsTessellationShaders = get_supports_tessellation_shaders
    getSupportsComputeShaders = get_supports_compute_shaders
    getSupportsGlsl = get_supports_glsl
    getSupportsStencil = get_supports_stencil
    getSupportsTwoSidedStencil = get_supports_two_sided_stencil
    getSupportsGeometryInstancing = get_supports_geometry_instancing
    getSupportsIndirectDraw = get_supports_indirect_draw
    getSupportsOcclusionQuery = get_supports_occlusion_query
    getSupportsTimerQuery = get_supports_timer_query
    getTimerQueriesActive = get_timer_queries_active
    getMaxColorTargets = get_max_color_targets
    getMaximumSimultaneousRenderTargets = get_maximum_simultaneous_render_targets
    getSupportsDualSourceBlending = get_supports_dual_source_blending
    getShaderModel = get_shader_model
    setShaderModel = set_shader_model
    getSupportsCgProfile = get_supports_cg_profile
    getColorScaleViaLighting = get_color_scale_via_lighting
    getAlphaScaleViaTexture = get_alpha_scale_via_texture
    getRuntimeColorScale = get_runtime_color_scale
    getAlphaScaleTextureStage = get_alpha_scale_texture_stage
    setCoordinateSystem = set_coordinate_system
    getCoordinateSystem = get_coordinate_system
    getInternalCoordinateSystem = get_internal_coordinate_system
    getPreparedObjects = get_prepared_objects
    setGamma = set_gamma
    getGamma = get_gamma
    restoreGamma = restore_gamma
    setTextureQualityOverride = set_texture_quality_override
    getTextureQualityOverride = get_texture_quality_override
    getPreparedTextures = get_prepared_textures
    setFlashTexture = set_flash_texture
    clearFlashTexture = clear_flash_texture
    getFlashTexture = get_flash_texture
    hasExtension = has_extension
    getDriverVendor = get_driver_vendor
    getDriverRenderer = get_driver_renderer
    getDriverVersion = get_driver_version
    getDriverVersionMajor = get_driver_version_major
    getDriverVersionMinor = get_driver_version_minor
    getDriverShaderVersionMajor = get_driver_shader_version_major
    getDriverShaderVersionMinor = get_driver_shader_version_minor
    setScene = set_scene
    getScene = get_scene
    beginScene = begin_scene
    endScene = end_scene
    getClassType = get_class_type
    SM00 = SM_00
    SM11 = SM_11
    SM20 = SM_20
    SM2X = SM_2X
    SM30 = SM_30
    SM40 = SM_40
    SM50 = SM_50
    SM51 = SM_51

class GraphicsEngine(ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    threading_model: GraphicsThreadingModel
    auto_flip: bool
    portal_cull: bool
    default_loader: Loader
    @property
    def render_lock(self) -> ReMutex: ...
    @property
    def windows(self) -> Sequence[GraphicsOutput]: ...
    def set_threading_model(self, threading_model: GraphicsThreadingModel) -> None: ...
    def get_threading_model(self) -> GraphicsThreadingModel: ...
    def get_render_lock(self) -> ReMutex: ...
    def set_auto_flip(self, auto_flip: bool) -> None: ...
    def get_auto_flip(self) -> bool: ...
    def set_portal_cull(self, value: bool) -> None: ...
    def get_portal_cull(self) -> bool: ...
    def set_default_loader(self, loader: Loader) -> None: ...
    def get_default_loader(self) -> Loader: ...
    def make_output(self, pipe: GraphicsPipe, name: str, sort: int, fb_prop: FrameBufferProperties, win_prop: WindowProperties, flags: int, gsg: GraphicsStateGuardian = ..., host: GraphicsOutput = ...) -> GraphicsOutput: ...
    @overload
    def make_buffer(self, host: GraphicsOutput, name: str, sort: int, x_size: int, y_size: int) -> GraphicsOutput: ...
    @overload
    def make_buffer(self, gsg: GraphicsStateGuardian, name: str, sort: int, x_size: int, y_size: int) -> GraphicsOutput: ...
    def make_parasite(self, host: GraphicsOutput, name: str, sort: int, x_size: int, y_size: int) -> GraphicsOutput: ...
    def add_window(self, window: GraphicsOutput, sort: int) -> bool: ...
    def remove_window(self, window: GraphicsOutput) -> bool: ...
    def remove_all_windows(self) -> None: ...
    def reset_all_windows(self, swapchain: bool) -> None: ...
    def is_empty(self) -> bool: ...
    def get_num_windows(self) -> int: ...
    def get_window(self, n: int) -> GraphicsOutput: ...
    def render_frame(self) -> None: ...
    def open_windows(self) -> None: ...
    def sync_frame(self) -> None: ...
    def ready_flip(self) -> None: ...
    def flip_frame(self) -> None: ...
    def extract_texture_data(self, tex: Texture, gsg: GraphicsStateGuardian) -> bool: ...
    def dispatch_compute(self, work_groups: LVecBase3i, sattr: ShaderAttrib, gsg: GraphicsStateGuardian) -> None: ...
    @staticmethod
    def get_global_ptr() -> GraphicsEngine: ...
    def get_windows(self) -> tuple[GraphicsOutput, ...]: ...
    setThreadingModel = set_threading_model
    getThreadingModel = get_threading_model
    getRenderLock = get_render_lock
    setAutoFlip = set_auto_flip
    getAutoFlip = get_auto_flip
    setPortalCull = set_portal_cull
    getPortalCull = get_portal_cull
    setDefaultLoader = set_default_loader
    getDefaultLoader = get_default_loader
    makeOutput = make_output
    makeBuffer = make_buffer
    makeParasite = make_parasite
    addWindow = add_window
    removeWindow = remove_window
    removeAllWindows = remove_all_windows
    resetAllWindows = reset_all_windows
    isEmpty = is_empty
    getNumWindows = get_num_windows
    getWindow = get_window
    renderFrame = render_frame
    openWindows = open_windows
    syncFrame = sync_frame
    readyFlip = ready_flip
    flipFrame = flip_frame
    extractTextureData = extract_texture_data
    dispatchCompute = dispatch_compute
    getGlobalPtr = get_global_ptr
    getWindows = get_windows

class GraphicsThreadingModel:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, model: str = ...) -> None: ...
    @overload
    def __init__(self, copy: GraphicsThreadingModel) -> None: ...
    def assign(self, copy: GraphicsThreadingModel) -> GraphicsThreadingModel: ...
    def get_model(self) -> str: ...
    def get_cull_name(self) -> str: ...
    def set_cull_name(self, cull_name: str) -> None: ...
    def get_cull_stage(self) -> int: ...
    def get_draw_name(self) -> str: ...
    def set_draw_name(self, cull_name: str) -> None: ...
    def get_draw_stage(self) -> int: ...
    def get_cull_sorting(self) -> bool: ...
    def set_cull_sorting(self, cull_sorting: bool) -> None: ...
    def is_single_threaded(self) -> bool: ...
    def is_default(self) -> bool: ...
    def output(self, out: ostream) -> None: ...
    getModel = get_model
    getCullName = get_cull_name
    setCullName = set_cull_name
    getCullStage = get_cull_stage
    getDrawName = get_draw_name
    setDrawName = set_draw_name
    getDrawStage = get_draw_stage
    getCullSorting = get_cull_sorting
    setCullSorting = set_cull_sorting
    isSingleThreaded = is_single_threaded
    isDefault = is_default

class StereoDisplayRegion(DisplayRegion):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def left_eye(self) -> DisplayRegion: ...
    @property
    def right_eye(self) -> DisplayRegion: ...
    def get_left_eye(self) -> DisplayRegion: ...
    def get_right_eye(self) -> DisplayRegion: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getLeftEye = get_left_eye
    getRightEye = get_right_eye
    getClassType = get_class_type

class FrameBufferProperties:
    DtoolClassDict: ClassVar[dict[str, Any]]
    depth_bits: int
    color_bits: int
    red_bits: int
    green_bits: int
    blue_bits: int
    alpha_bits: int
    stencil_bits: int
    accum_bits: int
    aux_rgba: int
    aux_hrgba: int
    aux_float: int
    multisamples: int
    coverage_samples: int
    back_buffers: int
    indexed_color: bool
    rgb_color: bool
    stereo: bool
    force_hardware: bool
    force_software: bool
    srgb_color: bool
    float_color: bool
    float_depth: bool
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: FrameBufferProperties) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def get_depth_bits(self) -> int: ...
    def get_color_bits(self) -> int: ...
    def get_red_bits(self) -> int: ...
    def get_green_bits(self) -> int: ...
    def get_blue_bits(self) -> int: ...
    def get_alpha_bits(self) -> int: ...
    def get_stencil_bits(self) -> int: ...
    def get_accum_bits(self) -> int: ...
    def get_aux_rgba(self) -> int: ...
    def get_aux_hrgba(self) -> int: ...
    def get_aux_float(self) -> int: ...
    def get_multisamples(self) -> int: ...
    def get_coverage_samples(self) -> int: ...
    def get_back_buffers(self) -> int: ...
    def get_indexed_color(self) -> bool: ...
    def get_rgb_color(self) -> bool: ...
    def get_stereo(self) -> bool: ...
    def get_force_hardware(self) -> bool: ...
    def get_force_software(self) -> bool: ...
    def get_srgb_color(self) -> bool: ...
    def get_float_color(self) -> bool: ...
    def get_float_depth(self) -> bool: ...
    def set_depth_bits(self, n: int) -> None: ...
    def set_color_bits(self, n: int) -> None: ...
    def set_rgba_bits(self, r: int, g: int, b: int, a: int) -> None: ...
    def set_red_bits(self, n: int) -> None: ...
    def set_green_bits(self, n: int) -> None: ...
    def set_blue_bits(self, n: int) -> None: ...
    def set_alpha_bits(self, n: int) -> None: ...
    def set_stencil_bits(self, n: int) -> None: ...
    def set_accum_bits(self, n: int) -> None: ...
    def set_aux_rgba(self, n: int) -> None: ...
    def set_aux_hrgba(self, n: int) -> None: ...
    def set_aux_float(self, n: int) -> None: ...
    def set_multisamples(self, n: int) -> None: ...
    def set_coverage_samples(self, n: int) -> None: ...
    def set_back_buffers(self, n: int) -> None: ...
    def set_indexed_color(self, n: bool) -> None: ...
    def set_rgb_color(self, n: bool) -> None: ...
    def set_stereo(self, n: bool) -> None: ...
    def set_force_hardware(self, n: bool) -> None: ...
    def set_force_software(self, n: bool) -> None: ...
    def set_srgb_color(self, n: bool) -> None: ...
    def set_float_color(self, n: bool) -> None: ...
    def set_float_depth(self, n: bool) -> None: ...
    @staticmethod
    def get_default() -> FrameBufferProperties: ...
    def clear(self) -> None: ...
    def set_all_specified(self) -> None: ...
    def subsumes(self, other: FrameBufferProperties) -> bool: ...
    def add_properties(self, other: FrameBufferProperties) -> None: ...
    def output(self, out: ostream) -> None: ...
    def set_one_bit_per_channel(self) -> None: ...
    def is_stereo(self) -> bool: ...
    def is_single_buffered(self) -> bool: ...
    def get_quality(self, reqs: FrameBufferProperties) -> int: ...
    def is_any_specified(self) -> bool: ...
    def is_basic(self) -> bool: ...
    def get_aux_mask(self) -> int: ...
    def get_buffer_mask(self) -> int: ...
    def verify_hardware_software(self, props: FrameBufferProperties, renderer: str) -> bool: ...
    def setup_color_texture(self, tex: Texture) -> bool: ...
    def setup_depth_texture(self, tex: Texture) -> bool: ...
    getDepthBits = get_depth_bits
    getColorBits = get_color_bits
    getRedBits = get_red_bits
    getGreenBits = get_green_bits
    getBlueBits = get_blue_bits
    getAlphaBits = get_alpha_bits
    getStencilBits = get_stencil_bits
    getAccumBits = get_accum_bits
    getAuxRgba = get_aux_rgba
    getAuxHrgba = get_aux_hrgba
    getAuxFloat = get_aux_float
    getMultisamples = get_multisamples
    getCoverageSamples = get_coverage_samples
    getBackBuffers = get_back_buffers
    getIndexedColor = get_indexed_color
    getRgbColor = get_rgb_color
    getStereo = get_stereo
    getForceHardware = get_force_hardware
    getForceSoftware = get_force_software
    getSrgbColor = get_srgb_color
    getFloatColor = get_float_color
    getFloatDepth = get_float_depth
    setDepthBits = set_depth_bits
    setColorBits = set_color_bits
    setRgbaBits = set_rgba_bits
    setRedBits = set_red_bits
    setGreenBits = set_green_bits
    setBlueBits = set_blue_bits
    setAlphaBits = set_alpha_bits
    setStencilBits = set_stencil_bits
    setAccumBits = set_accum_bits
    setAuxRgba = set_aux_rgba
    setAuxHrgba = set_aux_hrgba
    setAuxFloat = set_aux_float
    setMultisamples = set_multisamples
    setCoverageSamples = set_coverage_samples
    setBackBuffers = set_back_buffers
    setIndexedColor = set_indexed_color
    setRgbColor = set_rgb_color
    setStereo = set_stereo
    setForceHardware = set_force_hardware
    setForceSoftware = set_force_software
    setSrgbColor = set_srgb_color
    setFloatColor = set_float_color
    setFloatDepth = set_float_depth
    getDefault = get_default
    setAllSpecified = set_all_specified
    addProperties = add_properties
    setOneBitPerChannel = set_one_bit_per_channel
    isStereo = is_stereo
    isSingleBuffered = is_single_buffered
    getQuality = get_quality
    isAnySpecified = is_any_specified
    isBasic = is_basic
    getAuxMask = get_aux_mask
    getBufferMask = get_buffer_mask
    verifyHardwareSoftware = verify_hardware_software
    setupColorTexture = setup_color_texture
    setupDepthTexture = setup_depth_texture

class GraphicsWindowInputDevice(InputDevice):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def button_down(self, button: ButtonHandle, time: float = ...) -> None: ...
    def button_resume_down(self, button: ButtonHandle, time: float = ...) -> None: ...
    def button_up(self, button: ButtonHandle, time: float = ...) -> None: ...
    def keystroke(self, keycode: int, time: float = ...) -> None: ...
    def candidate(self, candidate_string: str, highlight_start: int, highlight_end: int, cursor_pos: int) -> None: ...
    def focus_lost(self, time: float = ...) -> None: ...
    def raw_button_down(self, button: ButtonHandle, time: float = ...) -> None: ...
    def raw_button_up(self, button: ButtonHandle, time: float = ...) -> None: ...
    def get_pointer(self) -> PointerData: ...
    def set_pointer_in_window(self, x: float, y: float, time: float = ...) -> None: ...
    def set_pointer_out_of_window(self, time: float = ...) -> None: ...
    def update_pointer(self, data: PointerData, time: float = ...) -> None: ...
    def pointer_moved(self, x: float, y: float, time: float = ...) -> None: ...
    def remove_pointer(self, id: int) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    buttonDown = button_down
    buttonResumeDown = button_resume_down
    buttonUp = button_up
    focusLost = focus_lost
    rawButtonDown = raw_button_down
    rawButtonUp = raw_button_up
    getPointer = get_pointer
    setPointerInWindow = set_pointer_in_window
    setPointerOutOfWindow = set_pointer_out_of_window
    updatePointer = update_pointer
    pointerMoved = pointer_moved
    removePointer = remove_pointer
    getClassType = get_class_type

class TouchInfo:
    DtoolClassDict: ClassVar[dict[str, Any]]
    TIF_move: ClassVar[Literal[1]]
    TIF_down: ClassVar[Literal[2]]
    TIF_up: ClassVar[Literal[4]]
    def __init__(self, __param0: TouchInfo) -> None: ...
    def get_x(self) -> int: ...
    def get_y(self) -> int: ...
    def get_id(self) -> int: ...
    def get_flags(self) -> int: ...
    getX = get_x
    getY = get_y
    getId = get_id
    getFlags = get_flags
    TIFMove = TIF_move
    TIFDown = TIF_down
    TIFUp = TIF_up

class GraphicsWindowProcCallbackData(CallbackData):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_hwnd(self) -> int: ...
    def get_msg(self) -> int: ...
    def get_wparam(self) -> int: ...
    def get_lparam(self) -> int: ...
    def is_touch_event(self) -> bool: ...
    def get_num_touches(self) -> int: ...
    def get_touch_info(self, index: int) -> TouchInfo: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getHwnd = get_hwnd
    getMsg = get_msg
    getWparam = get_wparam
    getLparam = get_lparam
    isTouchEvent = is_touch_event
    getNumTouches = get_num_touches
    getTouchInfo = get_touch_info
    getClassType = get_class_type

class GraphicsWindow(GraphicsOutput):
    DtoolClassDict: ClassVar[dict[str, Any]]
    window_event: str
    close_request_event: str
    unexposed_draw: bool
    @property
    def properties(self) -> WindowProperties: ...
    @property
    def requested_properties(self) -> WindowProperties: ...
    @property
    def rejected_properties(self) -> WindowProperties: ...
    @property
    def closed(self) -> bool: ...
    @property
    def window_handle(self) -> WindowHandle: ...
    def get_properties(self) -> WindowProperties: ...
    def get_requested_properties(self) -> WindowProperties: ...
    def clear_rejected_properties(self) -> None: ...
    def get_rejected_properties(self) -> WindowProperties: ...
    def request_properties(self, requested_properties: WindowProperties) -> None: ...
    def is_closed(self) -> bool: ...
    def is_fullscreen(self) -> bool: ...
    def set_window_event(self, window_event: str) -> None: ...
    def get_window_event(self) -> str: ...
    def set_close_request_event(self, close_request_event: str) -> None: ...
    def get_close_request_event(self) -> str: ...
    def set_unexposed_draw(self, unexposed_draw: bool) -> None: ...
    def get_unexposed_draw(self) -> bool: ...
    def get_window_handle(self) -> WindowHandle: ...
    def get_num_input_devices(self) -> int: ...
    def get_input_device(self, i: int) -> InputDevice: ...
    def get_input_device_name(self, device: int) -> str: ...
    def has_pointer(self, device: int) -> bool: ...
    def has_keyboard(self, device: int) -> bool: ...
    def get_keyboard_map(self) -> ButtonMap: ...
    def enable_pointer_events(self, device: int) -> None: ...
    def disable_pointer_events(self, device: int) -> None: ...
    def get_pointer(self, device: int) -> PointerData: ...
    def move_pointer(self, device: int, x: int, y: int) -> bool: ...
    def close_ime(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_input_devices(self) -> tuple[InputDevice, ...]: ...
    def get_input_device_names(self) -> tuple[str, ...]: ...
    getProperties = get_properties
    getRequestedProperties = get_requested_properties
    clearRejectedProperties = clear_rejected_properties
    getRejectedProperties = get_rejected_properties
    requestProperties = request_properties
    isClosed = is_closed
    isFullscreen = is_fullscreen
    setWindowEvent = set_window_event
    getWindowEvent = get_window_event
    setCloseRequestEvent = set_close_request_event
    getCloseRequestEvent = get_close_request_event
    setUnexposedDraw = set_unexposed_draw
    getUnexposedDraw = get_unexposed_draw
    getWindowHandle = get_window_handle
    getNumInputDevices = get_num_input_devices
    getInputDevice = get_input_device
    getInputDeviceName = get_input_device_name
    hasPointer = has_pointer
    hasKeyboard = has_keyboard
    getKeyboardMap = get_keyboard_map
    enablePointerEvents = enable_pointer_events
    disablePointerEvents = disable_pointer_events
    getPointer = get_pointer
    movePointer = move_pointer
    closeIme = close_ime
    getClassType = get_class_type
    getInputDevices = get_input_devices
    getInputDeviceNames = get_input_device_names

class CallbackGraphicsWindow(GraphicsWindow):
    class WindowCallbackData(CallbackData):
        DtoolClassDict: ClassVar[dict[str, Any]]
        @property
        def window(self) -> CallbackGraphicsWindow: ...
        def get_window(self) -> CallbackGraphicsWindow: ...
        @staticmethod
        def get_class_type() -> TypeHandle: ...
        getWindow = get_window
        getClassType = get_class_type
    class EventsCallbackData(CallbackGraphicsWindow.WindowCallbackData):
        DtoolClassDict: ClassVar[dict[str, Any]]
        @staticmethod
        def get_class_type() -> TypeHandle: ...
        getClassType = get_class_type
    class PropertiesCallbackData(CallbackGraphicsWindow.WindowCallbackData):
        DtoolClassDict: ClassVar[dict[str, Any]]
        def get_properties(self) -> WindowProperties: ...
        @staticmethod
        def get_class_type() -> TypeHandle: ...
        getProperties = get_properties
        getClassType = get_class_type
    class RenderCallbackData(CallbackGraphicsWindow.WindowCallbackData):
        DtoolClassDict: ClassVar[dict[str, Any]]
        render_flag: bool
        @property
        def callback_type(self) -> _CallbackGraphicsWindow_RenderCallbackType: ...
        @property
        def frame_mode(self) -> _GraphicsOutput_FrameMode: ...
        def get_callback_type(self) -> _CallbackGraphicsWindow_RenderCallbackType: ...
        def get_frame_mode(self) -> _GraphicsOutput_FrameMode: ...
        def set_render_flag(self, render_flag: bool) -> None: ...
        def get_render_flag(self) -> bool: ...
        @staticmethod
        def get_class_type() -> TypeHandle: ...
        getCallbackType = get_callback_type
        getFrameMode = get_frame_mode
        setRenderFlag = set_render_flag
        getRenderFlag = get_render_flag
        getClassType = get_class_type
    DtoolClassDict: ClassVar[dict[str, Any]]
    RCT_begin_frame: ClassVar[Literal[0]]
    RCT_end_frame: ClassVar[Literal[1]]
    RCT_begin_flip: ClassVar[Literal[2]]
    RCT_end_flip: ClassVar[Literal[3]]
    def set_events_callback(self, object: CallbackObject) -> None: ...
    def clear_events_callback(self) -> None: ...
    def get_events_callback(self) -> CallbackObject: ...
    def set_properties_callback(self, object: CallbackObject) -> None: ...
    def clear_properties_callback(self) -> None: ...
    def get_properties_callback(self) -> CallbackObject: ...
    def set_render_callback(self, object: CallbackObject) -> None: ...
    def clear_render_callback(self) -> None: ...
    def get_render_callback(self) -> CallbackObject: ...
    def create_input_device(self, name: str) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setEventsCallback = set_events_callback
    clearEventsCallback = clear_events_callback
    getEventsCallback = get_events_callback
    setPropertiesCallback = set_properties_callback
    clearPropertiesCallback = clear_properties_callback
    getPropertiesCallback = get_properties_callback
    setRenderCallback = set_render_callback
    clearRenderCallback = clear_render_callback
    getRenderCallback = get_render_callback
    createInputDevice = create_input_device
    getClassType = get_class_type
    RCTBeginFrame = RCT_begin_frame
    RCTEndFrame = RCT_end_frame
    RCTBeginFlip = RCT_begin_flip
    RCTEndFlip = RCT_end_flip

class DisplayMode:
    DtoolClassDict: ClassVar[dict[str, Any]]
    width: int
    height: int
    bits_per_pixel: int
    refresh_rate: int
    fullscreen_only: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: DisplayMode) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def output(self, out: ostream) -> None: ...

class DisplayRegionCullCallbackData(CallbackData):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_scene_setup(self) -> SceneSetup: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getSceneSetup = get_scene_setup
    getClassType = get_class_type

class DisplayRegionDrawCallbackData(CallbackData):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_cull_result(self) -> CullResult: ...
    def get_scene_setup(self) -> SceneSetup: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getCullResult = get_cull_result
    getSceneSetup = get_scene_setup
    getClassType = get_class_type

class DisplaySearchParameters:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: DisplaySearchParameters) -> None: ...
    def set_minimum_width(self, minimum_width: int) -> None: ...
    def set_maximum_width(self, maximum_width: int) -> None: ...
    def set_minimum_height(self, minimum_height: int) -> None: ...
    def set_maximum_height(self, maximum_height: int) -> None: ...
    def set_minimum_bits_per_pixel(self, minimum_bits_per_pixel: int) -> None: ...
    def set_maximum_bits_per_pixel(self, maximum_bits_per_pixel: int) -> None: ...
    setMinimumWidth = set_minimum_width
    setMaximumWidth = set_maximum_width
    setMinimumHeight = set_minimum_height
    setMaximumHeight = set_maximum_height
    setMinimumBitsPerPixel = set_minimum_bits_per_pixel
    setMaximumBitsPerPixel = set_maximum_bits_per_pixel

class GraphicsBuffer(GraphicsOutput):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def set_size(self, x: int, y: int) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setSize = set_size
    getClassType = get_class_type

class GraphicsPipeSelection:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def pipe_types(self) -> Sequence[TypeHandle]: ...
    def get_num_pipe_types(self) -> int: ...
    def get_pipe_type(self, n: int) -> TypeHandle: ...
    def print_pipe_types(self) -> None: ...
    @overload
    def make_pipe(self, type: TypeHandle) -> GraphicsPipe: ...
    @overload
    def make_pipe(self, type_name: str, module_name: str = ...) -> GraphicsPipe: ...
    def make_module_pipe(self, module_name: str) -> GraphicsPipe: ...
    def make_default_pipe(self) -> GraphicsPipe: ...
    def get_num_aux_modules(self) -> int: ...
    def load_aux_modules(self) -> None: ...
    @staticmethod
    def get_global_ptr() -> GraphicsPipeSelection: ...
    def get_pipe_types(self) -> tuple[TypeHandle, ...]: ...
    getNumPipeTypes = get_num_pipe_types
    getPipeType = get_pipe_type
    printPipeTypes = print_pipe_types
    makePipe = make_pipe
    makeModulePipe = make_module_pipe
    makeDefaultPipe = make_default_pipe
    getNumAuxModules = get_num_aux_modules
    loadAuxModules = load_aux_modules
    getGlobalPtr = get_global_ptr
    getPipeTypes = get_pipe_types

class MouseAndKeyboard(DataNode):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, __param0: MouseAndKeyboard) -> None: ...
    @overload
    def __init__(self, window: GraphicsWindow, device: int, name: str) -> None: ...
    def set_source(self, window: GraphicsWindow, device: int) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setSource = set_source
    getClassType = get_class_type

@final
class NativeWindowHandle(WindowHandle):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @staticmethod
    def make_int(window: int) -> WindowHandle: ...
    @staticmethod
    def make_subprocess(filename: _Filename) -> WindowHandle: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    makeInt = make_int
    makeSubprocess = make_subprocess
    getClassType = get_class_type

class ParasiteBuffer(GraphicsOutput):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def set_size(self, x: int, y: int) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setSize = set_size
    getClassType = get_class_type
