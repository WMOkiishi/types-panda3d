from typing import Any, ClassVar, overload

class DataGraphTraverser:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, __param0: DataGraphTraverser) -> None: ...
    def get_current_thread(self) -> Thread: ...
    def traverse(self, node: PandaNode) -> None: ...
    def collect_leftovers(self) -> None: ...
    getCurrentThread = get_current_thread
    collectLeftovers = collect_leftovers

class DataNode(PandaNode):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, name: str) -> None: ...
    def write_inputs(self, out: ostream) -> None: ...
    def write_outputs(self, out: ostream) -> None: ...
    def write_connections(self, out: ostream) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    writeInputs = write_inputs
    writeOutputs = write_outputs
    writeConnections = write_connections
    getClassType = get_class_type
