from os import PathLike
from typing import Any, ClassVar, Literal, TypeAlias, overload

_Filename: TypeAlias = Filename | ConfigVariableFilename | str | bytes | PathLike
_TiXmlEncoding: TypeAlias = Literal[0, 1, 2]

class TiXmlBase:
    DtoolClassDict: ClassVar[dict[str, Any]]
    TIXML_NO_ERROR: ClassVar[Literal[0]]
    TIXML_ERROR: ClassVar[Literal[1]]
    TIXML_ERROR_OPENING_FILE: ClassVar[Literal[2]]
    TIXML_ERROR_PARSING_ELEMENT: ClassVar[Literal[3]]
    TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME: ClassVar[Literal[4]]
    TIXML_ERROR_READING_ELEMENT_VALUE: ClassVar[Literal[5]]
    TIXML_ERROR_READING_ATTRIBUTES: ClassVar[Literal[6]]
    TIXML_ERROR_PARSING_EMPTY: ClassVar[Literal[7]]
    TIXML_ERROR_READING_END_TAG: ClassVar[Literal[8]]
    TIXML_ERROR_PARSING_UNKNOWN: ClassVar[Literal[9]]
    TIXML_ERROR_PARSING_COMMENT: ClassVar[Literal[10]]
    TIXML_ERROR_PARSING_DECLARATION: ClassVar[Literal[11]]
    TIXML_ERROR_DOCUMENT_EMPTY: ClassVar[Literal[12]]
    TIXML_ERROR_EMBEDDED_NULL: ClassVar[Literal[13]]
    TIXML_ERROR_PARSING_CDATA: ClassVar[Literal[14]]
    TIXML_ERROR_DOCUMENT_TOP_ONLY: ClassVar[Literal[15]]
    TIXML_ERROR_STRING_COUNT: ClassVar[Literal[16]]
    @staticmethod
    def SetCondenseWhiteSpace(condense: bool) -> None: ...
    @staticmethod
    def IsWhiteSpaceCondensed() -> bool: ...
    def Row(self) -> int: ...
    def Column(self) -> int: ...

class TiXmlDeclaration(TiXmlNode):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: TiXmlDeclaration) -> None: ...
    @overload
    def __init__(self, _version: str, _encoding: str, _standalone: str) -> None: ...
    def assign(self, copy: TiXmlDeclaration) -> TiXmlDeclaration: ...
    def Version(self) -> str: ...
    def Encoding(self) -> str: ...
    def Standalone(self) -> str: ...

class TiXmlNode(TiXmlBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    TINYXML_DOCUMENT: ClassVar[Literal[0]]
    TINYXML_ELEMENT: ClassVar[Literal[1]]
    TINYXML_COMMENT: ClassVar[Literal[2]]
    TINYXML_UNKNOWN: ClassVar[Literal[3]]
    TINYXML_TEXT: ClassVar[Literal[4]]
    TINYXML_DECLARATION: ClassVar[Literal[5]]
    TINYXML_TYPECOUNT: ClassVar[Literal[6]]
    def Value(self) -> str: ...
    def ValueStr(self) -> str: ...
    def ValueTStr(self) -> str: ...
    def SetValue(self, _value: str) -> None: ...
    def Clear(self) -> None: ...
    def Parent(self) -> TiXmlNode: ...
    @overload
    def FirstChild(self) -> TiXmlNode: ...
    @overload
    def FirstChild(self, _value: str) -> TiXmlNode: ...
    @overload
    def FirstChild(self, value: str) -> TiXmlNode: ...
    @overload
    def LastChild(self) -> TiXmlNode: ...
    @overload
    def LastChild(self, _value: str) -> TiXmlNode: ...
    @overload
    def LastChild(self, value: str) -> TiXmlNode: ...
    @overload
    def IterateChildren(self, previous: TiXmlNode) -> TiXmlNode: ...
    @overload
    def IterateChildren(self, _value: str, previous: TiXmlNode) -> TiXmlNode: ...
    @overload
    def IterateChildren(self, value: str, previous: TiXmlNode) -> TiXmlNode: ...
    def InsertEndChild(self, addThis: TiXmlNode) -> TiXmlNode: ...
    def InsertBeforeChild(self, beforeThis: TiXmlNode, addThis: TiXmlNode) -> TiXmlNode: ...
    def InsertAfterChild(self, afterThis: TiXmlNode, addThis: TiXmlNode) -> TiXmlNode: ...
    def ReplaceChild(self, replaceThis: TiXmlNode, withThis: TiXmlNode) -> TiXmlNode: ...
    def RemoveChild(self, removeThis: TiXmlNode) -> bool: ...
    @overload
    def PreviousSibling(self) -> TiXmlNode: ...
    @overload
    def PreviousSibling(self, _prev: str) -> TiXmlNode: ...
    @overload
    def PreviousSibling(self, _value: str) -> TiXmlNode: ...
    @overload
    def NextSibling(self) -> TiXmlNode: ...
    @overload
    def NextSibling(self, _next: str) -> TiXmlNode: ...
    @overload
    def NextSibling(self, _value: str) -> TiXmlNode: ...
    @overload
    def NextSiblingElement(self) -> TiXmlElement: ...
    @overload
    def NextSiblingElement(self, _next: str) -> TiXmlElement: ...
    @overload
    def NextSiblingElement(self, _value: str) -> TiXmlElement: ...
    @overload
    def FirstChildElement(self) -> TiXmlElement: ...
    @overload
    def FirstChildElement(self, _value: str) -> TiXmlElement: ...
    def Type(self) -> int: ...
    def GetDocument(self) -> TiXmlDocument: ...
    def NoChildren(self) -> bool: ...
    def ToDocument(self) -> TiXmlDocument: ...
    def ToElement(self) -> TiXmlElement: ...
    def ToComment(self) -> TiXmlComment: ...
    def ToUnknown(self) -> TiXmlUnknown: ...
    def ToText(self) -> TiXmlText: ...
    def ToDeclaration(self) -> TiXmlDeclaration: ...
    def Clone(self) -> TiXmlNode: ...
    def Accept(self, visitor: TiXmlVisitor) -> bool: ...
    TINYXMLDOCUMENT = TINYXML_DOCUMENT
    TINYXMLELEMENT = TINYXML_ELEMENT
    TINYXMLCOMMENT = TINYXML_COMMENT
    TINYXMLUNKNOWN = TINYXML_UNKNOWN
    TINYXMLTEXT = TINYXML_TEXT
    TINYXMLDECLARATION = TINYXML_DECLARATION
    TINYXMLTYPECOUNT = TINYXML_TYPECOUNT

class TiXmlDocument(TiXmlNode):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, documentName: str) -> None: ...
    @overload
    def __init__(self, copy: TiXmlDocument) -> None: ...
    def assign(self, copy: TiXmlDocument) -> TiXmlDocument: ...
    @overload
    def LoadFile(self, encoding: _TiXmlEncoding = ...) -> bool: ...
    @overload
    def LoadFile(self, filename: str, encoding: _TiXmlEncoding = ...) -> bool: ...
    @overload
    def SaveFile(self) -> bool: ...
    @overload
    def SaveFile(self, filename: str) -> bool: ...
    def RootElement(self) -> TiXmlElement: ...
    def Error(self) -> bool: ...
    def ErrorDesc(self) -> str: ...
    def ErrorId(self) -> int: ...
    def ErrorRow(self) -> int: ...
    def ErrorCol(self) -> int: ...
    def SetTabSize(self, _tabsize: int) -> None: ...
    def TabSize(self) -> int: ...
    def ClearError(self) -> None: ...
    def Print(self) -> None: ...

class TiXmlElement(TiXmlNode):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, in_value: str) -> None: ...
    @overload
    def __init__(self, __param0: TiXmlElement) -> None: ...
    @overload
    def __init__(self, _value: str) -> None: ...
    def assign(self, base: TiXmlElement) -> TiXmlElement: ...
    def Attribute(self, name: str) -> str: ...
    @overload
    def SetAttribute(self, name: str, _value: int | str) -> None: ...
    @overload
    def SetAttribute(self, name: str, value: int) -> None: ...
    def SetDoubleAttribute(self, name: str, value: float) -> None: ...
    def RemoveAttribute(self, name: str) -> None: ...
    def FirstAttribute(self) -> TiXmlAttribute: ...
    def LastAttribute(self) -> TiXmlAttribute: ...
    def GetText(self) -> str: ...

class TiXmlCursor:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, __param0: TiXmlCursor) -> None: ...

class TiXmlVisitor:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: TiXmlVisitor) -> None: ...
    @overload
    def VisitEnter(self, __param0: TiXmlDocument) -> bool: ...
    @overload
    def VisitEnter(self, __param0: TiXmlElement, __param1: TiXmlAttribute) -> bool: ...
    def VisitExit(self, __param0: TiXmlDocument | TiXmlElement) -> bool: ...
    def Visit(self, __param0: TiXmlComment | TiXmlDeclaration | TiXmlText | TiXmlUnknown) -> bool: ...

class TiXmlAttribute(TiXmlBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _name: str, _value: str) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __lt__(self, rhs: TiXmlAttribute) -> bool: ...
    def __gt__(self, rhs: TiXmlAttribute) -> bool: ...
    def __le__(self, rhs: TiXmlAttribute) -> bool: ...
    def Name(self) -> str: ...
    def Value(self) -> str: ...
    def ValueStr(self) -> str: ...
    def IntValue(self) -> int: ...
    def DoubleValue(self) -> float: ...
    def NameTStr(self) -> str: ...
    def SetName(self, _name: str) -> None: ...
    def SetValue(self, _value: str) -> None: ...
    def SetIntValue(self, _value: int) -> None: ...
    def SetDoubleValue(self, _value: float) -> None: ...
    def Next(self) -> TiXmlAttribute: ...
    def Previous(self) -> TiXmlAttribute: ...
    def SetDocument(self, doc: TiXmlDocument) -> None: ...

class TiXmlAttributeSet:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    def Add(self, attribute: TiXmlAttribute) -> None: ...
    def Remove(self, attribute: TiXmlAttribute) -> None: ...
    def First(self) -> TiXmlAttribute: ...
    def Last(self) -> TiXmlAttribute: ...
    def Find(self, _name: str) -> TiXmlAttribute: ...
    def FindOrCreate(self, _name: str) -> TiXmlAttribute: ...

class TiXmlComment(TiXmlNode):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: TiXmlComment) -> None: ...
    @overload
    def __init__(self, _value: str) -> None: ...
    def assign(self, base: TiXmlComment) -> TiXmlComment: ...

class TiXmlText(TiXmlNode):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, initValue: str) -> None: ...
    @overload
    def __init__(self, copy: TiXmlText) -> None: ...
    def assign(self, base: TiXmlText) -> TiXmlText: ...
    def CDATA(self) -> bool: ...
    def SetCDATA(self, _cdata: bool) -> None: ...

class TiXmlUnknown(TiXmlNode):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: TiXmlUnknown) -> None: ...
    def assign(self, copy: TiXmlUnknown) -> TiXmlUnknown: ...

class TiXmlHandle:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, ref: TiXmlHandle) -> None: ...
    @overload
    def __init__(self, _node: TiXmlNode) -> None: ...
    def assign(self, ref: TiXmlHandle) -> TiXmlHandle: ...
    @overload
    def FirstChild(self) -> TiXmlHandle: ...
    @overload
    def FirstChild(self, value: str) -> TiXmlHandle: ...
    @overload
    def FirstChild(self, _value: str) -> TiXmlHandle: ...
    @overload
    def FirstChildElement(self) -> TiXmlHandle: ...
    @overload
    def FirstChildElement(self, value: str) -> TiXmlHandle: ...
    @overload
    def FirstChildElement(self, _value: str) -> TiXmlHandle: ...
    @overload
    def Child(self, index: int) -> TiXmlHandle: ...
    @overload
    def Child(self, value: str, index: int) -> TiXmlHandle: ...
    @overload
    def Child(self, _value: str, index: int) -> TiXmlHandle: ...
    @overload
    def ChildElement(self, index: int) -> TiXmlHandle: ...
    @overload
    def ChildElement(self, value: str, index: int) -> TiXmlHandle: ...
    @overload
    def ChildElement(self, _value: str, index: int) -> TiXmlHandle: ...
    def ToNode(self) -> TiXmlNode: ...
    def ToElement(self) -> TiXmlElement: ...
    def ToText(self) -> TiXmlText: ...
    def ToUnknown(self) -> TiXmlUnknown: ...
    def Node(self) -> TiXmlNode: ...
    def Element(self) -> TiXmlElement: ...
    def Text(self) -> TiXmlText: ...
    def Unknown(self) -> TiXmlUnknown: ...

class TiXmlPrinter(TiXmlVisitor):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: TiXmlPrinter) -> None: ...
    def SetIndent(self, _indent: str) -> None: ...
    def Indent(self) -> str: ...
    def SetLineBreak(self, _lineBreak: str) -> None: ...
    def LineBreak(self) -> str: ...
    def SetStreamPrinting(self) -> None: ...
    def CStr(self) -> str: ...
    def Size(self) -> int: ...
    def Str(self) -> str: ...

TIXML_ENCODING_UNKNOWN: Literal[0]
TIXML_ENCODING_UTF8: Literal[1]
TIXML_ENCODING_LEGACY: Literal[2]
def read_xml_stream(_in: istream) -> TiXmlDocument: ...
def write_xml_stream(out: ostream, doc: TiXmlDocument) -> None: ...
def print_xml(xnode: TiXmlNode) -> None: ...
def print_xml_to_file(filename: _Filename, xnode: TiXmlNode) -> None: ...
def get_TIXML_MAJOR_VERSION() -> int: ...
def get_TIXML_MINOR_VERSION() -> int: ...
def get_TIXML_PATCH_VERSION() -> int: ...
def get_TIXML_DEFAULT_ENCODING() -> _TiXmlEncoding: ...
readXmlStream = read_xml_stream
writeXmlStream = write_xml_stream
printXml = print_xml
printXmlToFile = print_xml_to_file
getTIXMLMAJORVERSION = get_TIXML_MAJOR_VERSION
getTIXMLMINORVERSION = get_TIXML_MINOR_VERSION
getTIXMLPATCHVERSION = get_TIXML_PATCH_VERSION
getTIXMLDEFAULTENCODING = get_TIXML_DEFAULT_ENCODING
TIXMLENCODINGUNKNOWN = TIXML_ENCODING_UNKNOWN
TIXMLENCODINGUTF8 = TIXML_ENCODING_UTF8
TIXMLENCODINGLEGACY = TIXML_ENCODING_LEGACY
