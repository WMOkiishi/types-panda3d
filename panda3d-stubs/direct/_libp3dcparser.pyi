from os import PathLike
from typing import Any, ClassVar, Literal, TypeAlias, overload
from panda3d.core import ConfigVariableFilename, Datagram, DatagramIterator, Filename, istream, ostream

_DCPackType: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
_DCSubatomicType: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
_Filename: TypeAlias = Filename | ConfigVariableFilename | str | bytes | PathLike

class DCPackerInterface:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_name(self) -> str: ...
    def find_seek_index(self, name: str) -> int: ...
    def as_field(self) -> DCField: ...
    def as_switch_parameter(self) -> DCSwitchParameter: ...
    def as_class_parameter(self) -> DCClassParameter: ...
    @overload
    def check_match(self, other: DCPackerInterface) -> bool: ...
    @overload
    def check_match(self, description: str, dcfile: DCFile = ...) -> bool: ...
    getName = get_name
    findSeekIndex = find_seek_index
    asField = as_field
    asSwitchParameter = as_switch_parameter
    asClassParameter = as_class_parameter
    checkMatch = check_match

class DCKeywordList:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def has_keyword(self, keyword: DCKeyword) -> bool: ...
    @overload
    def has_keyword(self, name: str) -> bool: ...
    def get_num_keywords(self) -> int: ...
    def get_keyword(self, n: int) -> DCKeyword: ...
    def get_keyword_by_name(self, name: str) -> DCKeyword: ...
    def compare_keywords(self, other: DCKeywordList) -> bool: ...
    hasKeyword = has_keyword
    getNumKeywords = get_num_keywords
    getKeyword = get_keyword
    getKeywordByName = get_keyword_by_name
    compareKeywords = compare_keywords

class DCField(DCPackerInterface, DCKeywordList):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def upcast_to_DCPackerInterface(self) -> DCPackerInterface: ...
    def upcast_to_DCKeywordList(self) -> DCKeywordList: ...
    def get_number(self) -> int: ...
    def get_class(self) -> DCClass: ...
    def as_field(self) -> DCField: ...
    def as_atomic_field(self) -> DCAtomicField: ...
    def as_molecular_field(self) -> DCMolecularField: ...
    def as_parameter(self) -> DCParameter: ...
    def format_data(self, packed_data: bytes, show_field_names: bool = ...) -> str: ...
    def parse_string(self, formatted_string: str) -> bytes: ...
    def validate_ranges(self, packed_data: bytes) -> bool: ...
    def has_default_value(self) -> bool: ...
    def get_default_value(self) -> bytes: ...
    def is_bogus_field(self) -> bool: ...
    def is_required(self) -> bool: ...
    def is_broadcast(self) -> bool: ...
    def is_ram(self) -> bool: ...
    def is_db(self) -> bool: ...
    def is_clsend(self) -> bool: ...
    def is_clrecv(self) -> bool: ...
    def is_ownsend(self) -> bool: ...
    def is_ownrecv(self) -> bool: ...
    def is_airecv(self) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def pack_args(self, packer: DCPacker, sequence: Any) -> bool: ...
    def unpack_args(self, packer: DCPacker) -> Any: ...
    def receive_update(self, packer: DCPacker, distobj: Any) -> None: ...
    def client_format_update(self, do_id: int, args: Any) -> Datagram: ...
    def ai_format_update(self, do_id: int, to_id: int, from_id: int, args: Any) -> Datagram: ...
    def ai_format_update_msg_type(self, do_id: int, to_id: int, from_id: int, msg_type: int, args: Any) -> Datagram: ...
    upcastToDCPackerInterface = upcast_to_DCPackerInterface
    upcastToDCKeywordList = upcast_to_DCKeywordList
    getNumber = get_number
    getClass = get_class
    asField = as_field
    asAtomicField = as_atomic_field
    asMolecularField = as_molecular_field
    asParameter = as_parameter
    formatData = format_data
    parseString = parse_string
    validateRanges = validate_ranges
    hasDefaultValue = has_default_value
    getDefaultValue = get_default_value
    isBogusField = is_bogus_field
    isRequired = is_required
    isBroadcast = is_broadcast
    isRam = is_ram
    isDb = is_db
    isClsend = is_clsend
    isClrecv = is_clrecv
    isOwnsend = is_ownsend
    isOwnrecv = is_ownrecv
    isAirecv = is_airecv
    packArgs = pack_args
    unpackArgs = unpack_args
    receiveUpdate = receive_update
    clientFormatUpdate = client_format_update
    aiFormatUpdate = ai_format_update
    aiFormatUpdateMsgType = ai_format_update_msg_type

class DCPackData:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: DCPackData) -> None: ...
    def clear(self) -> None: ...
    def get_string(self) -> str: ...
    def get_length(self) -> int: ...
    getString = get_string
    getLength = get_length

class DCPacker:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: DCPacker) -> None: ...
    def clear_data(self) -> None: ...
    def begin_pack(self, root: DCPackerInterface) -> None: ...
    def end_pack(self) -> bool: ...
    def set_unpack_data(self, data: bytes) -> None: ...
    def begin_unpack(self, root: DCPackerInterface) -> None: ...
    def end_unpack(self) -> bool: ...
    def begin_repack(self, root: DCPackerInterface) -> None: ...
    def end_repack(self) -> bool: ...
    @overload
    def seek(self, seek_index: int) -> bool: ...
    @overload
    def seek(self, field_name: str) -> bool: ...
    def has_nested_fields(self) -> bool: ...
    def get_num_nested_fields(self) -> int: ...
    def more_nested_fields(self) -> bool: ...
    def get_current_parent(self) -> DCPackerInterface: ...
    def get_current_field(self) -> DCPackerInterface: ...
    def get_last_switch(self) -> DCSwitchParameter: ...
    def get_pack_type(self) -> _DCPackType: ...
    def get_current_field_name(self) -> str: ...
    def push(self) -> None: ...
    def pop(self) -> None: ...
    def pack_double(self, value: float) -> None: ...
    def pack_int(self, value: int) -> None: ...
    def pack_uint(self, value: int) -> None: ...
    def pack_int64(self, value: int) -> None: ...
    def pack_uint64(self, value: int) -> None: ...
    def pack_string(self, value: str) -> None: ...
    def pack_blob(self, value: bytes) -> None: ...
    def pack_literal_value(self, value: bytes) -> None: ...
    def pack_default_value(self) -> None: ...
    def unpack_double(self) -> float: ...
    def unpack_int(self) -> int: ...
    def unpack_uint(self) -> int: ...
    def unpack_int64(self) -> int: ...
    def unpack_uint64(self) -> int: ...
    def unpack_string(self) -> str: ...
    def unpack_blob(self) -> bytes: ...
    def unpack_literal_value(self) -> bytes: ...
    def unpack_validate(self) -> None: ...
    def unpack_skip(self) -> None: ...
    def pack_object(self, object: Any) -> None: ...
    def unpack_object(self) -> Any: ...
    @overload
    def parse_and_pack(self, _in: istream) -> bool: ...
    @overload
    def parse_and_pack(self, formatted_object: str) -> bool: ...
    @overload
    def unpack_and_format(self, show_field_names: bool = ...) -> str: ...
    @overload
    def unpack_and_format(self, out: ostream, show_field_names: bool = ...) -> None: ...
    def had_parse_error(self) -> bool: ...
    def had_pack_error(self) -> bool: ...
    def had_range_error(self) -> bool: ...
    def had_error(self) -> bool: ...
    def get_num_unpacked_bytes(self) -> int: ...
    def get_length(self) -> int: ...
    def get_string(self) -> str: ...
    def get_bytes(self) -> bytes: ...
    def get_unpack_length(self) -> int: ...
    def get_unpack_string(self) -> str: ...
    @staticmethod
    def get_num_stack_elements_ever_allocated() -> int: ...
    def raw_pack_int8(self, value: int) -> None: ...
    def raw_pack_int16(self, value: int) -> None: ...
    def raw_pack_int32(self, value: int) -> None: ...
    def raw_pack_int64(self, value: int) -> None: ...
    def raw_pack_uint8(self, value: int) -> None: ...
    def raw_pack_uint16(self, value: int) -> None: ...
    def raw_pack_uint32(self, value: int) -> None: ...
    def raw_pack_uint64(self, value: int) -> None: ...
    def raw_pack_float64(self, value: float) -> None: ...
    def raw_pack_string(self, value: str) -> None: ...
    def raw_pack_blob(self, value: bytes) -> None: ...
    def raw_unpack_int8(self) -> int: ...
    def raw_unpack_int16(self) -> int: ...
    def raw_unpack_int32(self) -> int: ...
    def raw_unpack_int64(self) -> int: ...
    def raw_unpack_uint8(self) -> int: ...
    def raw_unpack_uint16(self) -> int: ...
    def raw_unpack_uint32(self) -> int: ...
    def raw_unpack_uint64(self) -> int: ...
    def raw_unpack_float64(self) -> float: ...
    def raw_unpack_string(self) -> str: ...
    def raw_unpack_blob(self) -> bytes: ...
    clearData = clear_data
    beginPack = begin_pack
    endPack = end_pack
    setUnpackData = set_unpack_data
    beginUnpack = begin_unpack
    endUnpack = end_unpack
    beginRepack = begin_repack
    endRepack = end_repack
    hasNestedFields = has_nested_fields
    getNumNestedFields = get_num_nested_fields
    moreNestedFields = more_nested_fields
    getCurrentParent = get_current_parent
    getCurrentField = get_current_field
    getLastSwitch = get_last_switch
    getPackType = get_pack_type
    getCurrentFieldName = get_current_field_name
    packDouble = pack_double
    packInt = pack_int
    packUint = pack_uint
    packInt64 = pack_int64
    packUint64 = pack_uint64
    packString = pack_string
    packBlob = pack_blob
    packLiteralValue = pack_literal_value
    packDefaultValue = pack_default_value
    unpackDouble = unpack_double
    unpackInt = unpack_int
    unpackUint = unpack_uint
    unpackInt64 = unpack_int64
    unpackUint64 = unpack_uint64
    unpackString = unpack_string
    unpackBlob = unpack_blob
    unpackLiteralValue = unpack_literal_value
    unpackValidate = unpack_validate
    unpackSkip = unpack_skip
    packObject = pack_object
    unpackObject = unpack_object
    parseAndPack = parse_and_pack
    unpackAndFormat = unpack_and_format
    hadParseError = had_parse_error
    hadPackError = had_pack_error
    hadRangeError = had_range_error
    hadError = had_error
    getNumUnpackedBytes = get_num_unpacked_bytes
    getLength = get_length
    getString = get_string
    getBytes = get_bytes
    getUnpackLength = get_unpack_length
    getUnpackString = get_unpack_string
    getNumStackElementsEverAllocated = get_num_stack_elements_ever_allocated
    rawPackInt8 = raw_pack_int8
    rawPackInt16 = raw_pack_int16
    rawPackInt32 = raw_pack_int32
    rawPackInt64 = raw_pack_int64
    rawPackUint8 = raw_pack_uint8
    rawPackUint16 = raw_pack_uint16
    rawPackUint32 = raw_pack_uint32
    rawPackUint64 = raw_pack_uint64
    rawPackFloat64 = raw_pack_float64
    rawPackString = raw_pack_string
    rawPackBlob = raw_pack_blob
    rawUnpackInt8 = raw_unpack_int8
    rawUnpackInt16 = raw_unpack_int16
    rawUnpackInt32 = raw_unpack_int32
    rawUnpackInt64 = raw_unpack_int64
    rawUnpackUint8 = raw_unpack_uint8
    rawUnpackUint16 = raw_unpack_uint16
    rawUnpackUint32 = raw_unpack_uint32
    rawUnpackUint64 = raw_unpack_uint64
    rawUnpackFloat64 = raw_unpack_float64
    rawUnpackString = raw_unpack_string
    rawUnpackBlob = raw_unpack_blob

class DCParameter(DCField):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def as_simple_parameter(self) -> DCSimpleParameter: ...
    def as_array_parameter(self) -> DCArrayParameter: ...
    def make_copy(self) -> DCParameter: ...
    def is_valid(self) -> bool: ...
    def get_typedef(self) -> DCTypedef: ...
    asSimpleParameter = as_simple_parameter
    asArrayParameter = as_array_parameter
    makeCopy = make_copy
    isValid = is_valid
    getTypedef = get_typedef

class DCArrayParameter(DCParameter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_element_type(self) -> DCParameter: ...
    def get_array_size(self) -> int: ...
    getElementType = get_element_type
    getArraySize = get_array_size

class DCAtomicField(DCField):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_num_elements(self) -> int: ...
    def get_element(self, n: int) -> DCParameter: ...
    def get_element_default(self, n: int) -> bytes: ...
    def has_element_default(self, n: int) -> bool: ...
    def get_element_name(self, n: int) -> str: ...
    def get_element_type(self, n: int) -> _DCSubatomicType: ...
    def get_element_divisor(self, n: int) -> int: ...
    getNumElements = get_num_elements
    getElement = get_element
    getElementDefault = get_element_default
    hasElementDefault = has_element_default
    getElementName = get_element_name
    getElementType = get_element_type
    getElementDivisor = get_element_divisor

class DCDeclaration:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def as_class(self) -> DCClass: ...
    def as_switch(self) -> DCSwitch: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    asClass = as_class
    asSwitch = as_switch

class DCClass(DCDeclaration):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_dc_file(self) -> DCFile: ...
    def get_name(self) -> str: ...
    def get_number(self) -> int: ...
    def get_num_parents(self) -> int: ...
    def get_parent(self, n: int) -> DCClass: ...
    def has_constructor(self) -> bool: ...
    def get_constructor(self) -> DCField: ...
    def get_num_fields(self) -> int: ...
    def get_field(self, n: int) -> DCField: ...
    def get_field_by_name(self, name: str) -> DCField: ...
    def get_field_by_index(self, index_number: int) -> DCField: ...
    def get_num_inherited_fields(self) -> int: ...
    def get_inherited_field(self, n: int) -> DCField: ...
    def is_struct(self) -> bool: ...
    def is_bogus_class(self) -> bool: ...
    def inherits_from_bogus_class(self) -> bool: ...
    def start_generate(self) -> None: ...
    def stop_generate(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    def has_class_def(self) -> bool: ...
    def set_class_def(self, class_def: Any) -> None: ...
    def get_class_def(self) -> Any: ...
    def has_owner_class_def(self) -> bool: ...
    def set_owner_class_def(self, owner_class_def: Any) -> None: ...
    def get_owner_class_def(self) -> Any: ...
    def receive_update(self, distobj: Any, di: DatagramIterator) -> None: ...
    def receive_update_broadcast_required(self, distobj: Any, di: DatagramIterator) -> None: ...
    def receive_update_broadcast_required_owner(self, distobj: Any, di: DatagramIterator) -> None: ...
    def receive_update_all_required(self, distobj: Any, di: DatagramIterator) -> None: ...
    def receive_update_other(self, distobj: Any, di: DatagramIterator) -> None: ...
    @overload
    def direct_update(self, distobj: Any, field_name: str, datagram: Datagram) -> None: ...
    @overload
    def direct_update(self, distobj: Any, field_name: str, value_blob: bytes) -> None: ...
    @overload
    def pack_required_field(self, packer: DCPacker, distobj: Any, field: DCField) -> bool: ...
    @overload
    def pack_required_field(self, datagram: Datagram, distobj: Any, field: DCField) -> bool: ...
    def client_format_update(self, field_name: str, do_id: int, args: Any) -> Datagram: ...
    def ai_format_update(self, field_name: str, do_id: int, to_id: int, from_id: int, args: Any) -> Datagram: ...
    def ai_format_update_msg_type(self, field_name: str, do_id: int, to_id: int, from_id: int, msg_type: int, args: Any) -> Datagram: ...
    def ai_format_generate(self, distobj: Any, do_id: int, parent_id: int, zone_id: int, district_channel_id: int, from_channel_id: int, optional_fields: Any) -> Datagram: ...
    def client_format_generate_CMU(self, distobj: Any, do_id: int, zone_id: int, optional_fields: Any) -> Datagram: ...
    getDcFile = get_dc_file
    getName = get_name
    getNumber = get_number
    getNumParents = get_num_parents
    getParent = get_parent
    hasConstructor = has_constructor
    getConstructor = get_constructor
    getNumFields = get_num_fields
    getField = get_field
    getFieldByName = get_field_by_name
    getFieldByIndex = get_field_by_index
    getNumInheritedFields = get_num_inherited_fields
    getInheritedField = get_inherited_field
    isStruct = is_struct
    isBogusClass = is_bogus_class
    inheritsFromBogusClass = inherits_from_bogus_class
    startGenerate = start_generate
    stopGenerate = stop_generate
    hasClassDef = has_class_def
    setClassDef = set_class_def
    getClassDef = get_class_def
    hasOwnerClassDef = has_owner_class_def
    setOwnerClassDef = set_owner_class_def
    getOwnerClassDef = get_owner_class_def
    receiveUpdate = receive_update
    receiveUpdateBroadcastRequired = receive_update_broadcast_required
    receiveUpdateBroadcastRequiredOwner = receive_update_broadcast_required_owner
    receiveUpdateAllRequired = receive_update_all_required
    receiveUpdateOther = receive_update_other
    directUpdate = direct_update
    packRequiredField = pack_required_field
    clientFormatUpdate = client_format_update
    aiFormatUpdate = ai_format_update
    aiFormatUpdateMsgType = ai_format_update_msg_type
    aiFormatGenerate = ai_format_generate
    clientFormatGenerateCMU = client_format_generate_CMU

class DCClassParameter(DCParameter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_class(self) -> DCClass: ...
    getClass = get_class

class DCFile:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: DCFile) -> None: ...
    def clear(self) -> None: ...
    def read_all(self) -> bool: ...
    @overload
    def read(self, filename: _Filename) -> bool: ...
    @overload
    def read(self, _in: istream, filename: str = ...) -> bool: ...
    @overload
    def write(self, filename: _Filename, brief: bool) -> bool: ...
    @overload
    def write(self, out: ostream, brief: bool) -> bool: ...
    def get_num_classes(self) -> int: ...
    def get_class(self, n: int) -> DCClass: ...
    def get_class_by_name(self, name: str) -> DCClass: ...
    def get_switch_by_name(self, name: str) -> DCSwitch: ...
    def get_field_by_index(self, index_number: int) -> DCField: ...
    def all_objects_valid(self) -> bool: ...
    def get_num_import_modules(self) -> int: ...
    def get_import_module(self, n: int) -> str: ...
    def get_num_import_symbols(self, n: int) -> int: ...
    def get_import_symbol(self, n: int, i: int) -> str: ...
    def get_num_typedefs(self) -> int: ...
    def get_typedef(self, n: int) -> DCTypedef: ...
    def get_typedef_by_name(self, name: str) -> DCTypedef: ...
    def get_num_keywords(self) -> int: ...
    def get_keyword(self, n: int) -> DCKeyword: ...
    def get_keyword_by_name(self, name: str) -> DCKeyword: ...
    def get_hash(self) -> int: ...
    readAll = read_all
    getNumClasses = get_num_classes
    getClass = get_class
    getClassByName = get_class_by_name
    getSwitchByName = get_switch_by_name
    getFieldByIndex = get_field_by_index
    allObjectsValid = all_objects_valid
    getNumImportModules = get_num_import_modules
    getImportModule = get_import_module
    getNumImportSymbols = get_num_import_symbols
    getImportSymbol = get_import_symbol
    getNumTypedefs = get_num_typedefs
    getTypedef = get_typedef
    getTypedefByName = get_typedef_by_name
    getNumKeywords = get_num_keywords
    getKeyword = get_keyword
    getKeywordByName = get_keyword_by_name
    getHash = get_hash

class DCKeyword(DCDeclaration):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_name(self) -> str: ...
    getName = get_name

class DCMolecularField(DCField):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_num_atomics(self) -> int: ...
    def get_atomic(self, n: int) -> DCAtomicField: ...
    getNumAtomics = get_num_atomics
    getAtomic = get_atomic

class DCSimpleParameter(DCParameter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_type(self) -> _DCSubatomicType: ...
    def has_modulus(self) -> bool: ...
    def get_modulus(self) -> float: ...
    def get_divisor(self) -> int: ...
    getType = get_type
    hasModulus = has_modulus
    getModulus = get_modulus
    getDivisor = get_divisor

class DCSwitch(DCDeclaration):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_name(self) -> str: ...
    def get_key_parameter(self) -> DCField: ...
    def get_num_cases(self) -> int: ...
    def get_case_by_value(self, case_value: bytes) -> int: ...
    def get_case(self, n: int) -> DCPackerInterface: ...
    def get_default_case(self) -> DCPackerInterface: ...
    def get_value(self, case_index: int) -> bytes: ...
    def get_num_fields(self, case_index: int) -> int: ...
    def get_field(self, case_index: int, n: int) -> DCField: ...
    def get_field_by_name(self, case_index: int, name: str) -> DCField: ...
    getName = get_name
    getKeyParameter = get_key_parameter
    getNumCases = get_num_cases
    getCaseByValue = get_case_by_value
    getCase = get_case
    getDefaultCase = get_default_case
    getValue = get_value
    getNumFields = get_num_fields
    getField = get_field
    getFieldByName = get_field_by_name

class DCSwitchParameter(DCParameter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_switch(self) -> DCSwitch: ...
    getSwitch = get_switch

class DCTypedef(DCDeclaration):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_number(self) -> int: ...
    def get_name(self) -> str: ...
    def get_description(self) -> str: ...
    def is_bogus_typedef(self) -> bool: ...
    def is_implicit_typedef(self) -> bool: ...
    getNumber = get_number
    getName = get_name
    getDescription = get_description
    isBogusTypedef = is_bogus_typedef
    isImplicitTypedef = is_implicit_typedef

ST_int8: Literal[0]
ST_int16: Literal[1]
ST_int32: Literal[2]
ST_int64: Literal[3]
ST_uint8: Literal[4]
ST_uint16: Literal[5]
ST_uint32: Literal[6]
ST_uint64: Literal[7]
ST_float64: Literal[8]
ST_string: Literal[9]
ST_blob: Literal[10]
ST_blob32: Literal[11]
ST_int16array: Literal[12]
ST_int32array: Literal[13]
ST_uint16array: Literal[14]
ST_uint32array: Literal[15]
ST_int8array: Literal[16]
ST_uint8array: Literal[17]
ST_uint32uint8array: Literal[18]
ST_char: Literal[19]
ST_invalid: Literal[20]
PT_invalid: Literal[0]
PT_double: Literal[1]
PT_int: Literal[2]
PT_uint: Literal[3]
PT_int64: Literal[4]
PT_uint64: Literal[5]
PT_string: Literal[6]
PT_blob: Literal[7]
PT_array: Literal[8]
PT_field: Literal[9]
PT_class: Literal[10]
PT_switch: Literal[11]
STInt8 = ST_int8
STInt16 = ST_int16
STInt32 = ST_int32
STInt64 = ST_int64
STUint8 = ST_uint8
STUint16 = ST_uint16
STUint32 = ST_uint32
STUint64 = ST_uint64
STFloat64 = ST_float64
STString = ST_string
STBlob = ST_blob
STBlob32 = ST_blob32
STInt16array = ST_int16array
STInt32array = ST_int32array
STUint16array = ST_uint16array
STUint32array = ST_uint32array
STInt8array = ST_int8array
STUint8array = ST_uint8array
STUint32uint8array = ST_uint32uint8array
STChar = ST_char
STInvalid = ST_invalid
PTInvalid = PT_invalid
PTDouble = PT_double
PTInt = PT_int
PTUint = PT_uint
PTInt64 = PT_int64
PTUint64 = PT_uint64
PTString = PT_string
PTBlob = PT_blob
PTArray = PT_array
PTField = PT_field
PTClass = PT_class
PTSwitch = PT_switch
