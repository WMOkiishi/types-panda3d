from typing import Any, ClassVar, TypeAlias, overload
from panda3d.core import (
    ConfigVariableColor,
    DisplayRegion,
    GeomNode,
    GraphicsEngine,
    GraphicsOutput,
    LMatrix4f,
    LVecBase4f,
    Lens,
    NodePath,
    PandaNode,
    PfmFile,
    TypeHandle,
    UnalignedLVecBase4f,
    UpdateSeq,
)

_Vec4f: TypeAlias = LVecBase4f | UnalignedLVecBase4f | LMatrix4f.Row | LMatrix4f.CRow | ConfigVariableColor

class CylindricalLens(Lens):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class FisheyeLens(Lens):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class ProjectionScreen(PandaNode):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, name: str = ...) -> None: ...
    def set_projector(self, projector: NodePath) -> None: ...
    def get_projector(self) -> NodePath: ...
    def clear_undist_lut(self) -> None: ...
    def set_undist_lut(self, undist_lut: PfmFile) -> None: ...
    def has_undist_lut(self) -> bool: ...
    def get_undist_lut(self) -> PfmFile: ...
    def generate_screen(self, projector: NodePath, screen_name: str, num_x_verts: int, num_y_verts: int, distance: float, fill_ratio: float) -> GeomNode: ...
    def regenerate_screen(self, projector: NodePath, screen_name: str, num_x_verts: int, num_y_verts: int, distance: float, fill_ratio: float) -> None: ...
    def make_flat_mesh(self, this_np: NodePath, camera: NodePath) -> PandaNode: ...
    def set_texcoord_name(self, texcoord_name: str) -> None: ...
    def get_texcoord_name(self) -> str: ...
    def set_invert_uvs(self, invert_uvs: bool) -> None: ...
    def get_invert_uvs(self) -> bool: ...
    def set_texcoord_3d(self, texcoord_3d: bool) -> None: ...
    def get_texcoord_3d(self) -> bool: ...
    def set_vignette_on(self, vignette_on: bool) -> None: ...
    def get_vignette_on(self) -> bool: ...
    def set_vignette_color(self, vignette_color: _Vec4f) -> None: ...
    def get_vignette_color(self) -> LVecBase4f: ...
    def set_frame_color(self, frame_color: _Vec4f) -> None: ...
    def get_frame_color(self) -> LVecBase4f: ...
    def set_auto_recompute(self, auto_recompute: bool) -> None: ...
    def get_auto_recompute(self) -> bool: ...
    def recompute(self) -> None: ...
    def get_last_screen(self) -> UpdateSeq: ...
    @overload
    def recompute_if_stale(self) -> bool: ...
    @overload
    def recompute_if_stale(self, this_np: NodePath) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setProjector = set_projector
    getProjector = get_projector
    clearUndistLut = clear_undist_lut
    setUndistLut = set_undist_lut
    hasUndistLut = has_undist_lut
    getUndistLut = get_undist_lut
    generateScreen = generate_screen
    regenerateScreen = regenerate_screen
    makeFlatMesh = make_flat_mesh
    setTexcoordName = set_texcoord_name
    getTexcoordName = get_texcoord_name
    setInvertUvs = set_invert_uvs
    getInvertUvs = get_invert_uvs
    setTexcoord3d = set_texcoord_3d
    getTexcoord3d = get_texcoord_3d
    setVignetteOn = set_vignette_on
    getVignetteOn = get_vignette_on
    setVignetteColor = set_vignette_color
    getVignetteColor = get_vignette_color
    setFrameColor = set_frame_color
    getFrameColor = get_frame_color
    setAutoRecompute = set_auto_recompute
    getAutoRecompute = get_auto_recompute
    getLastScreen = get_last_screen
    recomputeIfStale = recompute_if_stale
    getClassType = get_class_type

class NonlinearImager:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: NonlinearImager) -> None: ...
    @overload
    def add_screen(self, screen: ProjectionScreen) -> int: ...
    @overload
    def add_screen(self, screen: NodePath, name: str) -> int: ...
    def find_screen(self, screen: NodePath) -> int: ...
    def remove_screen(self, index: int) -> None: ...
    def remove_all_screens(self) -> None: ...
    def get_num_screens(self) -> int: ...
    def get_screen(self, index: int) -> NodePath: ...
    def get_buffer(self, index: int) -> GraphicsOutput: ...
    def set_texture_size(self, index: int, width: int, height: int) -> None: ...
    def set_source_camera(self, index: int, source_camera: NodePath) -> None: ...
    def set_screen_active(self, index: int, active: bool) -> None: ...
    def get_screen_active(self, index: int) -> bool: ...
    def add_viewer(self, dr: DisplayRegion) -> int: ...
    def find_viewer(self, dr: DisplayRegion) -> int: ...
    def remove_viewer(self, index: int) -> None: ...
    def remove_all_viewers(self) -> None: ...
    def set_viewer_camera(self, index: int, viewer_camera: NodePath) -> None: ...
    def get_viewer_camera(self, index: int) -> NodePath: ...
    def get_viewer_scene(self, index: int) -> NodePath: ...
    def get_num_viewers(self) -> int: ...
    def get_viewer(self, index: int) -> DisplayRegion: ...
    def get_dark_room(self) -> NodePath: ...
    def get_graphics_engine(self) -> GraphicsEngine: ...
    def recompute(self) -> None: ...
    def get_screens(self) -> tuple[NodePath, ...]: ...
    def get_buffers(self) -> tuple[GraphicsOutput, ...]: ...
    def get_viewers(self) -> tuple[DisplayRegion, ...]: ...
    addScreen = add_screen
    findScreen = find_screen
    removeScreen = remove_screen
    removeAllScreens = remove_all_screens
    getNumScreens = get_num_screens
    getScreen = get_screen
    getBuffer = get_buffer
    setTextureSize = set_texture_size
    setSourceCamera = set_source_camera
    setScreenActive = set_screen_active
    getScreenActive = get_screen_active
    addViewer = add_viewer
    findViewer = find_viewer
    removeViewer = remove_viewer
    removeAllViewers = remove_all_viewers
    setViewerCamera = set_viewer_camera
    getViewerCamera = get_viewer_camera
    getViewerScene = get_viewer_scene
    getNumViewers = get_num_viewers
    getViewer = get_viewer
    getDarkRoom = get_dark_room
    getGraphicsEngine = get_graphics_engine
    getScreens = get_screens
    getBuffers = get_buffers
    getViewers = get_viewers

class OSphereLens(Lens):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class PSphereLens(Lens):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type
