from typing import Any, ClassVar, Literal, TypeAlias, overload
from panda3d.core import (
    ConfigVariableColor,
    GeomNode,
    LMatrix3f,
    LMatrix4f,
    LPoint2f,
    LPoint3f,
    LVecBase2f,
    LVecBase3f,
    LVecBase4f,
    LVector3f,
    NodePath,
    PandaNode,
    ReferenceCount,
    Texture,
    TypeHandle,
    TypedReferenceCount,
    UnalignedLVecBase4f,
    ostream,
)

_Vec3f: TypeAlias = LVecBase3f | LMatrix3f.Row | LMatrix3f.CRow
_BaseParticleEmitter_emissionType: TypeAlias = Literal[0, 1, 2]
_BaseParticleRenderer_ParticleRendererAlphaMode: TypeAlias = Literal[0, 1, 2, 3, 4, 5]
_ColorBlendAttrib_Mode: TypeAlias = Literal[0, 1, 2, 3, 4, 5]
_ColorBlendAttrib_Operand: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
_Vec4f: TypeAlias = LVecBase4f | UnalignedLVecBase4f | LMatrix4f.Row | LMatrix4f.CRow | ConfigVariableColor
_PointParticleRenderer_PointParticleBlendType: TypeAlias = Literal[0, 1, 2]
_BaseParticleRenderer_ParticleRendererBlendMethod: TypeAlias = Literal[0, 1, 2]
_SparkleParticleRenderer_SparkleParticleLifeScale: TypeAlias = Literal[0, 1]
_SpriteAnim_SourceType: TypeAlias = Literal[0, 1]

class BaseParticleEmitter(ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    ET_EXPLICIT: ClassVar[Literal[0]]
    ET_RADIATE: ClassVar[Literal[1]]
    ET_CUSTOM: ClassVar[Literal[2]]
    def make_copy(self) -> BaseParticleEmitter: ...
    def generate(self, pos: _Vec3f, vel: _Vec3f) -> None: ...
    def set_emission_type(self, et: _BaseParticleEmitter_emissionType) -> None: ...
    def set_amplitude(self, a: float) -> None: ...
    def set_amplitude_spread(self, _as: float) -> None: ...
    def set_offset_force(self, of: _Vec3f) -> None: ...
    def set_explicit_launch_vector(self, elv: _Vec3f) -> None: ...
    def set_radiate_origin(self, ro: _Vec3f) -> None: ...
    def get_emission_type(self) -> _BaseParticleEmitter_emissionType: ...
    def get_amplitude(self) -> float: ...
    def get_amplitude_spread(self) -> float: ...
    def get_offset_force(self) -> LVector3f: ...
    def get_explicit_launch_vector(self) -> LVector3f: ...
    def get_radiate_origin(self) -> LPoint3f: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent: int = ...) -> None: ...
    makeCopy = make_copy
    setEmissionType = set_emission_type
    setAmplitude = set_amplitude
    setAmplitudeSpread = set_amplitude_spread
    setOffsetForce = set_offset_force
    setExplicitLaunchVector = set_explicit_launch_vector
    setRadiateOrigin = set_radiate_origin
    getEmissionType = get_emission_type
    getAmplitude = get_amplitude
    getAmplitudeSpread = get_amplitude_spread
    getOffsetForce = get_offset_force
    getExplicitLaunchVector = get_explicit_launch_vector
    getRadiateOrigin = get_radiate_origin
    ETEXPLICIT = ET_EXPLICIT
    ETRADIATE = ET_RADIATE
    ETCUSTOM = ET_CUSTOM

class RingEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: RingEmitter) -> None: ...
    def set_radius(self, r: float) -> None: ...
    def set_angle(self, angle: float) -> None: ...
    def set_radius_spread(self, spread: float) -> None: ...
    def set_uniform_emission(self, uniform_emission: int) -> None: ...
    def get_radius(self) -> float: ...
    def get_angle(self) -> float: ...
    def get_radius_spread(self) -> float: ...
    def get_uniform_emission(self) -> int: ...
    setRadius = set_radius
    setAngle = set_angle
    setRadiusSpread = set_radius_spread
    setUniformEmission = set_uniform_emission
    getRadius = get_radius
    getAngle = get_angle
    getRadiusSpread = get_radius_spread
    getUniformEmission = get_uniform_emission

class ArcEmitter(RingEmitter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: ArcEmitter) -> None: ...
    def set_start_angle(self, angle: float) -> None: ...
    def set_end_angle(self, angle: float) -> None: ...
    def set_arc(self, startAngle: float, endAngle: float) -> None: ...
    def get_start_angle(self) -> float: ...
    def get_end_angle(self) -> float: ...
    setStartAngle = set_start_angle
    setEndAngle = set_end_angle
    setArc = set_arc
    getStartAngle = get_start_angle
    getEndAngle = get_end_angle

class BaseParticleFactory(ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def set_lifespan_base(self, lb: float) -> None: ...
    def set_lifespan_spread(self, ls: float) -> None: ...
    def set_mass_base(self, mb: float) -> None: ...
    def set_mass_spread(self, ms: float) -> None: ...
    def set_terminal_velocity_base(self, tvb: float) -> None: ...
    def set_terminal_velocity_spread(self, tvs: float) -> None: ...
    def get_lifespan_base(self) -> float: ...
    def get_lifespan_spread(self) -> float: ...
    def get_mass_base(self) -> float: ...
    def get_mass_spread(self) -> float: ...
    def get_terminal_velocity_base(self) -> float: ...
    def get_terminal_velocity_spread(self) -> float: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent: int = ...) -> None: ...
    setLifespanBase = set_lifespan_base
    setLifespanSpread = set_lifespan_spread
    setMassBase = set_mass_base
    setMassSpread = set_mass_spread
    setTerminalVelocityBase = set_terminal_velocity_base
    setTerminalVelocitySpread = set_terminal_velocity_spread
    getLifespanBase = get_lifespan_base
    getLifespanSpread = get_lifespan_spread
    getMassBase = get_mass_base
    getMassSpread = get_mass_spread
    getTerminalVelocityBase = get_terminal_velocity_base
    getTerminalVelocitySpread = get_terminal_velocity_spread

class BaseParticleRenderer(ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    PR_ALPHA_NONE: ClassVar[Literal[0]]
    PR_ALPHA_OUT: ClassVar[Literal[1]]
    PR_ALPHA_IN: ClassVar[Literal[2]]
    PR_ALPHA_IN_OUT: ClassVar[Literal[3]]
    PR_ALPHA_USER: ClassVar[Literal[4]]
    PR_NOT_INITIALIZED_YET: ClassVar[Literal[5]]
    PP_NO_BLEND: ClassVar[Literal[0]]
    PP_BLEND_LINEAR: ClassVar[Literal[1]]
    PP_BLEND_CUBIC: ClassVar[Literal[2]]
    def get_render_node(self) -> GeomNode: ...
    def get_render_node_path(self) -> NodePath: ...
    def set_alpha_mode(self, am: _BaseParticleRenderer_ParticleRendererAlphaMode) -> None: ...
    def get_alpha_mode(self) -> _BaseParticleRenderer_ParticleRendererAlphaMode: ...
    def set_user_alpha(self, ua: float) -> None: ...
    def get_user_alpha(self) -> float: ...
    def set_color_blend_mode(self, bm: _ColorBlendAttrib_Mode, oa: _ColorBlendAttrib_Operand = ..., ob: _ColorBlendAttrib_Operand = ...) -> None: ...
    def set_ignore_scale(self, ignore_scale: bool) -> None: ...
    def get_ignore_scale(self) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent: int = ...) -> None: ...
    getRenderNode = get_render_node
    getRenderNodePath = get_render_node_path
    setAlphaMode = set_alpha_mode
    getAlphaMode = get_alpha_mode
    setUserAlpha = set_user_alpha
    getUserAlpha = get_user_alpha
    setColorBlendMode = set_color_blend_mode
    setIgnoreScale = set_ignore_scale
    getIgnoreScale = get_ignore_scale
    PRALPHANONE = PR_ALPHA_NONE
    PRALPHAOUT = PR_ALPHA_OUT
    PRALPHAIN = PR_ALPHA_IN
    PRALPHAINOUT = PR_ALPHA_IN_OUT
    PRALPHAUSER = PR_ALPHA_USER
    PRNOTINITIALIZEDYET = PR_NOT_INITIALIZED_YET
    PPNOBLEND = PP_NO_BLEND
    PPBLENDLINEAR = PP_BLEND_LINEAR
    PPBLENDCUBIC = PP_BLEND_CUBIC

class BoxEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: BoxEmitter) -> None: ...
    def set_min_bound(self, vmin: _Vec3f) -> None: ...
    def set_max_bound(self, vmax: _Vec3f) -> None: ...
    def get_min_bound(self) -> LPoint3f: ...
    def get_max_bound(self) -> LPoint3f: ...
    setMinBound = set_min_bound
    setMaxBound = set_max_bound
    getMinBound = get_min_bound
    getMaxBound = get_max_bound

class ColorInterpolationFunctionConstant:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_color_a(self) -> LVecBase4f: ...
    def set_color_a(self, c: _Vec4f) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getColorA = get_color_a
    setColorA = set_color_a
    getClassType = get_class_type

class ColorInterpolationFunctionLinear(ColorInterpolationFunctionConstant):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_color_b(self) -> LVecBase4f: ...
    def set_color_b(self, c: _Vec4f) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getColorB = get_color_b
    setColorB = set_color_b
    getClassType = get_class_type

class ColorInterpolationFunctionStepwave(ColorInterpolationFunctionLinear):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_width_a(self) -> float: ...
    def get_width_b(self) -> float: ...
    def set_width_a(self, w: float) -> None: ...
    def set_width_b(self, w: float) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getWidthA = get_width_a
    getWidthB = get_width_b
    setWidthA = set_width_a
    setWidthB = set_width_b
    getClassType = get_class_type

class ColorInterpolationFunctionSinusoid(ColorInterpolationFunctionLinear):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_period(self) -> float: ...
    def set_period(self, p: float) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getPeriod = get_period
    setPeriod = set_period
    getClassType = get_class_type

class ColorInterpolationSegment(ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, s: ColorInterpolationSegment) -> None: ...
    def get_function(self) -> TypedReferenceCount: ...
    def get_time_begin(self) -> float: ...
    def get_time_end(self) -> float: ...
    def is_modulated(self) -> bool: ...
    def get_id(self) -> int: ...
    def is_enabled(self) -> bool: ...
    def set_time_begin(self, time: float) -> None: ...
    def set_time_end(self, time: float) -> None: ...
    def set_is_modulated(self, flag: bool) -> None: ...
    def set_enabled(self, enabled: bool) -> None: ...
    getFunction = get_function
    getTimeBegin = get_time_begin
    getTimeEnd = get_time_end
    isModulated = is_modulated
    getId = get_id
    isEnabled = is_enabled
    setTimeBegin = set_time_begin
    setTimeEnd = set_time_end
    setIsModulated = set_is_modulated
    setEnabled = set_enabled

class ColorInterpolationManager(ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: ColorInterpolationManager) -> None: ...
    @overload
    def __init__(self, c: _Vec4f) -> None: ...
    def add_constant(self, time_begin: float = ..., time_end: float = ..., color: _Vec4f = ..., is_modulated: bool = ...) -> int: ...
    def add_linear(self, time_begin: float = ..., time_end: float = ..., color_a: _Vec4f = ..., color_b: _Vec4f = ..., is_modulated: bool = ...) -> int: ...
    def add_stepwave(self, time_begin: float = ..., time_end: float = ..., color_a: _Vec4f = ..., color_b: _Vec4f = ..., width_a: float = ..., width_b: float = ..., is_modulated: bool = ...) -> int: ...
    def add_sinusoid(self, time_begin: float = ..., time_end: float = ..., color_a: _Vec4f = ..., color_b: _Vec4f = ..., period: float = ..., is_modulated: bool = ...) -> int: ...
    def set_default_color(self, c: _Vec4f) -> None: ...
    def get_segment(self, seg_id: int) -> ColorInterpolationSegment: ...
    def get_segment_id_list(self) -> str: ...
    def clear_segment(self, seg_id: int) -> None: ...
    def clear_to_initial(self) -> None: ...
    addConstant = add_constant
    addLinear = add_linear
    addStepwave = add_stepwave
    addSinusoid = add_sinusoid
    setDefaultColor = set_default_color
    getSegment = get_segment
    getSegmentIdList = get_segment_id_list
    clearSegment = clear_segment
    clearToInitial = clear_to_initial

class DiscEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: DiscEmitter) -> None: ...
    def set_radius(self, r: float) -> None: ...
    def set_outer_angle(self, o_angle: float) -> None: ...
    def set_inner_angle(self, i_angle: float) -> None: ...
    def set_outer_magnitude(self, o_mag: float) -> None: ...
    def set_inner_magnitude(self, i_mag: float) -> None: ...
    def set_cubic_lerping(self, clerp: bool) -> None: ...
    def get_radius(self) -> float: ...
    def get_outer_angle(self) -> float: ...
    def get_inner_angle(self) -> float: ...
    def get_outer_magnitude(self) -> float: ...
    def get_inner_magnitude(self) -> float: ...
    def get_cubic_lerping(self) -> bool: ...
    setRadius = set_radius
    setOuterAngle = set_outer_angle
    setInnerAngle = set_inner_angle
    setOuterMagnitude = set_outer_magnitude
    setInnerMagnitude = set_inner_magnitude
    setCubicLerping = set_cubic_lerping
    getRadius = get_radius
    getOuterAngle = get_outer_angle
    getInnerAngle = get_inner_angle
    getOuterMagnitude = get_outer_magnitude
    getInnerMagnitude = get_inner_magnitude
    getCubicLerping = get_cubic_lerping

class GeomParticleRenderer(BaseParticleRenderer):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, am: _BaseParticleRenderer_ParticleRendererAlphaMode = ..., geom_node: PandaNode = ...) -> None: ...
    @overload
    def __init__(self, copy: GeomParticleRenderer) -> None: ...
    def set_geom_node(self, node: PandaNode) -> None: ...
    def get_geom_node(self) -> PandaNode: ...
    def get_color_interpolation_manager(self) -> ColorInterpolationManager: ...
    def set_x_scale_flag(self, animate_x_ratio: bool) -> None: ...
    def set_y_scale_flag(self, animate_y_ratio: bool) -> None: ...
    def set_z_scale_flag(self, animate_z_ratio: bool) -> None: ...
    def set_initial_x_scale(self, initial_x_scale: float) -> None: ...
    def set_final_x_scale(self, final_x_scale: float) -> None: ...
    def set_initial_y_scale(self, initial_y_scale: float) -> None: ...
    def set_final_y_scale(self, final_y_scale: float) -> None: ...
    def set_initial_z_scale(self, initial_z_scale: float) -> None: ...
    def set_final_z_scale(self, final_z_scale: float) -> None: ...
    def get_x_scale_flag(self) -> bool: ...
    def get_y_scale_flag(self) -> bool: ...
    def get_z_scale_flag(self) -> bool: ...
    def get_initial_x_scale(self) -> float: ...
    def get_final_x_scale(self) -> float: ...
    def get_initial_y_scale(self) -> float: ...
    def get_final_y_scale(self) -> float: ...
    def get_initial_z_scale(self) -> float: ...
    def get_final_z_scale(self) -> float: ...
    setGeomNode = set_geom_node
    getGeomNode = get_geom_node
    getColorInterpolationManager = get_color_interpolation_manager
    setXScaleFlag = set_x_scale_flag
    setYScaleFlag = set_y_scale_flag
    setZScaleFlag = set_z_scale_flag
    setInitialXScale = set_initial_x_scale
    setFinalXScale = set_final_x_scale
    setInitialYScale = set_initial_y_scale
    setFinalYScale = set_final_y_scale
    setInitialZScale = set_initial_z_scale
    setFinalZScale = set_final_z_scale
    getXScaleFlag = get_x_scale_flag
    getYScaleFlag = get_y_scale_flag
    getZScaleFlag = get_z_scale_flag
    getInitialXScale = get_initial_x_scale
    getFinalXScale = get_final_x_scale
    getInitialYScale = get_initial_y_scale
    getFinalYScale = get_final_y_scale
    getInitialZScale = get_initial_z_scale
    getFinalZScale = get_final_z_scale

class LineEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: LineEmitter) -> None: ...
    def set_endpoint1(self, point: _Vec3f) -> None: ...
    def set_endpoint2(self, point: _Vec3f) -> None: ...
    def get_endpoint1(self) -> LPoint3f: ...
    def get_endpoint2(self) -> LPoint3f: ...
    setEndpoint1 = set_endpoint1
    setEndpoint2 = set_endpoint2
    getEndpoint1 = get_endpoint1
    getEndpoint2 = get_endpoint2

class LineParticleRenderer(BaseParticleRenderer):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: LineParticleRenderer) -> None: ...
    @overload
    def __init__(self, head: _Vec4f, tail: _Vec4f, alpha_mode: _BaseParticleRenderer_ParticleRendererAlphaMode) -> None: ...
    def set_head_color(self, c: _Vec4f) -> None: ...
    def set_tail_color(self, c: _Vec4f) -> None: ...
    def get_head_color(self) -> LVecBase4f: ...
    def get_tail_color(self) -> LVecBase4f: ...
    def set_line_scale_factor(self, sf: float) -> None: ...
    def get_line_scale_factor(self) -> float: ...
    setHeadColor = set_head_color
    setTailColor = set_tail_color
    getHeadColor = get_head_color
    getTailColor = get_tail_color
    setLineScaleFactor = set_line_scale_factor
    getLineScaleFactor = get_line_scale_factor

class ParticleSystem(Physical):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, pool_size: int = ...) -> None: ...
    @overload
    def __init__(self, copy: ParticleSystem) -> None: ...
    def set_pool_size(self, size: int) -> None: ...
    def set_birth_rate(self, new_br: float) -> None: ...
    def set_soft_birth_rate(self, new_br: float) -> None: ...
    def set_litter_size(self, new_ls: int) -> None: ...
    def set_litter_spread(self, new_ls: int) -> None: ...
    def set_local_velocity_flag(self, lv: bool) -> None: ...
    def set_system_grows_older_flag(self, sgo: bool) -> None: ...
    def set_system_lifespan(self, sl: float) -> None: ...
    def set_system_age(self, age: float) -> None: ...
    def set_active_system_flag(self, a: bool) -> None: ...
    def set_spawn_on_death_flag(self, sod: bool) -> None: ...
    def set_spawn_render_node(self, node: PandaNode) -> None: ...
    def set_spawn_render_node_path(self, node: NodePath) -> None: ...
    def set_template_system_flag(self, tsf: bool) -> None: ...
    def set_render_parent(self, node: NodePath | PandaNode) -> None: ...
    def set_renderer(self, r: BaseParticleRenderer) -> None: ...
    def set_emitter(self, e: BaseParticleEmitter) -> None: ...
    def set_factory(self, f: BaseParticleFactory) -> None: ...
    def set_floor_z(self, z: float) -> None: ...
    def clear_floor_z(self) -> None: ...
    def get_pool_size(self) -> int: ...
    def get_birth_rate(self) -> float: ...
    def get_soft_birth_rate(self) -> float: ...
    def get_litter_size(self) -> int: ...
    def get_litter_spread(self) -> int: ...
    def get_local_velocity_flag(self) -> bool: ...
    def get_system_grows_older_flag(self) -> bool: ...
    def get_system_lifespan(self) -> float: ...
    def get_system_age(self) -> float: ...
    def get_active_system_flag(self) -> bool: ...
    def get_spawn_on_death_flag(self) -> bool: ...
    def get_spawn_render_node(self) -> PandaNode: ...
    def get_spawn_render_node_path(self) -> NodePath: ...
    def get_i_was_spawned_flag(self) -> bool: ...
    def get_living_particles(self) -> int: ...
    def get_render_parent(self) -> NodePath: ...
    def get_renderer(self) -> BaseParticleRenderer: ...
    def get_emitter(self) -> BaseParticleEmitter: ...
    def get_factory(self) -> BaseParticleFactory: ...
    def get_floor_z(self) -> float: ...
    def get_tics_since_birth(self) -> float: ...
    def add_spawn_template(self, ps: ParticleSystem) -> None: ...
    def clear_spawn_templates(self) -> None: ...
    def render(self) -> None: ...
    def induce_labor(self) -> None: ...
    def clear_to_initial(self) -> None: ...
    def soft_stop(self, br: float = ...) -> None: ...
    @overload
    def soft_start(self, br: float = ...) -> None: ...
    @overload
    def soft_start(self, br: float, first_birth_delay: float) -> None: ...
    def update(self, dt: float) -> None: ...
    def write_free_particle_fifo(self, out: ostream, indent: int = ...) -> None: ...
    def write_spawn_templates(self, out: ostream, indent: int = ...) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setPoolSize = set_pool_size
    setBirthRate = set_birth_rate
    setSoftBirthRate = set_soft_birth_rate
    setLitterSize = set_litter_size
    setLitterSpread = set_litter_spread
    setLocalVelocityFlag = set_local_velocity_flag
    setSystemGrowsOlderFlag = set_system_grows_older_flag
    setSystemLifespan = set_system_lifespan
    setSystemAge = set_system_age
    setActiveSystemFlag = set_active_system_flag
    setSpawnOnDeathFlag = set_spawn_on_death_flag
    setSpawnRenderNode = set_spawn_render_node
    setSpawnRenderNodePath = set_spawn_render_node_path
    setTemplateSystemFlag = set_template_system_flag
    setRenderParent = set_render_parent
    setRenderer = set_renderer
    setEmitter = set_emitter
    setFactory = set_factory
    setFloorZ = set_floor_z
    clearFloorZ = clear_floor_z
    getPoolSize = get_pool_size
    getBirthRate = get_birth_rate
    getSoftBirthRate = get_soft_birth_rate
    getLitterSize = get_litter_size
    getLitterSpread = get_litter_spread
    getLocalVelocityFlag = get_local_velocity_flag
    getSystemGrowsOlderFlag = get_system_grows_older_flag
    getSystemLifespan = get_system_lifespan
    getSystemAge = get_system_age
    getActiveSystemFlag = get_active_system_flag
    getSpawnOnDeathFlag = get_spawn_on_death_flag
    getSpawnRenderNode = get_spawn_render_node
    getSpawnRenderNodePath = get_spawn_render_node_path
    getIWasSpawnedFlag = get_i_was_spawned_flag
    getLivingParticles = get_living_particles
    getRenderParent = get_render_parent
    getRenderer = get_renderer
    getEmitter = get_emitter
    getFactory = get_factory
    getFloorZ = get_floor_z
    getTicsSinceBirth = get_tics_since_birth
    addSpawnTemplate = add_spawn_template
    clearSpawnTemplates = clear_spawn_templates
    induceLabor = induce_labor
    clearToInitial = clear_to_initial
    softStop = soft_stop
    softStart = soft_start
    writeFreeParticleFifo = write_free_particle_fifo
    writeSpawnTemplates = write_spawn_templates
    getClassType = get_class_type

class PointEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: PointEmitter) -> None: ...
    def set_location(self, p: _Vec3f) -> None: ...
    def get_location(self) -> LPoint3f: ...
    setLocation = set_location
    getLocation = get_location

class PointParticleFactory(BaseParticleFactory):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: PointParticleFactory) -> None: ...

class PointParticleRenderer(BaseParticleRenderer):
    DtoolClassDict: ClassVar[dict[str, Any]]
    PP_ONE_COLOR: ClassVar[Literal[0]]
    PP_BLEND_LIFE: ClassVar[Literal[1]]
    PP_BLEND_VEL: ClassVar[Literal[2]]
    @overload
    def __init__(self, ad: _BaseParticleRenderer_ParticleRendererAlphaMode = ..., point_size: float = ..., bt: _PointParticleRenderer_PointParticleBlendType = ..., bm: _BaseParticleRenderer_ParticleRendererBlendMethod = ..., sc: _Vec4f = ..., ec: _Vec4f = ...) -> None: ...
    @overload
    def __init__(self, copy: PointParticleRenderer) -> None: ...
    def set_point_size(self, point_size: float) -> None: ...
    def set_start_color(self, sc: _Vec4f) -> None: ...
    def set_end_color(self, ec: _Vec4f) -> None: ...
    def set_blend_type(self, bt: _PointParticleRenderer_PointParticleBlendType) -> None: ...
    def set_blend_method(self, bm: _BaseParticleRenderer_ParticleRendererBlendMethod) -> None: ...
    def get_point_size(self) -> float: ...
    def get_start_color(self) -> LVecBase4f: ...
    def get_end_color(self) -> LVecBase4f: ...
    def get_blend_type(self) -> _PointParticleRenderer_PointParticleBlendType: ...
    def get_blend_method(self) -> _BaseParticleRenderer_ParticleRendererBlendMethod: ...
    setPointSize = set_point_size
    setStartColor = set_start_color
    setEndColor = set_end_color
    setBlendType = set_blend_type
    setBlendMethod = set_blend_method
    getPointSize = get_point_size
    getStartColor = get_start_color
    getEndColor = get_end_color
    getBlendType = get_blend_type
    getBlendMethod = get_blend_method
    PPONECOLOR = PP_ONE_COLOR
    PPBLENDLIFE = PP_BLEND_LIFE
    PPBLENDVEL = PP_BLEND_VEL

class RectangleEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: RectangleEmitter) -> None: ...
    def set_min_bound(self, vmin: LVecBase2f) -> None: ...
    def set_max_bound(self, vmax: LVecBase2f) -> None: ...
    def get_min_bound(self) -> LPoint2f: ...
    def get_max_bound(self) -> LPoint2f: ...
    setMinBound = set_min_bound
    setMaxBound = set_max_bound
    getMinBound = get_min_bound
    getMaxBound = get_max_bound

class SparkleParticleRenderer(BaseParticleRenderer):
    DtoolClassDict: ClassVar[dict[str, Any]]
    SP_NO_SCALE: ClassVar[Literal[0]]
    SP_SCALE: ClassVar[Literal[1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: SparkleParticleRenderer) -> None: ...
    @overload
    def __init__(self, center: _Vec4f, edge: _Vec4f, birth_radius: float, death_radius: float, life_scale: _SparkleParticleRenderer_SparkleParticleLifeScale, alpha_mode: _BaseParticleRenderer_ParticleRendererAlphaMode) -> None: ...
    def set_center_color(self, c: _Vec4f) -> None: ...
    def set_edge_color(self, c: _Vec4f) -> None: ...
    def set_birth_radius(self, radius: float) -> None: ...
    def set_death_radius(self, radius: float) -> None: ...
    def set_life_scale(self, __param0: _SparkleParticleRenderer_SparkleParticleLifeScale) -> None: ...
    def get_center_color(self) -> LVecBase4f: ...
    def get_edge_color(self) -> LVecBase4f: ...
    def get_birth_radius(self) -> float: ...
    def get_death_radius(self) -> float: ...
    def get_life_scale(self) -> _SparkleParticleRenderer_SparkleParticleLifeScale: ...
    setCenterColor = set_center_color
    setEdgeColor = set_edge_color
    setBirthRadius = set_birth_radius
    setDeathRadius = set_death_radius
    setLifeScale = set_life_scale
    getCenterColor = get_center_color
    getEdgeColor = get_edge_color
    getBirthRadius = get_birth_radius
    getDeathRadius = get_death_radius
    getLifeScale = get_life_scale
    SPNOSCALE = SP_NO_SCALE
    SPSCALE = SP_SCALE

class SphereSurfaceEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: SphereSurfaceEmitter) -> None: ...
    def set_radius(self, r: float) -> None: ...
    def get_radius(self) -> float: ...
    setRadius = set_radius
    getRadius = get_radius

class SphereVolumeEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: SphereVolumeEmitter) -> None: ...
    def set_radius(self, r: float) -> None: ...
    def get_radius(self) -> float: ...
    setRadius = set_radius
    getRadius = get_radius

class SpriteAnim(ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    ST_texture: ClassVar[Literal[0]]
    ST_from_node: ClassVar[Literal[1]]
    def __init__(self, __param0: SpriteAnim) -> None: ...
    @overload
    def set_source_info(self, tex: str) -> None: ...
    @overload
    def set_source_info(self, model: str, node: str) -> None: ...
    def get_source_type(self) -> _SpriteAnim_SourceType: ...
    def get_tex_source(self) -> str: ...
    def get_model_source(self) -> str: ...
    def get_node_source(self) -> str: ...
    def get_num_frames(self) -> int: ...
    setSourceInfo = set_source_info
    getSourceType = get_source_type
    getTexSource = get_tex_source
    getModelSource = get_model_source
    getNodeSource = get_node_source
    getNumFrames = get_num_frames
    STTexture = ST_texture
    STFromNode = ST_from_node

class SpriteParticleRenderer(BaseParticleRenderer):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, tex: Texture = ...) -> None: ...
    @overload
    def __init__(self, copy: SpriteParticleRenderer) -> None: ...
    @overload
    def set_from_node(self, node_path: NodePath, size_from_texels: bool = ...) -> None: ...
    @overload
    def set_from_node(self, node_path: NodePath, model: str, node: str, size_from_texels: bool = ...) -> None: ...
    @overload
    def add_from_node(self, node_path: NodePath, size_from_texels: bool = ..., resize: bool = ...) -> None: ...
    @overload
    def add_from_node(self, node_path: NodePath, model: str, node: str, size_from_texels: bool = ..., resize: bool = ...) -> None: ...
    def set_texture(self, tex: Texture, texels_per_unit: float = ...) -> None: ...
    def add_texture(self, tex: Texture, texels_per_unit: float = ..., resize: bool = ...) -> None: ...
    def remove_animation(self, n: int) -> None: ...
    @overload
    def set_ll_uv(self, ll_uv: LVecBase2f) -> None: ...
    @overload
    def set_ll_uv(self, ll_uv: LVecBase2f, anim: int, frame: int) -> None: ...
    @overload
    def set_ur_uv(self, ur_uv: LVecBase2f) -> None: ...
    @overload
    def set_ur_uv(self, ur_uv: LVecBase2f, anim: int, frame: int) -> None: ...
    def set_size(self, width: float, height: float) -> None: ...
    def set_color(self, color: _Vec4f) -> None: ...
    def set_x_scale_flag(self, animate_x_ratio: bool) -> None: ...
    def set_y_scale_flag(self, animate_y_ratio: bool) -> None: ...
    def set_anim_angle_flag(self, animate_theta: bool) -> None: ...
    def set_initial_x_scale(self, initial_x_scale: float) -> None: ...
    def set_final_x_scale(self, final_x_scale: float) -> None: ...
    def set_initial_y_scale(self, initial_y_scale: float) -> None: ...
    def set_final_y_scale(self, final_y_scale: float) -> None: ...
    def set_nonanimated_theta(self, theta: float) -> None: ...
    def set_alpha_blend_method(self, bm: _BaseParticleRenderer_ParticleRendererBlendMethod) -> None: ...
    def set_alpha_disable(self, ad: bool) -> None: ...
    def set_animate_frames_enable(self, an: bool) -> None: ...
    def set_animate_frames_rate(self, r: float) -> None: ...
    def set_animate_frames_index(self, i: int) -> None: ...
    @overload
    def get_texture(self) -> Texture: ...
    @overload
    def get_texture(self, anim: int, frame: int) -> Texture: ...
    def get_num_anims(self) -> int: ...
    def get_anim(self, n: int) -> SpriteAnim: ...
    def get_last_anim(self) -> SpriteAnim: ...
    def get_color_interpolation_manager(self) -> ColorInterpolationManager: ...
    @overload
    def get_ll_uv(self) -> LPoint2f: ...
    @overload
    def get_ll_uv(self, anim: int, frame: int) -> LPoint2f: ...
    @overload
    def get_ur_uv(self) -> LPoint2f: ...
    @overload
    def get_ur_uv(self, anim: int, frame: int) -> LPoint2f: ...
    def get_width(self) -> float: ...
    def get_height(self) -> float: ...
    def get_color(self) -> LVecBase4f: ...
    def get_x_scale_flag(self) -> bool: ...
    def get_y_scale_flag(self) -> bool: ...
    def get_anim_angle_flag(self) -> bool: ...
    def get_initial_x_scale(self) -> float: ...
    def get_final_x_scale(self) -> float: ...
    def get_initial_y_scale(self) -> float: ...
    def get_final_y_scale(self) -> float: ...
    def get_nonanimated_theta(self) -> float: ...
    def get_alpha_blend_method(self) -> _BaseParticleRenderer_ParticleRendererBlendMethod: ...
    def get_alpha_disable(self) -> bool: ...
    def get_animate_frames_enable(self) -> bool: ...
    def get_animate_frames_rate(self) -> float: ...
    def get_animate_frames_index(self) -> int: ...
    def get_anims(self) -> tuple[SpriteAnim, ...]: ...
    setFromNode = set_from_node
    addFromNode = add_from_node
    setTexture = set_texture
    addTexture = add_texture
    removeAnimation = remove_animation
    setLlUv = set_ll_uv
    setUrUv = set_ur_uv
    setSize = set_size
    setColor = set_color
    setXScaleFlag = set_x_scale_flag
    setYScaleFlag = set_y_scale_flag
    setAnimAngleFlag = set_anim_angle_flag
    setInitialXScale = set_initial_x_scale
    setFinalXScale = set_final_x_scale
    setInitialYScale = set_initial_y_scale
    setFinalYScale = set_final_y_scale
    setNonanimatedTheta = set_nonanimated_theta
    setAlphaBlendMethod = set_alpha_blend_method
    setAlphaDisable = set_alpha_disable
    setAnimateFramesEnable = set_animate_frames_enable
    setAnimateFramesRate = set_animate_frames_rate
    setAnimateFramesIndex = set_animate_frames_index
    getTexture = get_texture
    getNumAnims = get_num_anims
    getAnim = get_anim
    getLastAnim = get_last_anim
    getColorInterpolationManager = get_color_interpolation_manager
    getLlUv = get_ll_uv
    getUrUv = get_ur_uv
    getWidth = get_width
    getHeight = get_height
    getColor = get_color
    getXScaleFlag = get_x_scale_flag
    getYScaleFlag = get_y_scale_flag
    getAnimAngleFlag = get_anim_angle_flag
    getInitialXScale = get_initial_x_scale
    getFinalXScale = get_final_x_scale
    getInitialYScale = get_initial_y_scale
    getFinalYScale = get_final_y_scale
    getNonanimatedTheta = get_nonanimated_theta
    getAlphaBlendMethod = get_alpha_blend_method
    getAlphaDisable = get_alpha_disable
    getAnimateFramesEnable = get_animate_frames_enable
    getAnimateFramesRate = get_animate_frames_rate
    getAnimateFramesIndex = get_animate_frames_index
    getAnims = get_anims

class TangentRingEmitter(BaseParticleEmitter):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: TangentRingEmitter) -> None: ...
    def set_radius(self, r: float) -> None: ...
    def set_radius_spread(self, spread: float) -> None: ...
    def get_radius(self) -> float: ...
    def get_radius_spread(self) -> float: ...
    setRadius = set_radius
    setRadiusSpread = set_radius_spread
    getRadius = get_radius
    getRadiusSpread = get_radius_spread

class ZSpinParticleFactory(BaseParticleFactory):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: ZSpinParticleFactory) -> None: ...
    def set_initial_angle(self, angle: float) -> None: ...
    def set_final_angle(self, angle: float) -> None: ...
    def set_initial_angle_spread(self, spread: float) -> None: ...
    def set_final_angle_spread(self, spread: float) -> None: ...
    def get_initial_angle(self) -> float: ...
    def get_final_angle(self) -> float: ...
    def get_initial_angle_spread(self) -> float: ...
    def get_final_angle_spread(self) -> float: ...
    def set_angular_velocity(self, v: float) -> None: ...
    def get_angular_velocity(self) -> float: ...
    def set_angular_velocity_spread(self, spread: float) -> None: ...
    def get_angular_velocity_spread(self) -> float: ...
    def enable_angular_velocity(self, bEnabled: bool) -> None: ...
    def get_angular_velocity_enabled(self) -> bool: ...
    setInitialAngle = set_initial_angle
    setFinalAngle = set_final_angle
    setInitialAngleSpread = set_initial_angle_spread
    setFinalAngleSpread = set_final_angle_spread
    getInitialAngle = get_initial_angle
    getFinalAngle = get_final_angle
    getInitialAngleSpread = get_initial_angle_spread
    getFinalAngleSpread = get_final_angle_spread
    setAngularVelocity = set_angular_velocity
    getAngularVelocity = get_angular_velocity
    setAngularVelocitySpread = set_angular_velocity_spread
    getAngularVelocitySpread = get_angular_velocity_spread
    enableAngularVelocity = enable_angular_velocity
    getAngularVelocityEnabled = get_angular_velocity_enabled

class ParticleSystemManager:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, every_nth_frame: int = ...) -> None: ...
    @overload
    def __init__(self, __param0: ParticleSystemManager) -> None: ...
    def set_frame_stepping(self, every_nth_frame: int) -> None: ...
    def get_frame_stepping(self) -> int: ...
    def attach_particlesystem(self, ps: ParticleSystem) -> None: ...
    def remove_particlesystem(self, ps: ParticleSystem) -> None: ...
    def clear(self) -> None: ...
    @overload
    def do_particles(self, dt: float) -> None: ...
    @overload
    def do_particles(self, dt: float, ps: ParticleSystem, do_render: bool = ...) -> None: ...
    def output(self, out: ostream) -> None: ...
    def write_ps_list(self, out: ostream, indent: int = ...) -> None: ...
    def write(self, out: ostream, indent: int = ...) -> None: ...
    setFrameStepping = set_frame_stepping
    getFrameStepping = get_frame_stepping
    attachParticlesystem = attach_particlesystem
    removeParticlesystem = remove_particlesystem
    doParticles = do_particles
    writePsList = write_ps_list
