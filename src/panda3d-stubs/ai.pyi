from typing import Any, ClassVar, TypeAlias, overload
from panda3d.core import LMatrix3f, LVecBase3f, NodePath, ReferenceCount

_Vec3f: TypeAlias = LVecBase3f | LMatrix3f.Row | LMatrix3f.CRow

class AIBehaviors:
    """This class implements all the steering behaviors of the AI framework, such
    as seek, flee, pursue, evade, wander and flock.  Each steering behavior has
    a weight which is used when more than one type of steering behavior is
    acting on the same ai character.  The weight decides the contribution of
    each type of steering behavior.  The AICharacter class has a handle to an
    object of this class and this allows to invoke the steering behaviors via
    the AICharacter.  This class also provides functionality such as pausing,
    resuming and removing the AI behaviors of an AI character at anytime.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, __param0: AIBehaviors) -> None: ...
    @overload
    def seek(self, pos: _Vec3f, seek_wt: float = ...) -> None: ...
    @overload
    def seek(self, target_object: NodePath, seek_wt: float = ...) -> None: ...
    @overload
    def flee(self, pos: _Vec3f, panic_distance: float = ..., relax_distance: float = ..., flee_wt: float = ...) -> None: ...
    @overload
    def flee(self, target_object: NodePath, panic_distance: float = ..., relax_distance: float = ..., flee_wt: float = ...) -> None: ...
    def pursue(self, target_object: NodePath, pursue_wt: float = ...) -> None: ...
    def evade(self, target_object: NodePath, panic_distance: float = ..., relax_distance: float = ..., evade_wt: float = ...) -> None: ...
    def arrival(self, distance: float = ...) -> None: ...
    def flock(self, flock_wt: float) -> None: ...
    def wander(self, wander_radius: float = ..., flag: int = ..., aoe: float = ..., wander_weight: float = ...) -> None: ...
    def obstacle_avoidance(self, feeler_length: float = ...) -> None: ...
    def path_follow(self, follow_wt: float = ...) -> None: ...
    def add_to_path(self, pos: _Vec3f) -> None: ...
    def start_follow(self, type: str = ...) -> None: ...
    def init_path_find(self, navmesh_filename: str) -> None: ...
    @overload
    def path_find_to(self, pos: _Vec3f, type: str = ...) -> None: ...
    @overload
    def path_find_to(self, target: NodePath, type: str = ...) -> None: ...
    def add_static_obstacle(self, obstacle: NodePath) -> None: ...
    def add_dynamic_obstacle(self, obstacle: NodePath) -> None: ...
    def remove_ai(self, ai_type: str) -> None: ...
    def pause_ai(self, ai_type: str) -> None: ...
    def resume_ai(self, ai_type: str) -> None: ...
    def behavior_status(self, ai_type: str) -> str: ...
    obstacleAvoidance = obstacle_avoidance
    pathFollow = path_follow
    addToPath = add_to_path
    startFollow = start_follow
    initPathFind = init_path_find
    pathFindTo = path_find_to
    addStaticObstacle = add_static_obstacle
    addDynamicObstacle = add_dynamic_obstacle
    removeAi = remove_ai
    pauseAi = pause_ai
    resumeAi = resume_ai
    behaviorStatus = behavior_status

class AICharacter(ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def name(self) -> str: ...
    @overload
    def __init__(self, __param0: AICharacter) -> None: ...
    @overload
    def __init__(self, model_name: str, model_np: NodePath, mass: float, movt_force: float, max_force: float) -> None: ...
    def get_mass(self) -> float: ...
    def set_mass(self, m: float) -> None: ...
    def get_velocity(self) -> LVecBase3f: ...
    def get_max_force(self) -> float: ...
    def set_max_force(self, max_force: float) -> None: ...
    def get_node_path(self) -> NodePath: ...
    def set_node_path(self, np: NodePath) -> None: ...
    def get_ai_behaviors(self) -> AIBehaviors: ...
    def set_pf_guide(self, pf_guide: bool) -> None: ...
    getMass = get_mass
    setMass = set_mass
    getVelocity = get_velocity
    getMaxForce = get_max_force
    setMaxForce = set_max_force
    getNodePath = get_node_path
    setNodePath = set_node_path
    getAiBehaviors = get_ai_behaviors
    setPfGuide = set_pf_guide

class AINode:
    """This class is used to assign the nodes on the mesh.  It holds all the data
    necessary to compute A* algorithm.  It also maintains a lot of vital
    information such as the neighbor nodes of each node and also its position
    on the mesh.  Note: The Mesh Generator which is a standalone tool makes use
    of this class to generate the nodes on the mesh.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, __param0: AINode) -> None: ...
    @overload
    def __init__(self, grid_x: int, grid_y: int, pos: _Vec3f, w: float, l: float, h: float) -> None: ...
    def contains(self, x: float, y: float) -> bool: ...

class Flock:
    """This class is used to define the flock attributes and the AI characters
    which are part of the flock.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, __param0: Flock) -> None: ...
    @overload
    def __init__(self, flock_id: int, vcone_angle: float, vcone_radius: float, separation_wt: int = ..., cohesion_wt: int = ..., alignment_wt: int = ...) -> None: ...
    def add_ai_char(self, ai_char: AICharacter) -> None: ...
    def get_id(self) -> int: ...
    addAiChar = add_ai_char
    getId = get_id

class AIWorld:
    """A class that implements the virtual AI world which keeps track of the AI
    characters active at any given time.  It contains a linked list of AI
    characters, obstactle data and unique name for each character.  It also
    updates each characters state.  The AI characters can also be added to the
    world as flocks.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, __param0: AIWorld) -> None: ...
    @overload
    def __init__(self, render: NodePath) -> None: ...
    def add_ai_char(self, ai_ch: AICharacter) -> None: ...
    def remove_ai_char(self, name: str) -> None: ...
    def add_flock(self, flock: Flock) -> None: ...
    def flock_off(self, flock_id: int) -> None: ...
    def flock_on(self, flock_id: int) -> None: ...
    def remove_flock(self, flock_id: int) -> None: ...
    def get_flock(self, flock_id: int) -> Flock: ...
    def add_obstacle(self, obstacle: NodePath) -> None: ...
    def remove_obstacle(self, obstacle: NodePath) -> None: ...
    def print_list(self) -> None: ...
    def update(self) -> None: ...
    addAiChar = add_ai_char
    removeAiChar = remove_ai_char
    addFlock = add_flock
    flockOff = flock_off
    flockOn = flock_on
    removeFlock = remove_flock
    getFlock = get_flock
    addObstacle = add_obstacle
    removeObstacle = remove_obstacle
    printList = print_list
