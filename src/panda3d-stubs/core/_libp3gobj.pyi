from collections.abc import Mapping, Sequence
from os import PathLike
from typing import Any, ClassVar, Literal, TypeAlias, final, overload
from panda3d.core import (
    AnimInterface,
    AsyncFuture,
    AsyncTask,
    BamCacheRecord,
    BitArray,
    BoundingVolume,
    ConfigVariableColor,
    ConfigVariableFilename,
    ConstPointerToArray_int,
    ConstPointerToArray_unsigned_char,
    CopyOnWriteObject,
    Filename,
    GraphicsStateGuardianBase,
    LMatrix3d,
    LMatrix3f,
    LMatrix4d,
    LMatrix4f,
    LPoint3f,
    LVecBase2d,
    LVecBase2f,
    LVecBase2i,
    LVecBase3d,
    LVecBase3f,
    LVecBase3i,
    LVecBase4d,
    LVecBase4f,
    LVecBase4i,
    LVector2f,
    LVector3f,
    LoaderOptions,
    Mutex,
    Namable,
    PNMImage,
    ParamValueBase,
    PfmFile,
    PointerToArray_int,
    PointerToArray_unsigned_char,
    ReferenceCount,
    SparseArray,
    Thread,
    TypeHandle,
    TypedObject,
    TypedReferenceCount,
    TypedWritableReferenceCount,
    UnalignedLMatrix4d,
    UnalignedLMatrix4f,
    UnalignedLVecBase4d,
    UnalignedLVecBase4f,
    UnalignedLVecBase4i,
    UpdateSeq,
    istream,
    ostream,
)

_GeomEnums_AnimationType: TypeAlias = Literal[0, 1, 2]
_GeomEnums_NumericType: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
_GeomEnums_Contents: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
_VertexDataPage_RamClass: TypeAlias = Literal[0, 1, 2, 3]
_GeomEnums_UsageHint: TypeAlias = Literal[0, 1, 2, 3, 4]
_Mat4f: TypeAlias = LMatrix4f | UnalignedLMatrix4f
_Vec4f: TypeAlias = LVecBase4f | UnalignedLVecBase4f | LMatrix4f.Row | LMatrix4f.CRow | ConfigVariableColor
_Vec4d: TypeAlias = LVecBase4d | UnalignedLVecBase4d | LMatrix4d.Row | LMatrix4d.CRow
_Vec3d: TypeAlias = LVecBase3d | LMatrix3d.Row | LMatrix3d.CRow
_Vec3f: TypeAlias = LVecBase3f | LMatrix3f.Row | LMatrix3f.CRow
_GeomEnums_PrimitiveType: TypeAlias = Literal[0, 1, 2, 3, 4]
_GeomEnums_ShadeModel: TypeAlias = Literal[0, 1, 2, 3]
_TextureStage_Mode: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
_TextureStage_CombineMode: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8]
_TextureStage_CombineSource: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6]
_TextureStage_CombineOperand: TypeAlias = Literal[0, 1, 2, 3, 4]
_BoundingVolume_BoundsType: TypeAlias = Literal[0, 1, 2, 3, 4]
_Mat4d: TypeAlias = LMatrix4d | UnalignedLMatrix4d
_Vec4i: TypeAlias = LVecBase4i | UnalignedLVecBase4i
_SamplerState_WrapMode: TypeAlias = Literal[0, 1, 2, 3, 4, 5]
_SamplerState_FilterType: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8]
_Texture_TextureType: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7]
_Texture_Format: TypeAlias = Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52]
_Texture_ComponentType: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8]
_Texture_CompressionMode: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
_Texture_QualityLevel: TypeAlias = Literal[0, 1, 2, 3]
_AutoTextureScale: TypeAlias = Literal[0, 1, 2, 3, 4]
_Filename: TypeAlias = Filename | ConfigVariableFilename | str | bytes | PathLike
_Shader_ShaderLanguage: TypeAlias = Literal[0, 1, 2, 3, 4]
_Shader_ShaderType: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7]
_CoordinateSystem: TypeAlias = Literal[0, 1, 2, 3, 4, 5]
_Lens_StereoChannel: TypeAlias = Literal[0, 1, 2, 3]
_TextureStagePool_Mode: TypeAlias = Literal[0, 1, 2]

class AdaptiveLru(Namable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, name: str, max_size: int) -> None: ...
    def get_total_size(self) -> int: ...
    def get_max_size(self) -> int: ...
    def set_max_size(self, max_size: int) -> None: ...
    def count_active_size(self) -> int: ...
    def consider_evict(self) -> None: ...
    def evict_to(self, target_size: int) -> None: ...
    def begin_epoch(self) -> None: ...
    def validate(self) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def set_weight(self, weight: float) -> None: ...
    def get_weight(self) -> float: ...
    def set_max_updates_per_frame(self, max_updates_per_frame: int) -> None: ...
    def get_max_updates_per_frame(self) -> int: ...
    getTotalSize = get_total_size
    getMaxSize = get_max_size
    setMaxSize = set_max_size
    countActiveSize = count_active_size
    considerEvict = consider_evict
    evictTo = evict_to
    beginEpoch = begin_epoch
    setWeight = set_weight
    getWeight = get_weight
    setMaxUpdatesPerFrame = set_max_updates_per_frame
    getMaxUpdatesPerFrame = get_max_updates_per_frame

class AdaptiveLruPage:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, copy: AdaptiveLruPage) -> None: ...
    @overload
    def __init__(self, lru_size: int) -> None: ...
    def assign(self, copy: AdaptiveLruPage) -> AdaptiveLruPage: ...
    def get_lru(self) -> AdaptiveLru: ...
    def enqueue_lru(self, lru: AdaptiveLru) -> None: ...
    def dequeue_lru(self) -> None: ...
    @overload
    def mark_used_lru(self) -> None: ...
    @overload
    def mark_used_lru(self, lru: AdaptiveLru) -> None: ...
    def get_lru_size(self) -> int: ...
    def set_lru_size(self, lru_size: int) -> None: ...
    def evict_lru(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def get_num_frames(self) -> int: ...
    def get_num_inactive_frames(self) -> int: ...
    getLru = get_lru
    enqueueLru = enqueue_lru
    dequeueLru = dequeue_lru
    markUsedLru = mark_used_lru
    getLruSize = get_lru_size
    setLruSize = set_lru_size
    evictLru = evict_lru
    getNumFrames = get_num_frames
    getNumInactiveFrames = get_num_inactive_frames

class GeomEnums:
    DtoolClassDict: ClassVar[dict[str, Any]]
    UH_client: ClassVar[Literal[0]]
    UH_stream: ClassVar[Literal[1]]
    UH_dynamic: ClassVar[Literal[2]]
    UH_static: ClassVar[Literal[3]]
    UH_unspecified: ClassVar[Literal[4]]
    GR_indexed_point: ClassVar[Literal[1]]
    GR_indexed_other: ClassVar[Literal[65536]]
    GR_indexed_bits: ClassVar[Literal[65537]]
    GR_point: ClassVar[Literal[2]]
    GR_point_uniform_size: ClassVar[Literal[4]]
    GR_per_point_size: ClassVar[Literal[8]]
    GR_point_perspective: ClassVar[Literal[16]]
    GR_point_aspect_ratio: ClassVar[Literal[32]]
    GR_point_scale: ClassVar[Literal[64]]
    GR_point_rotate: ClassVar[Literal[128]]
    GR_point_sprite: ClassVar[Literal[256]]
    GR_point_sprite_tex_matrix: ClassVar[Literal[512]]
    GR_point_bits: ClassVar[Literal[1022]]
    GR_triangle_strip: ClassVar[Literal[1024]]
    GR_triangle_fan: ClassVar[Literal[2048]]
    GR_line_strip: ClassVar[Literal[4096]]
    GR_composite_bits: ClassVar[Literal[7168]]
    GR_strip_cut_index: ClassVar[Literal[131072]]
    GR_flat_first_vertex: ClassVar[Literal[8192]]
    GR_flat_last_vertex: ClassVar[Literal[16384]]
    GR_shade_model_bits: ClassVar[Literal[24576]]
    GR_render_mode_wireframe: ClassVar[Literal[262144]]
    GR_render_mode_point: ClassVar[Literal[524288]]
    GR_adjacency: ClassVar[Literal[1048576]]
    SM_uniform: ClassVar[Literal[0]]
    SM_smooth: ClassVar[Literal[1]]
    SM_flat_first_vertex: ClassVar[Literal[2]]
    SM_flat_last_vertex: ClassVar[Literal[3]]
    PT_none: ClassVar[Literal[0]]
    PT_polygons: ClassVar[Literal[1]]
    PT_lines: ClassVar[Literal[2]]
    PT_points: ClassVar[Literal[3]]
    PT_patches: ClassVar[Literal[4]]
    NT_uint8: ClassVar[Literal[0]]
    NT_uint16: ClassVar[Literal[1]]
    NT_uint32: ClassVar[Literal[2]]
    NT_packed_dcba: ClassVar[Literal[3]]
    NT_packed_dabc: ClassVar[Literal[4]]
    NT_float32: ClassVar[Literal[5]]
    NT_float64: ClassVar[Literal[6]]
    NT_stdfloat: ClassVar[Literal[7]]
    NT_int8: ClassVar[Literal[8]]
    NT_int16: ClassVar[Literal[9]]
    NT_int32: ClassVar[Literal[10]]
    NT_packed_ufloat: ClassVar[Literal[11]]
    C_other: ClassVar[Literal[0]]
    C_point: ClassVar[Literal[1]]
    C_clip_point: ClassVar[Literal[2]]
    C_vector: ClassVar[Literal[3]]
    C_texcoord: ClassVar[Literal[4]]
    C_color: ClassVar[Literal[5]]
    C_index: ClassVar[Literal[6]]
    C_morph_delta: ClassVar[Literal[7]]
    C_matrix: ClassVar[Literal[8]]
    C_normal: ClassVar[Literal[9]]
    AT_none: ClassVar[Literal[0]]
    AT_panda: ClassVar[Literal[1]]
    AT_hardware: ClassVar[Literal[2]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: GeomEnums) -> None: ...
    UHClient = UH_client
    UHStream = UH_stream
    UHDynamic = UH_dynamic
    UHStatic = UH_static
    UHUnspecified = UH_unspecified
    GRIndexedPoint = GR_indexed_point
    GRIndexedOther = GR_indexed_other
    GRIndexedBits = GR_indexed_bits
    GRPoint = GR_point
    GRPointUniformSize = GR_point_uniform_size
    GRPerPointSize = GR_per_point_size
    GRPointPerspective = GR_point_perspective
    GRPointAspectRatio = GR_point_aspect_ratio
    GRPointScale = GR_point_scale
    GRPointRotate = GR_point_rotate
    GRPointSprite = GR_point_sprite
    GRPointSpriteTexMatrix = GR_point_sprite_tex_matrix
    GRPointBits = GR_point_bits
    GRTriangleStrip = GR_triangle_strip
    GRTriangleFan = GR_triangle_fan
    GRLineStrip = GR_line_strip
    GRCompositeBits = GR_composite_bits
    GRStripCutIndex = GR_strip_cut_index
    GRFlatFirstVertex = GR_flat_first_vertex
    GRFlatLastVertex = GR_flat_last_vertex
    GRShadeModelBits = GR_shade_model_bits
    GRRenderModeWireframe = GR_render_mode_wireframe
    GRRenderModePoint = GR_render_mode_point
    GRAdjacency = GR_adjacency
    SMUniform = SM_uniform
    SMSmooth = SM_smooth
    SMFlatFirstVertex = SM_flat_first_vertex
    SMFlatLastVertex = SM_flat_last_vertex
    PTNone = PT_none
    PTPolygons = PT_polygons
    PTLines = PT_lines
    PTPoints = PT_points
    PTPatches = PT_patches
    NTUint8 = NT_uint8
    NTUint16 = NT_uint16
    NTUint32 = NT_uint32
    NTPackedDcba = NT_packed_dcba
    NTPackedDabc = NT_packed_dabc
    NTFloat32 = NT_float32
    NTFloat64 = NT_float64
    NTStdfloat = NT_stdfloat
    NTInt8 = NT_int8
    NTInt16 = NT_int16
    NTInt32 = NT_int32
    NTPackedUfloat = NT_packed_ufloat
    COther = C_other
    CPoint = C_point
    CClipPoint = C_clip_point
    CVector = C_vector
    CTexcoord = C_texcoord
    CColor = C_color
    CIndex = C_index
    CMorphDelta = C_morph_delta
    CMatrix = C_matrix
    CNormal = C_normal
    ATNone = AT_none
    ATPanda = AT_panda
    ATHardware = AT_hardware

class GeomVertexAnimationSpec(GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def animation_type(self) -> _GeomEnums_AnimationType: ...
    @property
    def num_transforms(self) -> int: ...
    @property
    def indexed_transforms(self) -> bool: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: GeomVertexAnimationSpec) -> None: ...
    def assign(self, other: GeomVertexAnimationSpec) -> GeomVertexAnimationSpec: ...
    def get_animation_type(self) -> _GeomEnums_AnimationType: ...
    def get_num_transforms(self) -> int: ...
    def get_indexed_transforms(self) -> bool: ...
    def set_none(self) -> None: ...
    def set_panda(self) -> None: ...
    def set_hardware(self, num_transforms: int, indexed_transforms: bool) -> None: ...
    def output(self, out: ostream) -> None: ...
    getAnimationType = get_animation_type
    getNumTransforms = get_num_transforms
    getIndexedTransforms = get_indexed_transforms
    setNone = set_none
    setPanda = set_panda
    setHardware = set_hardware

@final
class InternalName(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def parent(self) -> InternalName: ...
    @property
    def name(self) -> str: ...
    @property
    def basename(self) -> str: ...
    @overload
    @staticmethod
    def make(str: Any) -> InternalName: ...
    @overload
    @staticmethod
    def make(name: str, index: int) -> InternalName: ...
    def append(self, basename: str) -> InternalName: ...
    def get_parent(self) -> InternalName: ...
    def get_name(self) -> str: ...
    def join(self, sep: str) -> str: ...
    def get_basename(self) -> str: ...
    def find_ancestor(self, basename: str) -> int: ...
    def get_ancestor(self, n: int) -> InternalName: ...
    def get_top(self) -> InternalName: ...
    def get_net_basename(self, n: int) -> str: ...
    def output(self, out: ostream) -> None: ...
    @staticmethod
    def get_root() -> InternalName: ...
    @staticmethod
    def get_error() -> InternalName: ...
    @staticmethod
    def get_vertex() -> InternalName: ...
    @staticmethod
    def get_normal() -> InternalName: ...
    @staticmethod
    def get_tangent() -> InternalName: ...
    @staticmethod
    def get_tangent_name(name: str) -> InternalName: ...
    @staticmethod
    def get_binormal() -> InternalName: ...
    @staticmethod
    def get_binormal_name(name: str) -> InternalName: ...
    @staticmethod
    def get_texcoord() -> InternalName: ...
    @staticmethod
    def get_texcoord_name(name: str) -> InternalName: ...
    @staticmethod
    def get_color() -> InternalName: ...
    @staticmethod
    def get_rotate() -> InternalName: ...
    @staticmethod
    def get_size() -> InternalName: ...
    @staticmethod
    def get_aspect_ratio() -> InternalName: ...
    @staticmethod
    def get_transform_blend() -> InternalName: ...
    @staticmethod
    def get_transform_weight() -> InternalName: ...
    @staticmethod
    def get_transform_index() -> InternalName: ...
    @staticmethod
    def get_morph(column: InternalName, slider: str) -> InternalName: ...
    @staticmethod
    def get_index() -> InternalName: ...
    @staticmethod
    def get_world() -> InternalName: ...
    @staticmethod
    def get_camera() -> InternalName: ...
    @staticmethod
    def get_model() -> InternalName: ...
    @staticmethod
    def get_view() -> InternalName: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getParent = get_parent
    getName = get_name
    getBasename = get_basename
    findAncestor = find_ancestor
    getAncestor = get_ancestor
    getTop = get_top
    getNetBasename = get_net_basename
    getRoot = get_root
    getError = get_error
    getVertex = get_vertex
    getNormal = get_normal
    getTangent = get_tangent
    getTangentName = get_tangent_name
    getBinormal = get_binormal
    getBinormalName = get_binormal_name
    getTexcoord = get_texcoord
    getTexcoordName = get_texcoord_name
    getColor = get_color
    getRotate = get_rotate
    getSize = get_size
    getAspectRatio = get_aspect_ratio
    getTransformBlend = get_transform_blend
    getTransformWeight = get_transform_weight
    getTransformIndex = get_transform_index
    getMorph = get_morph
    getIndex = get_index
    getWorld = get_world
    getCamera = get_camera
    getModel = get_model
    getView = get_view
    getClassType = get_class_type

class GeomVertexColumn(GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, copy: GeomVertexColumn) -> None: ...
    @overload
    def __init__(self, name: InternalName, num_components: int, numeric_type: _GeomEnums_NumericType, contents: _GeomEnums_Contents, start: int, column_alignment: int = ..., num_elements: int = ..., element_stride: int = ...) -> None: ...
    def assign(self, copy: GeomVertexColumn) -> GeomVertexColumn: ...
    def get_name(self) -> InternalName: ...
    def get_num_components(self) -> int: ...
    def get_num_values(self) -> int: ...
    def get_num_elements(self) -> int: ...
    def get_numeric_type(self) -> _GeomEnums_NumericType: ...
    def get_contents(self) -> _GeomEnums_Contents: ...
    def get_start(self) -> int: ...
    def get_column_alignment(self) -> int: ...
    def get_element_stride(self) -> int: ...
    def get_component_bytes(self) -> int: ...
    def get_total_bytes(self) -> int: ...
    def has_homogeneous_coord(self) -> bool: ...
    def overlaps_with(self, start_byte: int, num_bytes: int) -> bool: ...
    def is_bytewise_equivalent(self, other: GeomVertexColumn) -> bool: ...
    def set_name(self, name: InternalName) -> None: ...
    def set_num_components(self, num_components: int) -> None: ...
    def set_numeric_type(self, numeric_type: _GeomEnums_NumericType) -> None: ...
    def set_contents(self, contents: _GeomEnums_Contents) -> None: ...
    def set_start(self, start: int) -> None: ...
    def set_column_alignment(self, column_alignment: int) -> None: ...
    def output(self, out: ostream) -> None: ...
    getName = get_name
    getNumComponents = get_num_components
    getNumValues = get_num_values
    getNumElements = get_num_elements
    getNumericType = get_numeric_type
    getContents = get_contents
    getStart = get_start
    getColumnAlignment = get_column_alignment
    getElementStride = get_element_stride
    getComponentBytes = get_component_bytes
    getTotalBytes = get_total_bytes
    hasHomogeneousCoord = has_homogeneous_coord
    overlapsWith = overlaps_with
    isBytewiseEquivalent = is_bytewise_equivalent
    setName = set_name
    setNumComponents = set_num_components
    setNumericType = set_numeric_type
    setContents = set_contents
    setStart = set_start
    setColumnAlignment = set_column_alignment

@final
class GeomVertexArrayFormat(TypedWritableReferenceCount, GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    stride: int
    pad_to: int
    divisor: int
    @property
    def registered(self) -> bool: ...
    @property
    def total_bytes(self) -> int: ...
    @property
    def columns(self) -> Sequence[GeomVertexColumn]: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: GeomVertexArrayFormat) -> None: ...
    @overload
    def __init__(self, name0: InternalName, num_components0: int, numeric_type0: _GeomEnums_NumericType, contents0: _GeomEnums_Contents) -> None: ...
    @overload
    def __init__(self, name0: InternalName, num_components0: int, numeric_type0: _GeomEnums_NumericType, contents0: _GeomEnums_Contents, name1: InternalName, num_components1: int, numeric_type1: _GeomEnums_NumericType, contents1: _GeomEnums_Contents) -> None: ...
    @overload
    def __init__(self, name0: InternalName, num_components0: int, numeric_type0: _GeomEnums_NumericType, contents0: _GeomEnums_Contents, name1: InternalName, num_components1: int, numeric_type1: _GeomEnums_NumericType, contents1: _GeomEnums_Contents, name2: InternalName, num_components2: int, numeric_type2: _GeomEnums_NumericType, contents2: _GeomEnums_Contents) -> None: ...
    @overload
    def __init__(self, name0: InternalName, num_components0: int, numeric_type0: _GeomEnums_NumericType, contents0: _GeomEnums_Contents, name1: InternalName, num_components1: int, numeric_type1: _GeomEnums_NumericType, contents1: _GeomEnums_Contents, name2: InternalName, num_components2: int, numeric_type2: _GeomEnums_NumericType, contents2: _GeomEnums_Contents, name3: InternalName, num_components3: int, numeric_type3: _GeomEnums_NumericType, contents3: _GeomEnums_Contents) -> None: ...
    def upcast_to_TypedWritableReferenceCount(self) -> TypedWritableReferenceCount: ...
    def upcast_to_GeomEnums(self) -> GeomEnums: ...
    def assign(self, copy: GeomVertexArrayFormat) -> GeomVertexArrayFormat: ...
    def unref(self) -> bool: ...
    def is_registered(self) -> bool: ...
    @staticmethod
    def register_format(format: GeomVertexArrayFormat) -> GeomVertexArrayFormat: ...
    def get_stride(self) -> int: ...
    def set_stride(self, stride: int) -> None: ...
    def get_pad_to(self) -> int: ...
    def set_pad_to(self, pad_to: int) -> None: ...
    def get_divisor(self) -> int: ...
    def set_divisor(self, divisor: int) -> None: ...
    def get_total_bytes(self) -> int: ...
    @overload
    def add_column(self, column: GeomVertexColumn) -> int: ...
    @overload
    def add_column(self, name: InternalName, num_components: int, numeric_type: _GeomEnums_NumericType, contents: _GeomEnums_Contents, start: int = ..., column_alignment: int = ...) -> int: ...
    def remove_column(self, name: InternalName) -> None: ...
    def clear_columns(self) -> None: ...
    def pack_columns(self) -> None: ...
    def align_columns_for_animation(self) -> None: ...
    def get_num_columns(self) -> int: ...
    @overload
    def get_column(self, name: InternalName) -> GeomVertexColumn: ...
    @overload
    def get_column(self, i: int) -> GeomVertexColumn: ...
    @overload
    def get_column(self, start_byte: int, num_bytes: int) -> GeomVertexColumn: ...
    def has_column(self, name: InternalName) -> bool: ...
    def is_data_subset_of(self, other: GeomVertexArrayFormat) -> bool: ...
    def count_unused_space(self) -> int: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def write_with_data(self, out: ostream, indent_level: int, array_data: GeomVertexArrayData) -> None: ...
    def get_format_string(self, pad: bool = ...) -> str: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_columns(self) -> tuple[GeomVertexColumn, ...]: ...
    upcastToTypedWritableReferenceCount = upcast_to_TypedWritableReferenceCount
    upcastToGeomEnums = upcast_to_GeomEnums
    isRegistered = is_registered
    registerFormat = register_format
    getStride = get_stride
    setStride = set_stride
    getPadTo = get_pad_to
    setPadTo = set_pad_to
    getDivisor = get_divisor
    setDivisor = set_divisor
    getTotalBytes = get_total_bytes
    addColumn = add_column
    removeColumn = remove_column
    clearColumns = clear_columns
    packColumns = pack_columns
    alignColumnsForAnimation = align_columns_for_animation
    getNumColumns = get_num_columns
    getColumn = get_column
    hasColumn = has_column
    isDataSubsetOf = is_data_subset_of
    countUnusedSpace = count_unused_space
    writeWithData = write_with_data
    getFormatString = get_format_string
    getClassType = get_class_type
    getColumns = get_columns

@final
class GeomVertexFormat(TypedWritableReferenceCount, GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    animation: GeomVertexAnimationSpec
    arrays: Sequence[GeomVertexArrayFormat]
    @property
    def registered(self) -> bool: ...
    @property
    def points(self) -> Sequence[InternalName]: ...
    @property
    def vectors(self) -> Sequence[InternalName]: ...
    @property
    def columns(self) -> Mapping[Any, GeomVertexColumn]: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, array_format: GeomVertexArrayFormat) -> None: ...
    @overload
    def __init__(self, copy: GeomVertexFormat) -> None: ...
    def upcast_to_TypedWritableReferenceCount(self) -> TypedWritableReferenceCount: ...
    def upcast_to_GeomEnums(self) -> GeomEnums: ...
    def assign(self, copy: GeomVertexFormat) -> GeomVertexFormat: ...
    def unref(self) -> bool: ...
    def is_registered(self) -> bool: ...
    @staticmethod
    def register_format(format: GeomVertexArrayFormat | GeomVertexFormat) -> GeomVertexFormat: ...
    def get_animation(self) -> GeomVertexAnimationSpec: ...
    def set_animation(self, animation: GeomVertexAnimationSpec) -> None: ...
    def get_post_animated_format(self) -> GeomVertexFormat: ...
    def get_union_format(self, other: GeomVertexFormat) -> GeomVertexFormat: ...
    def get_num_arrays(self) -> int: ...
    def get_array(self, array: int) -> GeomVertexArrayFormat: ...
    def modify_array(self, array: int) -> GeomVertexArrayFormat: ...
    def set_array(self, array: int, format: GeomVertexArrayFormat) -> None: ...
    def remove_array(self, array: int) -> None: ...
    def add_array(self, array_format: GeomVertexArrayFormat) -> int: ...
    def insert_array(self, array: int, array_format: GeomVertexArrayFormat) -> None: ...
    def clear_arrays(self) -> None: ...
    def remove_empty_arrays(self) -> None: ...
    def get_num_columns(self) -> int: ...
    @overload
    def get_array_with(self, name: InternalName) -> int: ...
    @overload
    def get_array_with(self, i: int) -> int: ...
    @overload
    def get_column(self, name: InternalName) -> GeomVertexColumn: ...
    @overload
    def get_column(self, i: int) -> GeomVertexColumn: ...
    def has_column(self, name: InternalName) -> bool: ...
    def get_column_name(self, i: int) -> InternalName: ...
    def remove_column(self, name: InternalName, keep_empty_array: bool = ...) -> None: ...
    def pack_columns(self) -> None: ...
    def align_columns_for_animation(self) -> None: ...
    def maybe_align_columns_for_animation(self) -> None: ...
    def get_num_points(self) -> int: ...
    def get_point(self, n: int) -> InternalName: ...
    def get_num_vectors(self) -> int: ...
    def get_vector(self, n: int) -> InternalName: ...
    def get_num_texcoords(self) -> int: ...
    def get_texcoord(self, n: int) -> InternalName: ...
    def get_num_morphs(self) -> int: ...
    def get_morph_slider(self, n: int) -> InternalName: ...
    def get_morph_base(self, n: int) -> InternalName: ...
    def get_morph_delta(self, n: int) -> InternalName: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def write_with_data(self, out: ostream, indent_level: int, data: GeomVertexData) -> None: ...
    @staticmethod
    def get_empty() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3n3() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3t2() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3n3t2() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3cp() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3cpt2() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3n3cp() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3n3cpt2() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3c4() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3c4t2() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3n3c4() -> GeomVertexFormat: ...
    @staticmethod
    def get_v3n3c4t2() -> GeomVertexFormat: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_arrays(self) -> tuple[GeomVertexArrayFormat, ...]: ...
    def get_columns(self) -> tuple[GeomVertexColumn, ...]: ...
    def get_points(self) -> tuple[InternalName, ...]: ...
    def get_vectors(self) -> tuple[InternalName, ...]: ...
    def get_texcoords(self) -> tuple[InternalName, ...]: ...
    def get_morph_sliders(self) -> tuple[InternalName, ...]: ...
    def get_morph_bases(self) -> tuple[InternalName, ...]: ...
    def get_morph_deltas(self) -> tuple[InternalName, ...]: ...
    upcastToTypedWritableReferenceCount = upcast_to_TypedWritableReferenceCount
    upcastToGeomEnums = upcast_to_GeomEnums
    isRegistered = is_registered
    registerFormat = register_format
    getAnimation = get_animation
    setAnimation = set_animation
    getPostAnimatedFormat = get_post_animated_format
    getUnionFormat = get_union_format
    getNumArrays = get_num_arrays
    getArray = get_array
    modifyArray = modify_array
    setArray = set_array
    removeArray = remove_array
    addArray = add_array
    insertArray = insert_array
    clearArrays = clear_arrays
    removeEmptyArrays = remove_empty_arrays
    getNumColumns = get_num_columns
    getArrayWith = get_array_with
    getColumn = get_column
    hasColumn = has_column
    getColumnName = get_column_name
    removeColumn = remove_column
    packColumns = pack_columns
    alignColumnsForAnimation = align_columns_for_animation
    maybeAlignColumnsForAnimation = maybe_align_columns_for_animation
    getNumPoints = get_num_points
    getPoint = get_point
    getNumVectors = get_num_vectors
    getVector = get_vector
    getNumTexcoords = get_num_texcoords
    getTexcoord = get_texcoord
    getNumMorphs = get_num_morphs
    getMorphSlider = get_morph_slider
    getMorphBase = get_morph_base
    getMorphDelta = get_morph_delta
    writeWithData = write_with_data
    getEmpty = get_empty
    getV3 = get_v3
    getV3n3 = get_v3n3
    getV3t2 = get_v3t2
    getV3n3t2 = get_v3n3t2
    getV3cp = get_v3cp
    getV3cpt2 = get_v3cpt2
    getV3n3cp = get_v3n3cp
    getV3n3cpt2 = get_v3n3cpt2
    getV3c4 = get_v3c4
    getV3c4t2 = get_v3c4t2
    getV3n3c4 = get_v3n3c4
    getV3n3c4t2 = get_v3n3c4t2
    getClassType = get_class_type
    getArrays = get_arrays
    getColumns = get_columns
    getPoints = get_points
    getVectors = get_vectors
    getTexcoords = get_texcoords
    getMorphSliders = get_morph_sliders
    getMorphBases = get_morph_bases
    getMorphDeltas = get_morph_deltas

class SimpleLru(Namable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, name: str, max_size: int) -> None: ...
    def upcast_to_Namable(self) -> Namable: ...
    def get_total_size(self) -> int: ...
    def get_max_size(self) -> int: ...
    def set_max_size(self, max_size: int) -> None: ...
    def count_active_size(self) -> int: ...
    def consider_evict(self) -> None: ...
    def evict_to(self, target_size: int) -> None: ...
    def begin_epoch(self) -> None: ...
    def validate(self) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    upcastToNamable = upcast_to_Namable
    getTotalSize = get_total_size
    getMaxSize = get_max_size
    setMaxSize = set_max_size
    countActiveSize = count_active_size
    considerEvict = consider_evict
    evictTo = evict_to
    beginEpoch = begin_epoch

class SimpleLruPage:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, copy: SimpleLruPage) -> None: ...
    @overload
    def __init__(self, lru_size: int) -> None: ...
    def assign(self, copy: SimpleLruPage) -> SimpleLruPage: ...
    def get_lru(self) -> SimpleLru: ...
    def enqueue_lru(self, lru: SimpleLru) -> None: ...
    def dequeue_lru(self) -> None: ...
    @overload
    def mark_used_lru(self) -> None: ...
    @overload
    def mark_used_lru(self, lru: SimpleLru) -> None: ...
    def get_lru_size(self) -> int: ...
    def set_lru_size(self, lru_size: int) -> None: ...
    def evict_lru(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    getLru = get_lru
    enqueueLru = enqueue_lru
    dequeueLru = dequeue_lru
    markUsedLru = mark_used_lru
    getLruSize = get_lru_size
    setLruSize = set_lru_size
    evictLru = evict_lru

class SimpleAllocator:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, max_size: int, lock: Mutex) -> None: ...
    def alloc(self, size: int, alignment: int = ...) -> SimpleAllocatorBlock: ...
    def is_empty(self) -> bool: ...
    def get_total_size(self) -> int: ...
    def get_max_size(self) -> int: ...
    def set_max_size(self, max_size: int) -> None: ...
    def get_contiguous(self) -> int: ...
    def get_first_block(self) -> SimpleAllocatorBlock: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    isEmpty = is_empty
    getTotalSize = get_total_size
    getMaxSize = get_max_size
    setMaxSize = set_max_size
    getContiguous = get_contiguous
    getFirstBlock = get_first_block

class SimpleAllocatorBlock:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def free(self) -> None: ...
    def get_allocator(self) -> SimpleAllocator: ...
    def get_start(self) -> int: ...
    def get_size(self) -> int: ...
    def is_free(self) -> bool: ...
    def get_max_size(self) -> int: ...
    def realloc(self, size: int) -> bool: ...
    def get_next_block(self) -> SimpleAllocatorBlock: ...
    def output(self, out: ostream) -> None: ...
    getAllocator = get_allocator
    getStart = get_start
    getSize = get_size
    isFree = is_free
    getMaxSize = get_max_size
    getNextBlock = get_next_block

class VertexDataSaveFile(SimpleAllocator):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def is_valid(self) -> bool: ...
    def get_total_file_size(self) -> int: ...
    def get_used_file_size(self) -> int: ...
    isValid = is_valid
    getTotalFileSize = get_total_file_size
    getUsedFileSize = get_used_file_size

class VertexDataPage(SimpleAllocator, SimpleLruPage):
    DtoolClassDict: ClassVar[dict[str, Any]]
    RC_resident: ClassVar[Literal[0]]
    RC_compressed: ClassVar[Literal[1]]
    RC_disk: ClassVar[Literal[2]]
    RC_end_of_list: ClassVar[Literal[3]]
    @property
    def save_file(self) -> VertexDataSaveFile: ...
    def upcast_to_SimpleAllocator(self) -> SimpleAllocator: ...
    def upcast_to_SimpleLruPage(self) -> SimpleLruPage: ...
    def get_ram_class(self) -> _VertexDataPage_RamClass: ...
    def get_pending_ram_class(self) -> _VertexDataPage_RamClass: ...
    def request_resident(self) -> None: ...
    def alloc(self, size: int) -> VertexDataBlock: ...
    def get_first_block(self) -> VertexDataBlock: ...
    def get_book(self) -> VertexDataBook: ...
    @staticmethod
    def get_global_lru(rclass: _VertexDataPage_RamClass) -> SimpleLru: ...
    @staticmethod
    def get_pending_lru() -> SimpleLru: ...
    @staticmethod
    def get_save_file() -> VertexDataSaveFile: ...
    def save_to_disk(self) -> bool: ...
    @staticmethod
    def get_num_threads() -> int: ...
    @staticmethod
    def get_num_pending_reads() -> int: ...
    @staticmethod
    def get_num_pending_writes() -> int: ...
    @staticmethod
    def stop_threads() -> None: ...
    @staticmethod
    def flush_threads() -> None: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToSimpleAllocator = upcast_to_SimpleAllocator
    upcastToSimpleLruPage = upcast_to_SimpleLruPage
    getRamClass = get_ram_class
    getPendingRamClass = get_pending_ram_class
    requestResident = request_resident
    getFirstBlock = get_first_block
    getBook = get_book
    getGlobalLru = get_global_lru
    getPendingLru = get_pending_lru
    getSaveFile = get_save_file
    saveToDisk = save_to_disk
    getNumThreads = get_num_threads
    getNumPendingReads = get_num_pending_reads
    getNumPendingWrites = get_num_pending_writes
    stopThreads = stop_threads
    flushThreads = flush_threads
    getClassType = get_class_type
    RCResident = RC_resident
    RCCompressed = RC_compressed
    RCDisk = RC_disk
    RCEndOfList = RC_end_of_list

class VertexDataBook:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, block_size: int) -> None: ...
    def alloc(self, size: int) -> VertexDataBlock: ...
    def get_num_pages(self) -> int: ...
    @overload
    def count_total_page_size(self) -> int: ...
    @overload
    def count_total_page_size(self, ram_class: _VertexDataPage_RamClass) -> int: ...
    @overload
    def count_allocated_size(self) -> int: ...
    @overload
    def count_allocated_size(self, ram_class: _VertexDataPage_RamClass) -> int: ...
    def save_to_disk(self) -> None: ...
    getNumPages = get_num_pages
    countTotalPageSize = count_total_page_size
    countAllocatedSize = count_allocated_size
    saveToDisk = save_to_disk

class VertexDataBlock(SimpleAllocatorBlock, ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def upcast_to_SimpleAllocatorBlock(self) -> SimpleAllocatorBlock: ...
    def upcast_to_ReferenceCount(self) -> ReferenceCount: ...
    def get_page(self) -> VertexDataPage: ...
    def get_next_block(self) -> VertexDataBlock: ...
    upcastToSimpleAllocatorBlock = upcast_to_SimpleAllocatorBlock
    upcastToReferenceCount = upcast_to_ReferenceCount
    getPage = get_page
    getNextBlock = get_next_block

class GeomVertexArrayData(CopyOnWriteObject, SimpleLruPage, GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    usage_hint: _GeomEnums_UsageHint
    @property
    def array_format(self) -> GeomVertexArrayFormat: ...
    @property
    def data_size_bytes(self) -> int: ...
    @property
    def modified(self) -> UpdateSeq: ...
    @overload
    def __init__(self, copy: GeomVertexArrayData) -> None: ...
    @overload
    def __init__(self, array_format: GeomVertexArrayFormat, usage_hint: _GeomEnums_UsageHint) -> None: ...
    def upcast_to_CopyOnWriteObject(self) -> CopyOnWriteObject: ...
    def upcast_to_SimpleLruPage(self) -> SimpleLruPage: ...
    def upcast_to_GeomEnums(self) -> GeomEnums: ...
    def assign(self, copy: GeomVertexArrayData) -> GeomVertexArrayData: ...
    def compare_to(self, other: GeomVertexArrayData) -> int: ...
    def get_array_format(self) -> GeomVertexArrayFormat: ...
    def get_usage_hint(self) -> _GeomEnums_UsageHint: ...
    def set_usage_hint(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    def has_column(self, name: InternalName) -> bool: ...
    def get_num_rows(self) -> int: ...
    def set_num_rows(self, n: int) -> bool: ...
    def unclean_set_num_rows(self, n: int) -> bool: ...
    def reserve_num_rows(self, n: int) -> bool: ...
    def clear_rows(self) -> None: ...
    def get_data_size_bytes(self) -> int: ...
    def get_modified(self) -> UpdateSeq: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def request_resident(self, current_thread: Thread = ...) -> bool: ...
    def get_handle(self, current_thread: Thread = ...) -> GeomVertexArrayDataHandle: ...
    def modify_handle(self, current_thread: Thread = ...) -> GeomVertexArrayDataHandle: ...
    def prepare(self, prepared_objects: PreparedGraphicsObjects) -> None: ...
    def is_prepared(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def prepare_now(self, prepared_objects: PreparedGraphicsObjects, gsg: GraphicsStateGuardianBase) -> VertexBufferContext: ...
    def release(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def release_all(self) -> int: ...
    @staticmethod
    def get_independent_lru() -> SimpleLru: ...
    @staticmethod
    def get_small_lru() -> SimpleLru: ...
    @staticmethod
    def lru_epoch() -> None: ...
    @staticmethod
    def get_book() -> VertexDataBook: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToCopyOnWriteObject = upcast_to_CopyOnWriteObject
    upcastToSimpleLruPage = upcast_to_SimpleLruPage
    upcastToGeomEnums = upcast_to_GeomEnums
    compareTo = compare_to
    getArrayFormat = get_array_format
    getUsageHint = get_usage_hint
    setUsageHint = set_usage_hint
    hasColumn = has_column
    getNumRows = get_num_rows
    setNumRows = set_num_rows
    uncleanSetNumRows = unclean_set_num_rows
    reserveNumRows = reserve_num_rows
    clearRows = clear_rows
    getDataSizeBytes = get_data_size_bytes
    getModified = get_modified
    requestResident = request_resident
    getHandle = get_handle
    modifyHandle = modify_handle
    isPrepared = is_prepared
    prepareNow = prepare_now
    releaseAll = release_all
    getIndependentLru = get_independent_lru
    getSmallLru = get_small_lru
    lruEpoch = lru_epoch
    getBook = get_book
    getClassType = get_class_type

class GeomVertexArrayDataHandle(ReferenceCount, GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def object(self) -> GeomVertexArrayData: ...
    @property
    def array_format(self) -> GeomVertexArrayFormat: ...
    @property
    def usage_hint(self) -> _GeomEnums_UsageHint: ...
    @property
    def data_size_bytes(self) -> int: ...
    @property
    def modified(self) -> UpdateSeq: ...
    def upcast_to_ReferenceCount(self) -> ReferenceCount: ...
    def upcast_to_GeomEnums(self) -> GeomEnums: ...
    def get_object(self) -> GeomVertexArrayData: ...
    def get_array_format(self) -> GeomVertexArrayFormat: ...
    def get_usage_hint(self) -> _GeomEnums_UsageHint: ...
    def get_num_rows(self) -> int: ...
    def set_num_rows(self, n: int) -> bool: ...
    def unclean_set_num_rows(self, n: int) -> bool: ...
    def reserve_num_rows(self, n: int) -> bool: ...
    def clear_rows(self) -> None: ...
    def get_data_size_bytes(self) -> int: ...
    def get_modified(self) -> UpdateSeq: ...
    def request_resident(self) -> bool: ...
    def prepare_now(self, prepared_objects: PreparedGraphicsObjects, gsg: GraphicsStateGuardianBase) -> VertexBufferContext: ...
    @overload
    def copy_data_from(self, other: GeomVertexArrayDataHandle) -> None: ...
    @overload
    def copy_data_from(self, buffer: Any) -> None: ...
    @overload
    def copy_subdata_from(self, to_start: int, to_size: int, buffer: Any) -> None: ...
    @overload
    def copy_subdata_from(self, to_start: int, to_size: int, other: GeomVertexArrayDataHandle, from_start: int, from_size: int) -> None: ...
    @overload
    def copy_subdata_from(self, to_start: int, to_size: int, buffer: Any, from_start: int, from_size: int) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: bytes) -> None: ...
    def get_subdata(self, start: int, size: int) -> bytes: ...
    def set_subdata(self, start: int, size: int, data: bytes) -> None: ...
    def mark_used(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToReferenceCount = upcast_to_ReferenceCount
    upcastToGeomEnums = upcast_to_GeomEnums
    getObject = get_object
    getArrayFormat = get_array_format
    getUsageHint = get_usage_hint
    getNumRows = get_num_rows
    setNumRows = set_num_rows
    uncleanSetNumRows = unclean_set_num_rows
    reserveNumRows = reserve_num_rows
    clearRows = clear_rows
    getDataSizeBytes = get_data_size_bytes
    getModified = get_modified
    requestResident = request_resident
    prepareNow = prepare_now
    copyDataFrom = copy_data_from
    copySubdataFrom = copy_subdata_from
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    markUsed = mark_used
    getClassType = get_class_type

class GeomCacheManager:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def set_max_size(self, max_size: int) -> None: ...
    def get_max_size(self) -> int: ...
    def get_total_size(self) -> int: ...
    def flush(self) -> None: ...
    @staticmethod
    def get_global_ptr() -> GeomCacheManager: ...
    setMaxSize = set_max_size
    getMaxSize = get_max_size
    getTotalSize = get_total_size
    getGlobalPtr = get_global_ptr

class VertexTransform(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def modified(self) -> UpdateSeq: ...
    def get_matrix(self, matrix: _Mat4f) -> None: ...
    def mult_matrix(self, result: _Mat4f, previous: _Mat4f) -> None: ...
    def accumulate_matrix(self, accum: _Mat4f, weight: float) -> None: ...
    def get_modified(self, current_thread: Thread = ...) -> UpdateSeq: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    @staticmethod
    def get_next_modified(current_thread: Thread) -> UpdateSeq: ...
    @staticmethod
    def get_global_modified(current_thread: Thread) -> UpdateSeq: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getMatrix = get_matrix
    multMatrix = mult_matrix
    accumulateMatrix = accumulate_matrix
    getModified = get_modified
    getNextModified = get_next_modified
    getGlobalModified = get_global_modified
    getClassType = get_class_type

class TransformTable(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    transforms: Sequence[VertexTransform]
    @property
    def registered(self) -> bool: ...
    @property
    def modified(self) -> UpdateSeq: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: TransformTable) -> None: ...
    def assign(self, copy: TransformTable) -> TransformTable: ...
    def is_registered(self) -> bool: ...
    @staticmethod
    def register_table(table: TransformTable) -> TransformTable: ...
    def get_num_transforms(self) -> int: ...
    def get_transform(self, n: int) -> VertexTransform: ...
    def get_modified(self, current_thread: Thread = ...) -> UpdateSeq: ...
    def set_transform(self, n: int, transform: VertexTransform) -> None: ...
    def insert_transform(self, n: int, transform: VertexTransform) -> None: ...
    def remove_transform(self, n: int) -> None: ...
    def add_transform(self, transform: VertexTransform) -> int: ...
    def write(self, out: ostream) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_transforms(self) -> tuple[VertexTransform, ...]: ...
    isRegistered = is_registered
    registerTable = register_table
    getNumTransforms = get_num_transforms
    getTransform = get_transform
    getModified = get_modified
    setTransform = set_transform
    insertTransform = insert_transform
    removeTransform = remove_transform
    addTransform = add_transform
    getClassType = get_class_type
    getTransforms = get_transforms

class TransformBlend:
    DtoolClassDict: ClassVar[dict[str, Any]]
    transforms: Sequence[VertexTransform]
    @property
    def weights(self) -> Mapping[Any, float]: ...
    @property
    def modified(self) -> UpdateSeq: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: TransformBlend) -> None: ...
    @overload
    def __init__(self, transform0: VertexTransform, weight0: float) -> None: ...
    @overload
    def __init__(self, transform0: VertexTransform, weight0: float, transform1: VertexTransform, weight1: float) -> None: ...
    @overload
    def __init__(self, transform0: VertexTransform, weight0: float, transform1: VertexTransform, weight1: float, transform2: VertexTransform, weight2: float) -> None: ...
    @overload
    def __init__(self, transform0: VertexTransform, weight0: float, transform1: VertexTransform, weight1: float, transform2: VertexTransform, weight2: float, transform3: VertexTransform, weight3: float) -> None: ...
    def __lt__(self, other: TransformBlend) -> bool: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __le__(self, other: TransformBlend) -> bool: ...
    def assign(self, copy: TransformBlend) -> TransformBlend: ...
    def compare_to(self, other: TransformBlend) -> int: ...
    def add_transform(self, transform: VertexTransform, weight: float) -> None: ...
    @overload
    def remove_transform(self, transform: VertexTransform) -> None: ...
    @overload
    def remove_transform(self, n: int) -> None: ...
    def limit_transforms(self, max_transforms: int) -> None: ...
    def normalize_weights(self) -> None: ...
    def has_transform(self, transform: VertexTransform) -> bool: ...
    @overload
    def get_weight(self, transform: VertexTransform) -> float: ...
    @overload
    def get_weight(self, n: int) -> float: ...
    def get_num_transforms(self) -> int: ...
    def get_transform(self, n: int) -> VertexTransform: ...
    def set_transform(self, n: int, transform: VertexTransform) -> None: ...
    def set_weight(self, n: int, weight: float) -> None: ...
    def update_blend(self, current_thread: Thread) -> None: ...
    def get_blend(self, result: _Mat4f, current_thread: Thread) -> None: ...
    def transform_point(self, point: _Vec3d | _Vec3f | _Vec4d | _Vec4f, current_thread: Thread) -> None: ...
    def transform_vector(self, point: _Vec3d | _Vec3f, current_thread: Thread) -> None: ...
    def get_modified(self, current_thread: Thread = ...) -> UpdateSeq: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_transforms(self) -> tuple[VertexTransform, ...]: ...
    compareTo = compare_to
    addTransform = add_transform
    removeTransform = remove_transform
    limitTransforms = limit_transforms
    normalizeWeights = normalize_weights
    hasTransform = has_transform
    getWeight = get_weight
    getNumTransforms = get_num_transforms
    getTransform = get_transform
    setTransform = set_transform
    setWeight = set_weight
    updateBlend = update_blend
    getBlend = get_blend
    transformPoint = transform_point
    transformVector = transform_vector
    getModified = get_modified
    getClassType = get_class_type
    getTransforms = get_transforms

class TransformBlendTable(CopyOnWriteObject):
    DtoolClassDict: ClassVar[dict[str, Any]]
    blends: Sequence[TransformBlend]
    rows: SparseArray
    @property
    def modified(self) -> UpdateSeq: ...
    @property
    def num_transforms(self) -> int: ...
    @property
    def max_simultaneous_transforms(self) -> int: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: TransformBlendTable) -> None: ...
    def assign(self, copy: TransformBlendTable) -> TransformBlendTable: ...
    def get_num_blends(self) -> int: ...
    def get_blend(self, n: int) -> TransformBlend: ...
    def get_modified(self, current_thread: Thread = ...) -> UpdateSeq: ...
    def set_blend(self, n: int, blend: TransformBlend) -> None: ...
    def remove_blend(self, n: int) -> None: ...
    def add_blend(self, blend: TransformBlend) -> int: ...
    def get_num_transforms(self) -> int: ...
    def get_max_simultaneous_transforms(self) -> int: ...
    def set_rows(self, rows: BitArray | SparseArray) -> None: ...
    def get_rows(self) -> SparseArray: ...
    def modify_rows(self) -> SparseArray: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_blends(self) -> tuple[TransformBlend, ...]: ...
    getNumBlends = get_num_blends
    getBlend = get_blend
    getModified = get_modified
    setBlend = set_blend
    removeBlend = remove_blend
    addBlend = add_blend
    getNumTransforms = get_num_transforms
    getMaxSimultaneousTransforms = get_max_simultaneous_transforms
    setRows = set_rows
    getRows = get_rows
    modifyRows = modify_rows
    getClassType = get_class_type
    getBlends = get_blends

class VertexSlider(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def name(self) -> InternalName: ...
    @property
    def slider(self) -> float: ...
    @property
    def modified(self) -> UpdateSeq: ...
    def get_name(self) -> InternalName: ...
    def get_slider(self) -> float: ...
    def get_modified(self, current_thread: Thread = ...) -> UpdateSeq: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getName = get_name
    getSlider = get_slider
    getModified = get_modified
    getClassType = get_class_type

class SliderTable(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def modified(self) -> UpdateSeq: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: SliderTable) -> None: ...
    def assign(self, copy: SliderTable) -> SliderTable: ...
    def is_registered(self) -> bool: ...
    @staticmethod
    def register_table(table: SliderTable) -> SliderTable: ...
    def get_num_sliders(self) -> int: ...
    def get_slider(self, n: int) -> VertexSlider: ...
    def get_slider_rows(self, n: int) -> SparseArray: ...
    def find_sliders(self, name: InternalName) -> SparseArray: ...
    def has_slider(self, name: InternalName) -> bool: ...
    def is_empty(self) -> bool: ...
    def get_modified(self, current_thread: Thread = ...) -> UpdateSeq: ...
    def set_slider(self, n: int, slider: VertexSlider) -> None: ...
    def set_slider_rows(self, n: int, rows: BitArray | SparseArray) -> None: ...
    def remove_slider(self, n: int) -> None: ...
    def add_slider(self, slider: VertexSlider, rows: BitArray | SparseArray) -> int: ...
    def write(self, out: ostream) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_sliders(self) -> tuple[VertexSlider, ...]: ...
    isRegistered = is_registered
    registerTable = register_table
    getNumSliders = get_num_sliders
    getSlider = get_slider
    getSliderRows = get_slider_rows
    findSliders = find_sliders
    hasSlider = has_slider
    isEmpty = is_empty
    getModified = get_modified
    setSlider = set_slider
    setSliderRows = set_slider_rows
    removeSlider = remove_slider
    addSlider = add_slider
    getClassType = get_class_type
    getSliders = get_sliders

class GeomVertexData(CopyOnWriteObject, GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    name: str
    usage_hint: _GeomEnums_UsageHint
    format: GeomVertexFormat
    arrays: Sequence[GeomVertexArrayData]
    transform_table: TransformTable
    slider_table: SliderTable
    @property
    def num_bytes(self) -> int: ...
    @property
    def modified(self) -> UpdateSeq: ...
    @overload
    def __init__(self, copy: GeomVertexData) -> None: ...
    @overload
    def __init__(self, copy: GeomVertexData, format: GeomVertexFormat) -> None: ...
    @overload
    def __init__(self, name: str, format: GeomVertexFormat, usage_hint: _GeomEnums_UsageHint) -> None: ...
    def upcast_to_CopyOnWriteObject(self) -> CopyOnWriteObject: ...
    def upcast_to_GeomEnums(self) -> GeomEnums: ...
    def assign(self, copy: GeomVertexData) -> GeomVertexData: ...
    def compare_to(self, other: GeomVertexData) -> int: ...
    def get_name(self) -> str: ...
    def set_name(self, name: str) -> None: ...
    def get_usage_hint(self) -> _GeomEnums_UsageHint: ...
    def set_usage_hint(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    def get_format(self) -> GeomVertexFormat: ...
    def set_format(self, format: GeomVertexFormat) -> None: ...
    def unclean_set_format(self, format: GeomVertexFormat) -> None: ...
    def has_column(self, name: InternalName) -> bool: ...
    def get_num_rows(self) -> int: ...
    def set_num_rows(self, n: int) -> bool: ...
    def unclean_set_num_rows(self, n: int) -> bool: ...
    def reserve_num_rows(self, n: int) -> bool: ...
    def clear_rows(self) -> None: ...
    def get_num_arrays(self) -> int: ...
    def get_array(self, i: int) -> GeomVertexArrayData: ...
    def get_array_handle(self, i: int) -> GeomVertexArrayDataHandle: ...
    def modify_array(self, i: int) -> GeomVertexArrayData: ...
    def modify_array_handle(self, i: int) -> GeomVertexArrayDataHandle: ...
    def set_array(self, i: int, array: GeomVertexArrayData) -> None: ...
    def get_transform_table(self) -> TransformTable: ...
    def set_transform_table(self, table: TransformTable) -> None: ...
    def clear_transform_table(self) -> None: ...
    def get_transform_blend_table(self) -> TransformBlendTable: ...
    def modify_transform_blend_table(self) -> TransformBlendTable: ...
    def set_transform_blend_table(self, table: TransformBlendTable) -> None: ...
    def clear_transform_blend_table(self) -> None: ...
    def get_slider_table(self) -> SliderTable: ...
    def set_slider_table(self, table: SliderTable) -> None: ...
    def clear_slider_table(self) -> None: ...
    def get_num_bytes(self) -> int: ...
    def get_modified(self, current_thread: Thread = ...) -> UpdateSeq: ...
    def request_resident(self) -> bool: ...
    def copy_from(self, source: GeomVertexData, keep_data_objects: bool, current_thread: Thread = ...) -> None: ...
    def copy_row_from(self, dest_row: int, source: GeomVertexData, source_row: int, current_thread: Thread) -> None: ...
    def convert_to(self, new_format: GeomVertexFormat) -> GeomVertexData: ...
    @overload
    def scale_color(self, color_scale: _Vec4f) -> GeomVertexData: ...
    @overload
    def scale_color(self, color_scale: _Vec4f, num_components: int, numeric_type: _GeomEnums_NumericType, contents: _GeomEnums_Contents) -> GeomVertexData: ...
    @overload
    def set_color(self, color: _Vec4f) -> GeomVertexData: ...
    @overload
    def set_color(self, color: _Vec4f, num_components: int, numeric_type: _GeomEnums_NumericType, contents: _GeomEnums_Contents) -> GeomVertexData: ...
    def reverse_normals(self) -> GeomVertexData: ...
    def animate_vertices(self, force: bool, current_thread: Thread) -> GeomVertexData: ...
    def clear_animated_vertices(self) -> None: ...
    @overload
    def transform_vertices(self, mat: _Mat4f) -> None: ...
    @overload
    def transform_vertices(self, mat: _Mat4f, rows: BitArray | SparseArray) -> None: ...
    @overload
    def transform_vertices(self, mat: _Mat4f, begin_row: int, end_row: int) -> None: ...
    def replace_column(self, name: InternalName, num_components: int, numeric_type: _GeomEnums_NumericType, contents: _GeomEnums_Contents) -> GeomVertexData: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def describe_vertex(self, out: ostream, row: int) -> None: ...
    def clear_cache(self) -> None: ...
    def clear_cache_stage(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_arrays(self) -> tuple[GeomVertexArrayData, ...]: ...
    upcastToCopyOnWriteObject = upcast_to_CopyOnWriteObject
    upcastToGeomEnums = upcast_to_GeomEnums
    compareTo = compare_to
    getName = get_name
    setName = set_name
    getUsageHint = get_usage_hint
    setUsageHint = set_usage_hint
    getFormat = get_format
    setFormat = set_format
    uncleanSetFormat = unclean_set_format
    hasColumn = has_column
    getNumRows = get_num_rows
    setNumRows = set_num_rows
    uncleanSetNumRows = unclean_set_num_rows
    reserveNumRows = reserve_num_rows
    clearRows = clear_rows
    getNumArrays = get_num_arrays
    getArray = get_array
    getArrayHandle = get_array_handle
    modifyArray = modify_array
    modifyArrayHandle = modify_array_handle
    setArray = set_array
    getTransformTable = get_transform_table
    setTransformTable = set_transform_table
    clearTransformTable = clear_transform_table
    getTransformBlendTable = get_transform_blend_table
    modifyTransformBlendTable = modify_transform_blend_table
    setTransformBlendTable = set_transform_blend_table
    clearTransformBlendTable = clear_transform_blend_table
    getSliderTable = get_slider_table
    setSliderTable = set_slider_table
    clearSliderTable = clear_slider_table
    getNumBytes = get_num_bytes
    getModified = get_modified
    requestResident = request_resident
    copyFrom = copy_from
    copyRowFrom = copy_row_from
    convertTo = convert_to
    scaleColor = scale_color
    setColor = set_color
    reverseNormals = reverse_normals
    animateVertices = animate_vertices
    clearAnimatedVertices = clear_animated_vertices
    transformVertices = transform_vertices
    replaceColumn = replace_column
    describeVertex = describe_vertex
    clearCache = clear_cache
    clearCacheStage = clear_cache_stage
    getClassType = get_class_type
    getArrays = get_arrays

class AnimateVerticesRequest(AsyncTask):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, __param0: AnimateVerticesRequest) -> None: ...
    @overload
    def __init__(self, geom_vertex_data: GeomVertexData) -> None: ...
    def is_ready(self) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    isReady = is_ready
    getClassType = get_class_type

class SavedContext(TypedObject):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class BufferContext(SavedContext):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def object(self) -> TypedWritableReferenceCount: ...
    @property
    def data_size_bytes(self) -> int: ...
    @property
    def modified(self) -> UpdateSeq: ...
    @property
    def active(self) -> bool: ...
    @property
    def resident(self) -> bool: ...
    def upcast_to_SavedContext(self) -> SavedContext: ...
    def get_data_size_bytes(self) -> int: ...
    def get_modified(self) -> UpdateSeq: ...
    def get_active(self) -> bool: ...
    def get_resident(self) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToSavedContext = upcast_to_SavedContext
    getDataSizeBytes = get_data_size_bytes
    getModified = get_modified
    getActive = get_active
    getResident = get_resident
    getClassType = get_class_type

class GeomPrimitive(CopyOnWriteObject, GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def primitive_type(self) -> _GeomEnums_PrimitiveType: ...
    @property
    def geom_rendering(self) -> int: ...
    @property
    def shade_model(self) -> _GeomEnums_ShadeModel: ...
    @property
    def usage_hint(self) -> _GeomEnums_UsageHint: ...
    @property
    def index_type(self) -> _GeomEnums_NumericType: ...
    @property
    def num_bytes(self) -> int: ...
    @property
    def data_size_bytes(self) -> int: ...
    @property
    def modified(self) -> UpdateSeq: ...
    @property
    def index_stride(self) -> int: ...
    @property
    def strip_cut_index(self) -> int: ...
    @property
    def mins(self) -> GeomVertexArrayData: ...
    @property
    def maxs(self) -> GeomVertexArrayData: ...
    @property
    def num_vertices_per_primitive(self) -> int: ...
    @property
    def min_num_vertices_per_primitive(self) -> int: ...
    @property
    def num_unused_vertices_per_primitive(self) -> int: ...
    def upcast_to_CopyOnWriteObject(self) -> CopyOnWriteObject: ...
    def upcast_to_GeomEnums(self) -> GeomEnums: ...
    def assign(self, copy: GeomPrimitive) -> GeomPrimitive: ...
    def make_copy(self) -> GeomPrimitive: ...
    def get_primitive_type(self) -> _GeomEnums_PrimitiveType: ...
    def get_geom_rendering(self) -> int: ...
    def get_shade_model(self) -> _GeomEnums_ShadeModel: ...
    def set_shade_model(self, shade_model: _GeomEnums_ShadeModel) -> None: ...
    def get_usage_hint(self) -> _GeomEnums_UsageHint: ...
    def set_usage_hint(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    def get_index_type(self) -> _GeomEnums_NumericType: ...
    def set_index_type(self, index_type: _GeomEnums_NumericType) -> None: ...
    def is_composite(self) -> bool: ...
    def is_indexed(self) -> bool: ...
    def get_first_vertex(self) -> int: ...
    def get_num_vertices(self) -> int: ...
    def get_vertex(self, i: int) -> int: ...
    def add_vertex(self, vertex: int) -> None: ...
    @overload
    def add_vertices(self, v1: int, v2: int) -> None: ...
    @overload
    def add_vertices(self, v1: int, v2: int, v3: int) -> None: ...
    @overload
    def add_vertices(self, v1: int, v2: int, v3: int, v4: int) -> None: ...
    def add_consecutive_vertices(self, start: int, num_vertices: int) -> None: ...
    def add_next_vertices(self, num_vertices: int) -> None: ...
    def reserve_num_vertices(self, num_vertices: int) -> None: ...
    def close_primitive(self) -> bool: ...
    def clear_vertices(self) -> None: ...
    @overload
    def offset_vertices(self, offset: int) -> None: ...
    @overload
    def offset_vertices(self, offset: int, begin_row: int, end_row: int) -> None: ...
    def make_nonindexed(self, dest: GeomVertexData, source: GeomVertexData) -> None: ...
    def pack_vertices(self, dest: GeomVertexData, source: GeomVertexData) -> None: ...
    def make_indexed(self) -> None: ...
    def get_num_primitives(self) -> int: ...
    def get_primitive_start(self, n: int) -> int: ...
    def get_primitive_end(self, n: int) -> int: ...
    def get_primitive_num_vertices(self, n: int) -> int: ...
    def get_num_used_vertices(self) -> int: ...
    def get_num_faces(self) -> int: ...
    def get_primitive_num_faces(self, n: int) -> int: ...
    def get_min_vertex(self) -> int: ...
    def get_primitive_min_vertex(self, n: int) -> int: ...
    def get_max_vertex(self) -> int: ...
    def get_primitive_max_vertex(self, n: int) -> int: ...
    def decompose(self) -> GeomPrimitive: ...
    def rotate(self) -> GeomPrimitive: ...
    def doubleside(self) -> GeomPrimitive: ...
    def reverse(self) -> GeomPrimitive: ...
    def match_shade_model(self, shade_model: _GeomEnums_ShadeModel) -> GeomPrimitive: ...
    def make_points(self) -> GeomPrimitive: ...
    def make_lines(self) -> GeomPrimitive: ...
    def make_patches(self) -> GeomPrimitive: ...
    def make_adjacency(self) -> GeomPrimitive: ...
    def get_num_bytes(self) -> int: ...
    def get_data_size_bytes(self) -> int: ...
    def get_modified(self) -> UpdateSeq: ...
    def request_resident(self, current_thread: Thread = ...) -> bool: ...
    def check_valid(self, vertex_data: GeomVertexData) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def get_vertices(self) -> GeomVertexArrayData: ...
    def get_vertices_handle(self, current_thread: Thread) -> GeomVertexArrayDataHandle: ...
    def modify_vertices(self, num_vertices: int = ...) -> GeomVertexArrayData: ...
    def modify_vertices_handle(self, current_thread: Thread) -> GeomVertexArrayDataHandle: ...
    def set_vertices(self, vertices: GeomVertexArrayData, num_vertices: int = ...) -> None: ...
    def set_nonindexed_vertices(self, first_vertex: int, num_vertices: int) -> None: ...
    def get_index_stride(self) -> int: ...
    def get_strip_cut_index(self) -> int: ...
    def get_ends(self) -> ConstPointerToArray_int: ...
    def modify_ends(self) -> PointerToArray_int: ...
    def set_ends(self, ends: PointerToArray_int) -> None: ...
    def get_mins(self) -> GeomVertexArrayData: ...
    def get_maxs(self) -> GeomVertexArrayData: ...
    def set_minmax(self, min_vertex: int, max_vertex: int, mins: GeomVertexArrayData, maxs: GeomVertexArrayData) -> None: ...
    def clear_minmax(self) -> None: ...
    def get_num_vertices_per_primitive(self) -> int: ...
    def get_min_num_vertices_per_primitive(self) -> int: ...
    def get_num_unused_vertices_per_primitive(self) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_vertex_list(self) -> tuple[int, ...]: ...
    upcastToCopyOnWriteObject = upcast_to_CopyOnWriteObject
    upcastToGeomEnums = upcast_to_GeomEnums
    makeCopy = make_copy
    getPrimitiveType = get_primitive_type
    getGeomRendering = get_geom_rendering
    getShadeModel = get_shade_model
    setShadeModel = set_shade_model
    getUsageHint = get_usage_hint
    setUsageHint = set_usage_hint
    getIndexType = get_index_type
    setIndexType = set_index_type
    isComposite = is_composite
    isIndexed = is_indexed
    getFirstVertex = get_first_vertex
    getNumVertices = get_num_vertices
    getVertex = get_vertex
    addVertex = add_vertex
    addVertices = add_vertices
    addConsecutiveVertices = add_consecutive_vertices
    addNextVertices = add_next_vertices
    reserveNumVertices = reserve_num_vertices
    closePrimitive = close_primitive
    clearVertices = clear_vertices
    offsetVertices = offset_vertices
    makeNonindexed = make_nonindexed
    packVertices = pack_vertices
    makeIndexed = make_indexed
    getNumPrimitives = get_num_primitives
    getPrimitiveStart = get_primitive_start
    getPrimitiveEnd = get_primitive_end
    getPrimitiveNumVertices = get_primitive_num_vertices
    getNumUsedVertices = get_num_used_vertices
    getNumFaces = get_num_faces
    getPrimitiveNumFaces = get_primitive_num_faces
    getMinVertex = get_min_vertex
    getPrimitiveMinVertex = get_primitive_min_vertex
    getMaxVertex = get_max_vertex
    getPrimitiveMaxVertex = get_primitive_max_vertex
    matchShadeModel = match_shade_model
    makePoints = make_points
    makeLines = make_lines
    makePatches = make_patches
    makeAdjacency = make_adjacency
    getNumBytes = get_num_bytes
    getDataSizeBytes = get_data_size_bytes
    getModified = get_modified
    requestResident = request_resident
    checkValid = check_valid
    getVertices = get_vertices
    getVerticesHandle = get_vertices_handle
    modifyVertices = modify_vertices
    modifyVerticesHandle = modify_vertices_handle
    setVertices = set_vertices
    setNonindexedVertices = set_nonindexed_vertices
    getIndexStride = get_index_stride
    getStripCutIndex = get_strip_cut_index
    getEnds = get_ends
    modifyEnds = modify_ends
    setEnds = set_ends
    getMins = get_mins
    getMaxs = get_maxs
    setMinmax = set_minmax
    clearMinmax = clear_minmax
    getNumVerticesPerPrimitive = get_num_vertices_per_primitive
    getMinNumVerticesPerPrimitive = get_min_num_vertices_per_primitive
    getNumUnusedVerticesPerPrimitive = get_num_unused_vertices_per_primitive
    getClassType = get_class_type
    getVertexList = get_vertex_list

class TextureStage(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    name: str
    sort: int
    priority: int
    texcoord_name: InternalName
    mode: _TextureStage_Mode
    color: LVecBase4f
    rgb_scale: int
    alpha_scale: int
    saved_result: bool
    tex_view_offset: int
    M_modulate: ClassVar[Literal[0]]
    M_decal: ClassVar[Literal[1]]
    M_blend: ClassVar[Literal[2]]
    M_replace: ClassVar[Literal[3]]
    M_add: ClassVar[Literal[4]]
    M_combine: ClassVar[Literal[5]]
    M_blend_color_scale: ClassVar[Literal[6]]
    M_modulate_glow: ClassVar[Literal[7]]
    M_modulate_gloss: ClassVar[Literal[8]]
    M_normal: ClassVar[Literal[9]]
    M_normal_height: ClassVar[Literal[10]]
    M_glow: ClassVar[Literal[11]]
    M_gloss: ClassVar[Literal[12]]
    M_height: ClassVar[Literal[13]]
    M_selector: ClassVar[Literal[14]]
    M_normal_gloss: ClassVar[Literal[15]]
    M_emission: ClassVar[Literal[16]]
    CM_undefined: ClassVar[Literal[0]]
    CM_replace: ClassVar[Literal[1]]
    CM_modulate: ClassVar[Literal[2]]
    CM_add: ClassVar[Literal[3]]
    CM_add_signed: ClassVar[Literal[4]]
    CM_interpolate: ClassVar[Literal[5]]
    CM_subtract: ClassVar[Literal[6]]
    CM_dot3_rgb: ClassVar[Literal[7]]
    CM_dot3_rgba: ClassVar[Literal[8]]
    CS_undefined: ClassVar[Literal[0]]
    CS_texture: ClassVar[Literal[1]]
    CS_constant: ClassVar[Literal[2]]
    CS_primary_color: ClassVar[Literal[3]]
    CS_previous: ClassVar[Literal[4]]
    CS_constant_color_scale: ClassVar[Literal[5]]
    CS_last_saved_result: ClassVar[Literal[6]]
    CO_undefined: ClassVar[Literal[0]]
    CO_src_color: ClassVar[Literal[1]]
    CO_one_minus_src_color: ClassVar[Literal[2]]
    CO_src_alpha: ClassVar[Literal[3]]
    CO_one_minus_src_alpha: ClassVar[Literal[4]]
    @property
    def tangent_name(self) -> InternalName: ...
    @property
    def binormal_name(self) -> InternalName: ...
    @property
    def default(self) -> TextureStage: ...
    @overload
    def __init__(self, copy: TextureStage) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: TextureStage) -> bool: ...
    def __le__(self, other: TextureStage) -> bool: ...
    def assign(self, copy: TextureStage) -> TextureStage: ...
    def set_name(self, name: str) -> None: ...
    def get_name(self) -> str: ...
    def set_sort(self, sort: int) -> None: ...
    def get_sort(self) -> int: ...
    def set_priority(self, priority: int) -> None: ...
    def get_priority(self) -> int: ...
    @overload
    def set_texcoord_name(self, name: InternalName) -> None: ...
    @overload
    def set_texcoord_name(self, texcoord_name: str) -> None: ...
    def get_texcoord_name(self) -> InternalName: ...
    def get_tangent_name(self) -> InternalName: ...
    def get_binormal_name(self) -> InternalName: ...
    def set_mode(self, mode: _TextureStage_Mode) -> None: ...
    def get_mode(self) -> _TextureStage_Mode: ...
    def is_fixed_function(self) -> bool: ...
    def set_color(self, color: _Vec4f) -> None: ...
    def get_color(self) -> LVecBase4f: ...
    def set_rgb_scale(self, rgb_scale: int) -> None: ...
    def get_rgb_scale(self) -> int: ...
    def set_alpha_scale(self, alpha_scale: int) -> None: ...
    def get_alpha_scale(self) -> int: ...
    def set_saved_result(self, saved_result: bool) -> None: ...
    def get_saved_result(self) -> bool: ...
    def set_tex_view_offset(self, tex_view_offset: int) -> None: ...
    def get_tex_view_offset(self) -> int: ...
    @overload
    def set_combine_rgb(self, mode: _TextureStage_CombineMode, source0: _TextureStage_CombineSource, operand0: _TextureStage_CombineOperand) -> None: ...
    @overload
    def set_combine_rgb(self, mode: _TextureStage_CombineMode, source0: _TextureStage_CombineSource, operand0: _TextureStage_CombineOperand, source1: _TextureStage_CombineSource, operand1: _TextureStage_CombineOperand) -> None: ...
    @overload
    def set_combine_rgb(self, mode: _TextureStage_CombineMode, source0: _TextureStage_CombineSource, operand0: _TextureStage_CombineOperand, source1: _TextureStage_CombineSource, operand1: _TextureStage_CombineOperand, source2: _TextureStage_CombineSource, operand2: _TextureStage_CombineOperand) -> None: ...
    def get_combine_rgb_mode(self) -> _TextureStage_CombineMode: ...
    def get_num_combine_rgb_operands(self) -> int: ...
    def get_combine_rgb_source0(self) -> _TextureStage_CombineSource: ...
    def get_combine_rgb_operand0(self) -> _TextureStage_CombineOperand: ...
    def get_combine_rgb_source1(self) -> _TextureStage_CombineSource: ...
    def get_combine_rgb_operand1(self) -> _TextureStage_CombineOperand: ...
    def get_combine_rgb_source2(self) -> _TextureStage_CombineSource: ...
    def get_combine_rgb_operand2(self) -> _TextureStage_CombineOperand: ...
    @overload
    def set_combine_alpha(self, mode: _TextureStage_CombineMode, source0: _TextureStage_CombineSource, operand0: _TextureStage_CombineOperand) -> None: ...
    @overload
    def set_combine_alpha(self, mode: _TextureStage_CombineMode, source0: _TextureStage_CombineSource, operand0: _TextureStage_CombineOperand, source1: _TextureStage_CombineSource, operand1: _TextureStage_CombineOperand) -> None: ...
    @overload
    def set_combine_alpha(self, mode: _TextureStage_CombineMode, source0: _TextureStage_CombineSource, operand0: _TextureStage_CombineOperand, source1: _TextureStage_CombineSource, operand1: _TextureStage_CombineOperand, source2: _TextureStage_CombineSource, operand2: _TextureStage_CombineOperand) -> None: ...
    def get_combine_alpha_mode(self) -> _TextureStage_CombineMode: ...
    def get_num_combine_alpha_operands(self) -> int: ...
    def get_combine_alpha_source0(self) -> _TextureStage_CombineSource: ...
    def get_combine_alpha_operand0(self) -> _TextureStage_CombineOperand: ...
    def get_combine_alpha_source1(self) -> _TextureStage_CombineSource: ...
    def get_combine_alpha_operand1(self) -> _TextureStage_CombineOperand: ...
    def get_combine_alpha_source2(self) -> _TextureStage_CombineSource: ...
    def get_combine_alpha_operand2(self) -> _TextureStage_CombineOperand: ...
    def involves_color_scale(self) -> bool: ...
    def uses_color(self) -> bool: ...
    def uses_primary_color(self) -> bool: ...
    def uses_last_saved_result(self) -> bool: ...
    def compare_to(self, other: TextureStage) -> int: ...
    def write(self, out: ostream) -> None: ...
    def output(self, out: ostream) -> None: ...
    @staticmethod
    def get_default() -> TextureStage: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setName = set_name
    getName = get_name
    setSort = set_sort
    getSort = get_sort
    setPriority = set_priority
    getPriority = get_priority
    setTexcoordName = set_texcoord_name
    getTexcoordName = get_texcoord_name
    getTangentName = get_tangent_name
    getBinormalName = get_binormal_name
    setMode = set_mode
    getMode = get_mode
    isFixedFunction = is_fixed_function
    setColor = set_color
    getColor = get_color
    setRgbScale = set_rgb_scale
    getRgbScale = get_rgb_scale
    setAlphaScale = set_alpha_scale
    getAlphaScale = get_alpha_scale
    setSavedResult = set_saved_result
    getSavedResult = get_saved_result
    setTexViewOffset = set_tex_view_offset
    getTexViewOffset = get_tex_view_offset
    setCombineRgb = set_combine_rgb
    getCombineRgbMode = get_combine_rgb_mode
    getNumCombineRgbOperands = get_num_combine_rgb_operands
    getCombineRgbSource0 = get_combine_rgb_source0
    getCombineRgbOperand0 = get_combine_rgb_operand0
    getCombineRgbSource1 = get_combine_rgb_source1
    getCombineRgbOperand1 = get_combine_rgb_operand1
    getCombineRgbSource2 = get_combine_rgb_source2
    getCombineRgbOperand2 = get_combine_rgb_operand2
    setCombineAlpha = set_combine_alpha
    getCombineAlphaMode = get_combine_alpha_mode
    getNumCombineAlphaOperands = get_num_combine_alpha_operands
    getCombineAlphaSource0 = get_combine_alpha_source0
    getCombineAlphaOperand0 = get_combine_alpha_operand0
    getCombineAlphaSource1 = get_combine_alpha_source1
    getCombineAlphaOperand1 = get_combine_alpha_operand1
    getCombineAlphaSource2 = get_combine_alpha_source2
    getCombineAlphaOperand2 = get_combine_alpha_operand2
    involvesColorScale = involves_color_scale
    usesColor = uses_color
    usesPrimaryColor = uses_primary_color
    usesLastSavedResult = uses_last_saved_result
    compareTo = compare_to
    getDefault = get_default
    getClassType = get_class_type
    MModulate = M_modulate
    MDecal = M_decal
    MBlend = M_blend
    MReplace = M_replace
    MAdd = M_add
    MCombine = M_combine
    MBlendColorScale = M_blend_color_scale
    MModulateGlow = M_modulate_glow
    MModulateGloss = M_modulate_gloss
    MNormal = M_normal
    MNormalHeight = M_normal_height
    MGlow = M_glow
    MGloss = M_gloss
    MHeight = M_height
    MSelector = M_selector
    MNormalGloss = M_normal_gloss
    MEmission = M_emission
    CMUndefined = CM_undefined
    CMReplace = CM_replace
    CMModulate = CM_modulate
    CMAdd = CM_add
    CMAddSigned = CM_add_signed
    CMInterpolate = CM_interpolate
    CMSubtract = CM_subtract
    CMDot3Rgb = CM_dot3_rgb
    CMDot3Rgba = CM_dot3_rgba
    CSUndefined = CS_undefined
    CSTexture = CS_texture
    CSConstant = CS_constant
    CSPrimaryColor = CS_primary_color
    CSPrevious = CS_previous
    CSConstantColorScale = CS_constant_color_scale
    CSLastSavedResult = CS_last_saved_result
    COUndefined = CO_undefined
    COSrcColor = CO_src_color
    COOneMinusSrcColor = CO_one_minus_src_color
    COSrcAlpha = CO_src_alpha
    COOneMinusSrcAlpha = CO_one_minus_src_alpha

class Geom(CopyOnWriteObject, GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    primitives: Sequence[GeomPrimitive]
    bounds_type: _BoundingVolume_BoundsType
    @property
    def primitive_type(self) -> _GeomEnums_PrimitiveType: ...
    @property
    def shade_model(self) -> _GeomEnums_ShadeModel: ...
    @property
    def geom_rendering(self) -> int: ...
    @property
    def num_bytes(self) -> int: ...
    @property
    def modified(self) -> UpdateSeq: ...
    def __init__(self, data: GeomVertexData) -> None: ...
    def upcast_to_CopyOnWriteObject(self) -> CopyOnWriteObject: ...
    def upcast_to_GeomEnums(self) -> GeomEnums: ...
    def assign(self, copy: Geom) -> Geom: ...
    def make_copy(self) -> Geom: ...
    def get_primitive_type(self) -> _GeomEnums_PrimitiveType: ...
    def get_shade_model(self) -> _GeomEnums_ShadeModel: ...
    def get_geom_rendering(self) -> int: ...
    def get_usage_hint(self) -> _GeomEnums_UsageHint: ...
    def set_usage_hint(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    def get_vertex_data(self, current_thread: Thread = ...) -> GeomVertexData: ...
    def modify_vertex_data(self) -> GeomVertexData: ...
    def set_vertex_data(self, data: GeomVertexData) -> None: ...
    def offset_vertices(self, data: GeomVertexData, offset: int) -> None: ...
    def make_nonindexed(self, composite_only: bool) -> int: ...
    def get_animated_vertex_data(self, force: bool, current_thread: Thread = ...) -> GeomVertexData: ...
    def is_empty(self) -> bool: ...
    def get_num_primitives(self) -> int: ...
    def get_primitive(self, i: int) -> GeomPrimitive: ...
    def modify_primitive(self, i: int) -> GeomPrimitive: ...
    def set_primitive(self, i: int, primitive: GeomPrimitive) -> None: ...
    def insert_primitive(self, i: int, primitive: GeomPrimitive) -> None: ...
    def add_primitive(self, primitive: GeomPrimitive) -> None: ...
    def remove_primitive(self, i: int) -> None: ...
    def clear_primitives(self) -> None: ...
    def decompose(self) -> Geom: ...
    def doubleside(self) -> Geom: ...
    def reverse(self) -> Geom: ...
    def rotate(self) -> Geom: ...
    def unify(self, max_indices: int, preserve_order: bool) -> Geom: ...
    def make_points(self) -> Geom: ...
    def make_lines(self) -> Geom: ...
    def make_patches(self) -> Geom: ...
    def make_adjacency(self) -> Geom: ...
    def decompose_in_place(self) -> None: ...
    def doubleside_in_place(self) -> None: ...
    def reverse_in_place(self) -> None: ...
    def rotate_in_place(self) -> None: ...
    def unify_in_place(self, max_indices: int, preserve_order: bool) -> None: ...
    def make_points_in_place(self) -> None: ...
    def make_lines_in_place(self) -> None: ...
    def make_patches_in_place(self) -> None: ...
    def make_adjacency_in_place(self) -> None: ...
    def copy_primitives_from(self, other: Geom) -> bool: ...
    def get_num_bytes(self) -> int: ...
    def get_modified(self, current_thread: Thread = ...) -> UpdateSeq: ...
    def request_resident(self) -> bool: ...
    def transform_vertices(self, mat: _Mat4f) -> None: ...
    @overload
    def check_valid(self) -> bool: ...
    @overload
    def check_valid(self, vertex_data: GeomVertexData) -> bool: ...
    def get_bounds(self, current_thread: Thread = ...) -> BoundingVolume: ...
    def get_nested_vertices(self, current_thread: Thread = ...) -> int: ...
    def mark_bounds_stale(self) -> None: ...
    def set_bounds_type(self, bounds_type: _BoundingVolume_BoundsType) -> None: ...
    def get_bounds_type(self) -> _BoundingVolume_BoundsType: ...
    def set_bounds(self, volume: BoundingVolume) -> None: ...
    def clear_bounds(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def clear_cache(self) -> None: ...
    def clear_cache_stage(self, current_thread: Thread) -> None: ...
    def prepare(self, prepared_objects: PreparedGraphicsObjects) -> None: ...
    def is_prepared(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def release(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def release_all(self) -> int: ...
    def prepare_now(self, prepared_objects: PreparedGraphicsObjects, gsg: GraphicsStateGuardianBase) -> GeomContext: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_primitives(self) -> tuple[GeomPrimitive, ...]: ...
    upcastToCopyOnWriteObject = upcast_to_CopyOnWriteObject
    upcastToGeomEnums = upcast_to_GeomEnums
    makeCopy = make_copy
    getPrimitiveType = get_primitive_type
    getShadeModel = get_shade_model
    getGeomRendering = get_geom_rendering
    getUsageHint = get_usage_hint
    setUsageHint = set_usage_hint
    getVertexData = get_vertex_data
    modifyVertexData = modify_vertex_data
    setVertexData = set_vertex_data
    offsetVertices = offset_vertices
    makeNonindexed = make_nonindexed
    getAnimatedVertexData = get_animated_vertex_data
    isEmpty = is_empty
    getNumPrimitives = get_num_primitives
    getPrimitive = get_primitive
    modifyPrimitive = modify_primitive
    setPrimitive = set_primitive
    insertPrimitive = insert_primitive
    addPrimitive = add_primitive
    removePrimitive = remove_primitive
    clearPrimitives = clear_primitives
    makePoints = make_points
    makeLines = make_lines
    makePatches = make_patches
    makeAdjacency = make_adjacency
    decomposeInPlace = decompose_in_place
    doublesideInPlace = doubleside_in_place
    reverseInPlace = reverse_in_place
    rotateInPlace = rotate_in_place
    unifyInPlace = unify_in_place
    makePointsInPlace = make_points_in_place
    makeLinesInPlace = make_lines_in_place
    makePatchesInPlace = make_patches_in_place
    makeAdjacencyInPlace = make_adjacency_in_place
    copyPrimitivesFrom = copy_primitives_from
    getNumBytes = get_num_bytes
    getModified = get_modified
    requestResident = request_resident
    transformVertices = transform_vertices
    checkValid = check_valid
    getBounds = get_bounds
    getNestedVertices = get_nested_vertices
    markBoundsStale = mark_bounds_stale
    setBoundsType = set_bounds_type
    getBoundsType = get_bounds_type
    setBounds = set_bounds
    clearBounds = clear_bounds
    clearCache = clear_cache
    clearCacheStage = clear_cache_stage
    isPrepared = is_prepared
    releaseAll = release_all
    prepareNow = prepare_now
    getClassType = get_class_type
    getPrimitives = get_primitives

class GeomContext(SavedContext):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def geom(self) -> Geom: ...
    def get_geom(self) -> Geom: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getGeom = get_geom
    getClassType = get_class_type

class GeomLines(GeomPrimitive):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @overload
    def __init__(self, copy: GeomLines) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class GeomLinesAdjacency(GeomPrimitive):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @overload
    def __init__(self, copy: GeomLinesAdjacency) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class GeomLinestrips(GeomPrimitive):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @overload
    def __init__(self, copy: GeomLinestrips) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class GeomLinestripsAdjacency(GeomPrimitive):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @overload
    def __init__(self, copy: GeomLinestripsAdjacency) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class GeomPatches(GeomPrimitive):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, copy: GeomPatches) -> None: ...
    @overload
    def __init__(self, num_vertices_per_patch: int, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class GeomPoints(GeomPrimitive):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @overload
    def __init__(self, copy: GeomPoints) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class GeomTriangles(GeomPrimitive):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @overload
    def __init__(self, copy: GeomTriangles) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class GeomTrianglesAdjacency(GeomPrimitive):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @overload
    def __init__(self, copy: GeomTrianglesAdjacency) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class GeomTrifans(GeomPrimitive):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @overload
    def __init__(self, copy: GeomTrifans) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class GeomTristrips(GeomPrimitive):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @overload
    def __init__(self, copy: GeomTristrips) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class GeomTristripsAdjacency(GeomPrimitive):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @overload
    def __init__(self, copy: GeomTristripsAdjacency) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class GeomVertexReader(GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, copy: GeomVertexReader) -> None: ...
    @overload
    def __init__(self, array_data: GeomVertexArrayData, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, vertex_data: GeomVertexData, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, array_data: GeomVertexArrayData, column: int, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, vertex_data: GeomVertexData, name: InternalName, current_thread: Thread = ...) -> None: ...
    def assign(self, copy: GeomVertexReader) -> GeomVertexReader: ...
    def get_vertex_data(self) -> GeomVertexData: ...
    def get_array_data(self) -> GeomVertexArrayData: ...
    def get_array_handle(self) -> GeomVertexArrayDataHandle: ...
    def get_stride(self) -> int: ...
    def get_current_thread(self) -> Thread: ...
    def set_force(self, force: bool) -> None: ...
    def get_force(self) -> bool: ...
    @overload
    def set_column(self, name: InternalName) -> bool: ...
    @overload
    def set_column(self, column: int) -> bool: ...
    @overload
    def set_column(self, array: int, column: GeomVertexColumn) -> bool: ...
    def clear(self) -> None: ...
    def has_column(self) -> bool: ...
    def get_array(self) -> int: ...
    def get_column(self) -> GeomVertexColumn: ...
    def set_row_unsafe(self, row: int) -> None: ...
    def set_row(self, row: int) -> None: ...
    def get_start_row(self) -> int: ...
    def get_read_row(self) -> int: ...
    def is_at_end(self) -> bool: ...
    def get_data1f(self) -> float: ...
    def get_data2f(self) -> LVecBase2f: ...
    def get_data3f(self) -> LVecBase3f: ...
    def get_data4f(self) -> LVecBase4f: ...
    def get_matrix3f(self) -> LMatrix3f: ...
    def get_matrix4f(self) -> LMatrix4f: ...
    def get_data1d(self) -> float: ...
    def get_data2d(self) -> LVecBase2d: ...
    def get_data3d(self) -> LVecBase3d: ...
    def get_data4d(self) -> LVecBase4d: ...
    def get_matrix3d(self) -> LMatrix3d: ...
    def get_matrix4d(self) -> LMatrix4d: ...
    def get_data1(self) -> float: ...
    def get_data2(self) -> LVecBase2f: ...
    def get_data3(self) -> LVecBase3f: ...
    def get_data4(self) -> LVecBase4f: ...
    def get_matrix3(self) -> LMatrix3f: ...
    def get_matrix4(self) -> LMatrix4f: ...
    def get_data1i(self) -> int: ...
    def get_data2i(self) -> LVecBase2i: ...
    def get_data3i(self) -> LVecBase3i: ...
    def get_data4i(self) -> LVecBase4i: ...
    def output(self, out: ostream) -> None: ...
    getVertexData = get_vertex_data
    getArrayData = get_array_data
    getArrayHandle = get_array_handle
    getStride = get_stride
    getCurrentThread = get_current_thread
    setForce = set_force
    getForce = get_force
    setColumn = set_column
    hasColumn = has_column
    getArray = get_array
    getColumn = get_column
    setRowUnsafe = set_row_unsafe
    setRow = set_row
    getStartRow = get_start_row
    getReadRow = get_read_row
    isAtEnd = is_at_end
    getData1f = get_data1f
    getData2f = get_data2f
    getData3f = get_data3f
    getData4f = get_data4f
    getMatrix3f = get_matrix3f
    getMatrix4f = get_matrix4f
    getData1d = get_data1d
    getData2d = get_data2d
    getData3d = get_data3d
    getData4d = get_data4d
    getMatrix3d = get_matrix3d
    getMatrix4d = get_matrix4d
    getData1 = get_data1
    getData2 = get_data2
    getData3 = get_data3
    getData4 = get_data4
    getMatrix3 = get_matrix3
    getMatrix4 = get_matrix4
    getData1i = get_data1i
    getData2i = get_data2i
    getData3i = get_data3i
    getData4i = get_data4i

class GeomVertexWriter(GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, copy: GeomVertexWriter) -> None: ...
    @overload
    def __init__(self, array_data: GeomVertexArrayData, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, vertex_data: GeomVertexData, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, array_data: GeomVertexArrayData, column: int, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, vertex_data: GeomVertexData, name: InternalName, current_thread: Thread = ...) -> None: ...
    def assign(self, copy: GeomVertexWriter) -> GeomVertexWriter: ...
    def get_vertex_data(self) -> GeomVertexData: ...
    def get_array_data(self) -> GeomVertexArrayData: ...
    def get_array_handle(self) -> GeomVertexArrayDataHandle: ...
    def get_stride(self) -> int: ...
    def get_current_thread(self) -> Thread: ...
    @overload
    def set_column(self, name: InternalName) -> bool: ...
    @overload
    def set_column(self, column: int) -> bool: ...
    @overload
    def set_column(self, array: int, column: GeomVertexColumn) -> bool: ...
    def clear(self) -> None: ...
    def reserve_num_rows(self, num_rows: int) -> bool: ...
    def has_column(self) -> bool: ...
    def get_array(self) -> int: ...
    def get_column(self) -> GeomVertexColumn: ...
    def set_row_unsafe(self, row: int) -> None: ...
    def set_row(self, row: int) -> None: ...
    def get_start_row(self) -> int: ...
    def get_write_row(self) -> int: ...
    def is_at_end(self) -> bool: ...
    def set_data1f(self, data: float) -> None: ...
    @overload
    def set_data2f(self, data: LVecBase2f) -> None: ...
    @overload
    def set_data2f(self, x: float, y: float) -> None: ...
    @overload
    def set_data3f(self, data: _Vec3f) -> None: ...
    @overload
    def set_data3f(self, x: float, y: float, z: float) -> None: ...
    @overload
    def set_data4f(self, data: _Vec4f) -> None: ...
    @overload
    def set_data4f(self, x: float, y: float, z: float, w: float) -> None: ...
    def set_matrix3f(self, mat: LMatrix3f) -> None: ...
    def set_matrix4f(self, mat: _Mat4f) -> None: ...
    def set_data1d(self, data: float) -> None: ...
    @overload
    def set_data2d(self, data: LVecBase2d) -> None: ...
    @overload
    def set_data2d(self, x: float, y: float) -> None: ...
    @overload
    def set_data3d(self, data: _Vec3d) -> None: ...
    @overload
    def set_data3d(self, x: float, y: float, z: float) -> None: ...
    @overload
    def set_data4d(self, data: _Vec4d) -> None: ...
    @overload
    def set_data4d(self, x: float, y: float, z: float, w: float) -> None: ...
    def set_matrix3d(self, mat: LMatrix3d) -> None: ...
    def set_matrix4d(self, mat: _Mat4d) -> None: ...
    def set_data1(self, data: float) -> None: ...
    @overload
    def set_data2(self, data: LVecBase2f) -> None: ...
    @overload
    def set_data2(self, x: float, y: float) -> None: ...
    @overload
    def set_data3(self, data: _Vec3f) -> None: ...
    @overload
    def set_data3(self, x: float, y: float, z: float) -> None: ...
    @overload
    def set_data4(self, data: _Vec4f) -> None: ...
    @overload
    def set_data4(self, x: float, y: float, z: float, w: float) -> None: ...
    def set_matrix3(self, mat: LMatrix3f) -> None: ...
    def set_matrix4(self, mat: _Mat4f) -> None: ...
    def set_data1i(self, data: int) -> None: ...
    @overload
    def set_data2i(self, data: LVecBase2i) -> None: ...
    @overload
    def set_data2i(self, a: int, b: int) -> None: ...
    @overload
    def set_data3i(self, data: LVecBase3i) -> None: ...
    @overload
    def set_data3i(self, a: int, b: int, c: int) -> None: ...
    @overload
    def set_data4i(self, data: _Vec4i) -> None: ...
    @overload
    def set_data4i(self, a: int, b: int, c: int, d: int) -> None: ...
    def add_data1f(self, data: float) -> None: ...
    @overload
    def add_data2f(self, data: LVecBase2f) -> None: ...
    @overload
    def add_data2f(self, x: float, y: float) -> None: ...
    @overload
    def add_data3f(self, data: _Vec3f) -> None: ...
    @overload
    def add_data3f(self, x: float, y: float, z: float) -> None: ...
    @overload
    def add_data4f(self, data: _Vec4f) -> None: ...
    @overload
    def add_data4f(self, x: float, y: float, z: float, w: float) -> None: ...
    def add_matrix3f(self, mat: LMatrix3f) -> None: ...
    def add_matrix4f(self, mat: _Mat4f) -> None: ...
    def add_data1d(self, data: float) -> None: ...
    @overload
    def add_data2d(self, data: LVecBase2d) -> None: ...
    @overload
    def add_data2d(self, x: float, y: float) -> None: ...
    @overload
    def add_data3d(self, data: _Vec3d) -> None: ...
    @overload
    def add_data3d(self, x: float, y: float, z: float) -> None: ...
    @overload
    def add_data4d(self, data: _Vec4d) -> None: ...
    @overload
    def add_data4d(self, x: float, y: float, z: float, w: float) -> None: ...
    def add_matrix3d(self, mat: LMatrix3d) -> None: ...
    def add_matrix4d(self, mat: _Mat4d) -> None: ...
    def add_data1(self, data: float) -> None: ...
    @overload
    def add_data2(self, data: LVecBase2f) -> None: ...
    @overload
    def add_data2(self, x: float, y: float) -> None: ...
    @overload
    def add_data3(self, data: _Vec3f) -> None: ...
    @overload
    def add_data3(self, x: float, y: float, z: float) -> None: ...
    @overload
    def add_data4(self, data: _Vec4f) -> None: ...
    @overload
    def add_data4(self, x: float, y: float, z: float, w: float) -> None: ...
    def add_matrix3(self, mat: LMatrix3f) -> None: ...
    def add_matrix4(self, mat: _Mat4f) -> None: ...
    def add_data1i(self, data: int) -> None: ...
    @overload
    def add_data2i(self, data: LVecBase2i) -> None: ...
    @overload
    def add_data2i(self, a: int, b: int) -> None: ...
    @overload
    def add_data3i(self, data: LVecBase3i) -> None: ...
    @overload
    def add_data3i(self, a: int, b: int, c: int) -> None: ...
    @overload
    def add_data4i(self, data: _Vec4i) -> None: ...
    @overload
    def add_data4i(self, a: int, b: int, c: int, d: int) -> None: ...
    def output(self, out: ostream) -> None: ...
    getVertexData = get_vertex_data
    getArrayData = get_array_data
    getArrayHandle = get_array_handle
    getStride = get_stride
    getCurrentThread = get_current_thread
    setColumn = set_column
    reserveNumRows = reserve_num_rows
    hasColumn = has_column
    getArray = get_array
    getColumn = get_column
    setRowUnsafe = set_row_unsafe
    setRow = set_row
    getStartRow = get_start_row
    getWriteRow = get_write_row
    isAtEnd = is_at_end
    setData1f = set_data1f
    setData2f = set_data2f
    setData3f = set_data3f
    setData4f = set_data4f
    setMatrix3f = set_matrix3f
    setMatrix4f = set_matrix4f
    setData1d = set_data1d
    setData2d = set_data2d
    setData3d = set_data3d
    setData4d = set_data4d
    setMatrix3d = set_matrix3d
    setMatrix4d = set_matrix4d
    setData1 = set_data1
    setData2 = set_data2
    setData3 = set_data3
    setData4 = set_data4
    setMatrix3 = set_matrix3
    setMatrix4 = set_matrix4
    setData1i = set_data1i
    setData2i = set_data2i
    setData3i = set_data3i
    setData4i = set_data4i
    addData1f = add_data1f
    addData2f = add_data2f
    addData3f = add_data3f
    addData4f = add_data4f
    addMatrix3f = add_matrix3f
    addMatrix4f = add_matrix4f
    addData1d = add_data1d
    addData2d = add_data2d
    addData3d = add_data3d
    addData4d = add_data4d
    addMatrix3d = add_matrix3d
    addMatrix4d = add_matrix4d
    addData1 = add_data1
    addData2 = add_data2
    addData3 = add_data3
    addData4 = add_data4
    addMatrix3 = add_matrix3
    addMatrix4 = add_matrix4
    addData1i = add_data1i
    addData2i = add_data2i
    addData3i = add_data3i
    addData4i = add_data4i

class GeomVertexRewriter(GeomVertexWriter, GeomVertexReader):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, copy: GeomVertexRewriter) -> None: ...
    @overload
    def __init__(self, array_data: GeomVertexArrayData, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, vertex_data: GeomVertexData, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, array_data: GeomVertexArrayData, column: int, current_thread: Thread = ...) -> None: ...
    @overload
    def __init__(self, vertex_data: GeomVertexData, name: InternalName, current_thread: Thread = ...) -> None: ...
    def upcast_to_GeomVertexWriter(self) -> GeomVertexWriter: ...
    def upcast_to_GeomVertexReader(self) -> GeomVertexReader: ...
    def assign(self, copy: GeomVertexRewriter) -> GeomVertexRewriter: ...
    def get_vertex_data(self) -> GeomVertexData: ...
    def get_array_data(self) -> GeomVertexArrayData: ...
    def get_array_handle(self) -> GeomVertexArrayDataHandle: ...
    def get_stride(self) -> int: ...
    def get_current_thread(self) -> Thread: ...
    @overload
    def set_column(self, name: InternalName) -> bool: ...
    @overload
    def set_column(self, column: int) -> bool: ...
    @overload
    def set_column(self, array: int, column: GeomVertexColumn) -> bool: ...
    def clear(self) -> None: ...
    def has_column(self) -> bool: ...
    def get_array(self) -> int: ...
    def get_column(self) -> GeomVertexColumn: ...
    def set_row_unsafe(self, row: int) -> None: ...
    def set_row(self, row: int) -> None: ...
    def get_start_row(self) -> int: ...
    def is_at_end(self) -> bool: ...
    def output(self, out: ostream) -> None: ...
    upcastToGeomVertexWriter = upcast_to_GeomVertexWriter
    upcastToGeomVertexReader = upcast_to_GeomVertexReader
    getVertexData = get_vertex_data
    getArrayData = get_array_data
    getArrayHandle = get_array_handle
    getStride = get_stride
    getCurrentThread = get_current_thread
    setColumn = set_column
    hasColumn = has_column
    getArray = get_array
    getColumn = get_column
    setRowUnsafe = set_row_unsafe
    setRow = set_row
    getStartRow = get_start_row
    isAtEnd = is_at_end

class SamplerState:
    DtoolClassDict: ClassVar[dict[str, Any]]
    wrap_u: _SamplerState_WrapMode
    wrap_v: _SamplerState_WrapMode
    wrap_w: _SamplerState_WrapMode
    minfilter: _SamplerState_FilterType
    magfilter: _SamplerState_FilterType
    anisotropic_degree: int
    border_color: LVecBase4f
    min_lod: float
    max_lod: float
    lod_bias: float
    FT_nearest: ClassVar[Literal[0]]
    FT_linear: ClassVar[Literal[1]]
    FT_nearest_mipmap_nearest: ClassVar[Literal[2]]
    FT_linear_mipmap_nearest: ClassVar[Literal[3]]
    FT_nearest_mipmap_linear: ClassVar[Literal[4]]
    FT_linear_mipmap_linear: ClassVar[Literal[5]]
    FT_shadow: ClassVar[Literal[6]]
    FT_default: ClassVar[Literal[7]]
    FT_invalid: ClassVar[Literal[8]]
    WM_clamp: ClassVar[Literal[0]]
    WM_repeat: ClassVar[Literal[1]]
    WM_mirror: ClassVar[Literal[2]]
    WM_mirror_once: ClassVar[Literal[3]]
    WM_border_color: ClassVar[Literal[4]]
    WM_invalid: ClassVar[Literal[5]]
    @property
    def effective_minfilter(self) -> _SamplerState_FilterType: ...
    @property
    def effective_magfilter(self) -> _SamplerState_FilterType: ...
    @property
    def effective_anisotropic_degree(self) -> int: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: SamplerState) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: SamplerState) -> bool: ...
    def __le__(self, other: SamplerState) -> bool: ...
    @staticmethod
    def get_default() -> SamplerState: ...
    def set_wrap_u(self, wrap: _SamplerState_WrapMode) -> None: ...
    def set_wrap_v(self, wrap: _SamplerState_WrapMode) -> None: ...
    def set_wrap_w(self, wrap: _SamplerState_WrapMode) -> None: ...
    def set_minfilter(self, filter: _SamplerState_FilterType) -> None: ...
    def set_magfilter(self, filter: _SamplerState_FilterType) -> None: ...
    def set_anisotropic_degree(self, anisotropic_degree: int) -> None: ...
    def set_border_color(self, color: _Vec4f) -> None: ...
    def set_min_lod(self, min_lod: float) -> None: ...
    def set_max_lod(self, max_lod: float) -> None: ...
    def set_lod_bias(self, lod_bias: float) -> None: ...
    def get_wrap_u(self) -> _SamplerState_WrapMode: ...
    def get_wrap_v(self) -> _SamplerState_WrapMode: ...
    def get_wrap_w(self) -> _SamplerState_WrapMode: ...
    def get_minfilter(self) -> _SamplerState_FilterType: ...
    def get_magfilter(self) -> _SamplerState_FilterType: ...
    def get_effective_minfilter(self) -> _SamplerState_FilterType: ...
    def get_effective_magfilter(self) -> _SamplerState_FilterType: ...
    def get_anisotropic_degree(self) -> int: ...
    def get_effective_anisotropic_degree(self) -> int: ...
    def get_border_color(self) -> LVecBase4f: ...
    def get_min_lod(self) -> float: ...
    def get_max_lod(self) -> float: ...
    def get_lod_bias(self) -> float: ...
    def uses_mipmaps(self) -> bool: ...
    @staticmethod
    def is_mipmap(type: _SamplerState_FilterType) -> bool: ...
    @staticmethod
    def format_filter_type(ft: _SamplerState_FilterType) -> str: ...
    @staticmethod
    def string_filter_type(str: str) -> _SamplerState_FilterType: ...
    @staticmethod
    def format_wrap_mode(wm: _SamplerState_WrapMode) -> str: ...
    @staticmethod
    def string_wrap_mode(str: str) -> _SamplerState_WrapMode: ...
    def prepare(self, prepared_objects: PreparedGraphicsObjects) -> None: ...
    def is_prepared(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def release(self, prepared_objects: PreparedGraphicsObjects) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getDefault = get_default
    setWrapU = set_wrap_u
    setWrapV = set_wrap_v
    setWrapW = set_wrap_w
    setMinfilter = set_minfilter
    setMagfilter = set_magfilter
    setAnisotropicDegree = set_anisotropic_degree
    setBorderColor = set_border_color
    setMinLod = set_min_lod
    setMaxLod = set_max_lod
    setLodBias = set_lod_bias
    getWrapU = get_wrap_u
    getWrapV = get_wrap_v
    getWrapW = get_wrap_w
    getMinfilter = get_minfilter
    getMagfilter = get_magfilter
    getEffectiveMinfilter = get_effective_minfilter
    getEffectiveMagfilter = get_effective_magfilter
    getAnisotropicDegree = get_anisotropic_degree
    getEffectiveAnisotropicDegree = get_effective_anisotropic_degree
    getBorderColor = get_border_color
    getMinLod = get_min_lod
    getMaxLod = get_max_lod
    getLodBias = get_lod_bias
    usesMipmaps = uses_mipmaps
    isMipmap = is_mipmap
    formatFilterType = format_filter_type
    stringFilterType = string_filter_type
    formatWrapMode = format_wrap_mode
    stringWrapMode = string_wrap_mode
    isPrepared = is_prepared
    getClassType = get_class_type
    FTNearest = FT_nearest
    FTLinear = FT_linear
    FTNearestMipmapNearest = FT_nearest_mipmap_nearest
    FTLinearMipmapNearest = FT_linear_mipmap_nearest
    FTNearestMipmapLinear = FT_nearest_mipmap_linear
    FTLinearMipmapLinear = FT_linear_mipmap_linear
    FTShadow = FT_shadow
    FTDefault = FT_default
    FTInvalid = FT_invalid
    WMClamp = WM_clamp
    WMRepeat = WM_repeat
    WMMirror = WM_mirror
    WMMirrorOnce = WM_mirror_once
    WMBorderColor = WM_border_color
    WMInvalid = WM_invalid

class Texture(TypedWritableReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    clear_color: LVecBase4f
    filename: Filename
    alpha_filename: Filename
    fullpath: Filename
    alpha_fullpath: Filename
    x_size: int
    y_size: int
    z_size: int
    num_views: int
    format: _Texture_Format
    component_type: _Texture_ComponentType
    wrap_u: _SamplerState_WrapMode
    wrap_v: _SamplerState_WrapMode
    wrap_w: _SamplerState_WrapMode
    minfilter: _SamplerState_FilterType
    magfilter: _SamplerState_FilterType
    anisotropic_degree: int
    border_color: LVecBase4f
    compression: _Texture_CompressionMode
    render_to_texture: bool
    default_sampler: SamplerState
    quality_level: _Texture_QualityLevel
    keep_ram_image: bool
    auto_texture_scale: _AutoTextureScale
    aux_data: Mapping[Any, TypedReferenceCount]
    loaded_from_image: bool
    loaded_from_txo: bool
    match_framebuffer_format: bool
    post_load_store_cache: bool
    TT_1d_texture: ClassVar[Literal[0]]
    TT_2d_texture: ClassVar[Literal[1]]
    TT_3d_texture: ClassVar[Literal[2]]
    TT_2d_texture_array: ClassVar[Literal[3]]
    TT_cube_map: ClassVar[Literal[4]]
    TT_buffer_texture: ClassVar[Literal[5]]
    TT_cube_map_array: ClassVar[Literal[6]]
    TT_1d_texture_array: ClassVar[Literal[7]]
    T_unsigned_byte: ClassVar[Literal[0]]
    T_unsigned_short: ClassVar[Literal[1]]
    T_float: ClassVar[Literal[2]]
    T_unsigned_int_24_8: ClassVar[Literal[3]]
    T_int: ClassVar[Literal[4]]
    T_byte: ClassVar[Literal[5]]
    T_short: ClassVar[Literal[6]]
    T_half_float: ClassVar[Literal[7]]
    T_unsigned_int: ClassVar[Literal[8]]
    F_depth_stencil: ClassVar[Literal[1]]
    F_color_index: ClassVar[Literal[2]]
    F_red: ClassVar[Literal[3]]
    F_green: ClassVar[Literal[4]]
    F_blue: ClassVar[Literal[5]]
    F_alpha: ClassVar[Literal[6]]
    F_rgb: ClassVar[Literal[7]]
    F_rgb5: ClassVar[Literal[8]]
    F_rgb8: ClassVar[Literal[9]]
    F_rgb12: ClassVar[Literal[10]]
    F_rgb332: ClassVar[Literal[11]]
    F_rgba: ClassVar[Literal[12]]
    F_rgbm: ClassVar[Literal[13]]
    F_rgba4: ClassVar[Literal[14]]
    F_rgba5: ClassVar[Literal[15]]
    F_rgba8: ClassVar[Literal[16]]
    F_rgba12: ClassVar[Literal[17]]
    F_luminance: ClassVar[Literal[18]]
    F_luminance_alpha: ClassVar[Literal[19]]
    F_luminance_alphamask: ClassVar[Literal[20]]
    F_rgba16: ClassVar[Literal[21]]
    F_rgba32: ClassVar[Literal[22]]
    F_depth_component: ClassVar[Literal[23]]
    F_depth_component16: ClassVar[Literal[24]]
    F_depth_component24: ClassVar[Literal[25]]
    F_depth_component32: ClassVar[Literal[26]]
    F_r16: ClassVar[Literal[27]]
    F_rg16: ClassVar[Literal[28]]
    F_rgb16: ClassVar[Literal[29]]
    F_srgb: ClassVar[Literal[30]]
    F_srgb_alpha: ClassVar[Literal[31]]
    F_sluminance: ClassVar[Literal[32]]
    F_sluminance_alpha: ClassVar[Literal[33]]
    F_r32i: ClassVar[Literal[34]]
    F_r32: ClassVar[Literal[35]]
    F_rg32: ClassVar[Literal[36]]
    F_rgb32: ClassVar[Literal[37]]
    F_r8i: ClassVar[Literal[38]]
    F_rg8i: ClassVar[Literal[39]]
    F_rgb8i: ClassVar[Literal[40]]
    F_rgba8i: ClassVar[Literal[41]]
    F_r11_g11_b10: ClassVar[Literal[42]]
    F_rgb9_e5: ClassVar[Literal[43]]
    F_rgb10_a2: ClassVar[Literal[44]]
    F_rg: ClassVar[Literal[45]]
    F_r16i: ClassVar[Literal[46]]
    F_rg16i: ClassVar[Literal[47]]
    F_rgb16i: ClassVar[Literal[48]]
    F_rgba16i: ClassVar[Literal[49]]
    F_rg32i: ClassVar[Literal[50]]
    F_rgb32i: ClassVar[Literal[51]]
    F_rgba32i: ClassVar[Literal[52]]
    FT_nearest: ClassVar[Literal[0]]
    FT_linear: ClassVar[Literal[1]]
    FT_nearest_mipmap_nearest: ClassVar[Literal[2]]
    FT_linear_mipmap_nearest: ClassVar[Literal[3]]
    FT_nearest_mipmap_linear: ClassVar[Literal[4]]
    FT_linear_mipmap_linear: ClassVar[Literal[5]]
    FT_shadow: ClassVar[Literal[6]]
    FT_default: ClassVar[Literal[7]]
    FT_invalid: ClassVar[Literal[8]]
    WM_clamp: ClassVar[Literal[0]]
    WM_repeat: ClassVar[Literal[1]]
    WM_mirror: ClassVar[Literal[2]]
    WM_mirror_once: ClassVar[Literal[3]]
    WM_border_color: ClassVar[Literal[4]]
    WM_invalid: ClassVar[Literal[5]]
    CM_default: ClassVar[Literal[0]]
    CM_off: ClassVar[Literal[1]]
    CM_on: ClassVar[Literal[2]]
    CM_fxt1: ClassVar[Literal[3]]
    CM_dxt1: ClassVar[Literal[4]]
    CM_dxt2: ClassVar[Literal[5]]
    CM_dxt3: ClassVar[Literal[6]]
    CM_dxt4: ClassVar[Literal[7]]
    CM_dxt5: ClassVar[Literal[8]]
    CM_pvr1_2bpp: ClassVar[Literal[9]]
    CM_pvr1_4bpp: ClassVar[Literal[10]]
    CM_rgtc: ClassVar[Literal[11]]
    CM_etc1: ClassVar[Literal[12]]
    CM_etc2: ClassVar[Literal[13]]
    CM_eac: ClassVar[Literal[14]]
    QL_default: ClassVar[Literal[0]]
    QL_fastest: ClassVar[Literal[1]]
    QL_normal: ClassVar[Literal[2]]
    QL_best: ClassVar[Literal[3]]
    @property
    def num_pages(self) -> int: ...
    @property
    def num_components(self) -> int: ...
    @property
    def component_width(self) -> int: ...
    @property
    def texture_type(self) -> _Texture_TextureType: ...
    @property
    def usage_hint(self) -> _GeomEnums_UsageHint: ...
    @property
    def effective_minfilter(self) -> _SamplerState_FilterType: ...
    @property
    def effective_magfilter(self) -> _SamplerState_FilterType: ...
    @property
    def effective_anisotropic_degree(self) -> int: ...
    @property
    def effective_quality_level(self) -> _Texture_QualityLevel: ...
    @property
    def expected_num_mipmap_levels(self) -> int: ...
    @property
    def ram_image_size(self) -> int: ...
    @property
    def ram_view_size(self) -> int: ...
    @property
    def ram_page_size(self) -> int: ...
    @property
    def expected_ram_image_size(self) -> int: ...
    @property
    def expected_ram_page_size(self) -> int: ...
    @property
    def ram_image_compression(self) -> _Texture_CompressionMode: ...
    @property
    def cacheable(self) -> bool: ...
    @property
    def num_ram_mipmap_images(self) -> int: ...
    @property
    def num_loadable_ram_mipmap_images(self) -> int: ...
    @property
    def simple_x_size(self) -> int: ...
    @property
    def simple_y_size(self) -> int: ...
    @property
    def simple_ram_image(self) -> ConstPointerToArray_unsigned_char: ...
    @property
    def properties_modified(self) -> UpdateSeq: ...
    @property
    def image_modified(self) -> UpdateSeq: ...
    @property
    def simple_image_modified(self) -> UpdateSeq: ...
    @property
    def orig_file_x_size(self) -> int: ...
    @property
    def orig_file_y_size(self) -> int: ...
    @property
    def orig_file_z_size(self) -> int: ...
    def __init__(self, name: str = ...) -> None: ...
    def upcast_to_TypedWritableReferenceCount(self) -> TypedWritableReferenceCount: ...
    def upcast_to_Namable(self) -> Namable: ...
    def make_copy(self) -> Texture: ...
    def clear(self) -> None: ...
    def setup_texture(self, texture_type: _Texture_TextureType, x_size: int, y_size: int, z_size: int, component_type: _Texture_ComponentType, format: _Texture_Format) -> None: ...
    @overload
    def setup_1d_texture(self) -> None: ...
    @overload
    def setup_1d_texture(self, x_size: int, component_type: _Texture_ComponentType, format: _Texture_Format) -> None: ...
    @overload
    def setup_2d_texture(self) -> None: ...
    @overload
    def setup_2d_texture(self, x_size: int, y_size: int, component_type: _Texture_ComponentType, format: _Texture_Format) -> None: ...
    @overload
    def setup_3d_texture(self, z_size: int = ...) -> None: ...
    @overload
    def setup_3d_texture(self, x_size: int, y_size: int, z_size: int, component_type: _Texture_ComponentType, format: _Texture_Format) -> None: ...
    @overload
    def setup_cube_map(self) -> None: ...
    @overload
    def setup_cube_map(self, size: int, component_type: _Texture_ComponentType, format: _Texture_Format) -> None: ...
    @overload
    def setup_2d_texture_array(self, z_size: int = ...) -> None: ...
    @overload
    def setup_2d_texture_array(self, x_size: int, y_size: int, z_size: int, component_type: _Texture_ComponentType, format: _Texture_Format) -> None: ...
    @overload
    def setup_cube_map_array(self, num_cube_maps: int) -> None: ...
    @overload
    def setup_cube_map_array(self, size: int, num_cube_maps: int, component_type: _Texture_ComponentType, format: _Texture_Format) -> None: ...
    def setup_buffer_texture(self, size: int, component_type: _Texture_ComponentType, format: _Texture_Format, usage: _GeomEnums_UsageHint) -> None: ...
    def generate_normalization_cube_map(self, size: int) -> None: ...
    def generate_alpha_scale_map(self) -> None: ...
    def clear_image(self) -> None: ...
    def has_clear_color(self) -> bool: ...
    def get_clear_color(self) -> LVecBase4f: ...
    def set_clear_color(self, color: _Vec4f) -> None: ...
    def clear_clear_color(self) -> None: ...
    def get_clear_data(self) -> bytes: ...
    @overload
    def read(self, fullpath: _Filename, options: LoaderOptions = ...) -> bool: ...
    @overload
    def read(self, fullpath: _Filename, alpha_fullpath: _Filename, primary_file_num_channels: int, alpha_file_channel: int, options: LoaderOptions = ...) -> bool: ...
    @overload
    def read(self, fullpath: _Filename, z: int, n: int, read_pages: bool, read_mipmaps: bool, options: LoaderOptions = ...) -> bool: ...
    @overload
    def read(self, fullpath: _Filename, alpha_fullpath: _Filename, primary_file_num_channels: int, alpha_file_channel: int, z: int, n: int, read_pages: bool, read_mipmaps: bool, record: BamCacheRecord = ..., options: LoaderOptions = ...) -> bool: ...
    @overload
    def write(self, fullpath: _Filename) -> bool: ...
    @overload
    def write(self, out: ostream, indent_level: int) -> None: ...
    @overload
    def write(self, fullpath: _Filename, z: int, n: int, write_pages: bool, write_mipmaps: bool) -> bool: ...
    def read_txo(self, _in: istream, filename: str = ...) -> bool: ...
    @staticmethod
    def make_from_txo(_in: istream, filename: str = ...) -> Texture: ...
    def write_txo(self, out: ostream, filename: str = ...) -> bool: ...
    def read_dds(self, _in: istream, filename: str = ..., header_only: bool = ...) -> bool: ...
    def read_ktx(self, _in: istream, filename: str = ..., header_only: bool = ...) -> bool: ...
    @overload
    def load(self, pnmimage: PNMImage, options: LoaderOptions = ...) -> bool: ...
    @overload
    def load(self, pfm: PfmFile, options: LoaderOptions = ...) -> bool: ...
    @overload
    def load(self, pnmimage: PNMImage, z: int, n: int, options: LoaderOptions = ...) -> bool: ...
    @overload
    def load(self, pfm: PfmFile, z: int, n: int, options: LoaderOptions = ...) -> bool: ...
    def load_sub_image(self, pnmimage: PNMImage, x: int, y: int, z: int = ..., n: int = ...) -> bool: ...
    @overload
    def store(self, pnmimage: PNMImage) -> bool: ...
    @overload
    def store(self, pfm: PfmFile) -> bool: ...
    @overload
    def store(self, pnmimage: PNMImage, z: int, n: int) -> bool: ...
    @overload
    def store(self, pfm: PfmFile, z: int, n: int) -> bool: ...
    def reload(self) -> bool: ...
    def load_related(self, suffix: InternalName) -> Texture: ...
    def has_filename(self) -> bool: ...
    def get_filename(self) -> Filename: ...
    def set_filename(self, filename: _Filename) -> None: ...
    def clear_filename(self) -> None: ...
    def has_alpha_filename(self) -> bool: ...
    def get_alpha_filename(self) -> Filename: ...
    def set_alpha_filename(self, alpha_filename: _Filename) -> None: ...
    def clear_alpha_filename(self) -> None: ...
    def has_fullpath(self) -> bool: ...
    def get_fullpath(self) -> Filename: ...
    def set_fullpath(self, fullpath: _Filename) -> None: ...
    def clear_fullpath(self) -> None: ...
    def has_alpha_fullpath(self) -> bool: ...
    def get_alpha_fullpath(self) -> Filename: ...
    def set_alpha_fullpath(self, alpha_fullpath: _Filename) -> None: ...
    def clear_alpha_fullpath(self) -> None: ...
    def get_x_size(self) -> int: ...
    def set_x_size(self, x_size: int) -> None: ...
    def get_y_size(self) -> int: ...
    def set_y_size(self, y_size: int) -> None: ...
    def get_z_size(self) -> int: ...
    def set_z_size(self, z_size: int) -> None: ...
    def get_num_views(self) -> int: ...
    def set_num_views(self, num_views: int) -> None: ...
    def get_num_pages(self) -> int: ...
    def get_num_components(self) -> int: ...
    def get_component_width(self) -> int: ...
    def get_texture_type(self) -> _Texture_TextureType: ...
    def get_usage_hint(self) -> _GeomEnums_UsageHint: ...
    def get_format(self) -> _Texture_Format: ...
    def set_format(self, format: _Texture_Format) -> None: ...
    def get_component_type(self) -> _Texture_ComponentType: ...
    def set_component_type(self, component_type: _Texture_ComponentType) -> None: ...
    def get_wrap_u(self) -> _SamplerState_WrapMode: ...
    def set_wrap_u(self, wrap: _SamplerState_WrapMode) -> None: ...
    def get_wrap_v(self) -> _SamplerState_WrapMode: ...
    def set_wrap_v(self, wrap: _SamplerState_WrapMode) -> None: ...
    def get_wrap_w(self) -> _SamplerState_WrapMode: ...
    def set_wrap_w(self, wrap: _SamplerState_WrapMode) -> None: ...
    def get_minfilter(self) -> _SamplerState_FilterType: ...
    def get_effective_minfilter(self) -> _SamplerState_FilterType: ...
    def set_minfilter(self, filter: _SamplerState_FilterType) -> None: ...
    def get_magfilter(self) -> _SamplerState_FilterType: ...
    def get_effective_magfilter(self) -> _SamplerState_FilterType: ...
    def set_magfilter(self, filter: _SamplerState_FilterType) -> None: ...
    def get_anisotropic_degree(self) -> int: ...
    def get_effective_anisotropic_degree(self) -> int: ...
    def set_anisotropic_degree(self, anisotropic_degree: int) -> None: ...
    def get_border_color(self) -> LVecBase4f: ...
    def set_border_color(self, color: _Vec4f) -> None: ...
    def has_compression(self) -> bool: ...
    def get_compression(self) -> _Texture_CompressionMode: ...
    def set_compression(self, compression: _Texture_CompressionMode) -> None: ...
    def get_render_to_texture(self) -> bool: ...
    def set_render_to_texture(self, render_to_texture: bool) -> None: ...
    def get_default_sampler(self) -> SamplerState: ...
    def set_default_sampler(self, sampler: SamplerState) -> None: ...
    def uses_mipmaps(self) -> bool: ...
    def get_quality_level(self) -> _Texture_QualityLevel: ...
    def get_effective_quality_level(self) -> _Texture_QualityLevel: ...
    def set_quality_level(self, quality_level: _Texture_QualityLevel) -> None: ...
    def get_expected_num_mipmap_levels(self) -> int: ...
    def get_expected_mipmap_x_size(self, n: int) -> int: ...
    def get_expected_mipmap_y_size(self, n: int) -> int: ...
    def get_expected_mipmap_z_size(self, n: int) -> int: ...
    def get_expected_mipmap_num_pages(self, n: int) -> int: ...
    def has_ram_image(self) -> bool: ...
    def has_uncompressed_ram_image(self) -> bool: ...
    def might_have_ram_image(self) -> bool: ...
    def get_ram_image_size(self) -> int: ...
    def get_ram_view_size(self) -> int: ...
    def get_ram_page_size(self) -> int: ...
    def get_expected_ram_image_size(self) -> int: ...
    def get_expected_ram_page_size(self) -> int: ...
    def get_ram_image(self) -> ConstPointerToArray_unsigned_char: ...
    def get_ram_image_compression(self) -> _Texture_CompressionMode: ...
    def get_uncompressed_ram_image(self) -> ConstPointerToArray_unsigned_char: ...
    def get_ram_image_as(self, requested_format: str) -> ConstPointerToArray_unsigned_char: ...
    def modify_ram_image(self) -> PointerToArray_unsigned_char: ...
    def make_ram_image(self) -> PointerToArray_unsigned_char: ...
    def set_ram_image(self, image: Any, compression: _Texture_CompressionMode = ..., page_size: int = ...) -> None: ...
    def set_ram_image_as(self, image: Any, provided_format: str) -> None: ...
    def clear_ram_image(self) -> None: ...
    def set_keep_ram_image(self, keep_ram_image: bool) -> None: ...
    def get_keep_ram_image(self) -> bool: ...
    def is_cacheable(self) -> bool: ...
    def compress_ram_image(self, compression: _Texture_CompressionMode = ..., quality_level: _Texture_QualityLevel = ..., gsg: GraphicsStateGuardianBase = ...) -> bool: ...
    def uncompress_ram_image(self) -> bool: ...
    def get_num_ram_mipmap_images(self) -> int: ...
    def has_ram_mipmap_image(self, n: int) -> bool: ...
    def get_num_loadable_ram_mipmap_images(self) -> int: ...
    def has_all_ram_mipmap_images(self) -> bool: ...
    def get_ram_mipmap_image_size(self, n: int) -> int: ...
    def get_ram_mipmap_view_size(self, n: int) -> int: ...
    def get_ram_mipmap_page_size(self, n: int) -> int: ...
    def get_expected_ram_mipmap_image_size(self, n: int) -> int: ...
    def get_expected_ram_mipmap_view_size(self, n: int) -> int: ...
    def get_expected_ram_mipmap_page_size(self, n: int) -> int: ...
    def get_ram_mipmap_image(self, n: int) -> ConstPointerToArray_unsigned_char: ...
    def modify_ram_mipmap_image(self, n: int) -> PointerToArray_unsigned_char: ...
    def make_ram_mipmap_image(self, n: int) -> PointerToArray_unsigned_char: ...
    def set_ram_mipmap_pointer_from_int(self, pointer: int, n: int, page_size: int) -> None: ...
    def set_ram_mipmap_image(self, n: int, image: ConstPointerToArray_unsigned_char | PointerToArray_unsigned_char, page_size: int = ...) -> None: ...
    def clear_ram_mipmap_image(self, n: int) -> None: ...
    def clear_ram_mipmap_images(self) -> None: ...
    def generate_ram_mipmap_images(self) -> None: ...
    def get_simple_x_size(self) -> int: ...
    def get_simple_y_size(self) -> int: ...
    def has_simple_ram_image(self) -> bool: ...
    def get_simple_ram_image_size(self) -> int: ...
    def get_simple_ram_image(self) -> ConstPointerToArray_unsigned_char: ...
    def set_simple_ram_image(self, image: ConstPointerToArray_unsigned_char | PointerToArray_unsigned_char, x_size: int, y_size: int) -> None: ...
    def modify_simple_ram_image(self) -> PointerToArray_unsigned_char: ...
    def new_simple_ram_image(self, x_size: int, y_size: int) -> PointerToArray_unsigned_char: ...
    def generate_simple_ram_image(self) -> None: ...
    def clear_simple_ram_image(self) -> None: ...
    def peek(self) -> TexturePeeker: ...
    def get_properties_modified(self) -> UpdateSeq: ...
    def get_image_modified(self) -> UpdateSeq: ...
    def get_simple_image_modified(self) -> UpdateSeq: ...
    def has_auto_texture_scale(self) -> bool: ...
    def get_auto_texture_scale(self) -> _AutoTextureScale: ...
    def set_auto_texture_scale(self, scale: _AutoTextureScale) -> None: ...
    def prepare(self, prepared_objects: PreparedGraphicsObjects) -> AsyncFuture: ...
    def is_prepared(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def was_image_modified(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def get_data_size_bytes(self, prepared_objects: PreparedGraphicsObjects) -> int: ...
    def get_active(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def get_resident(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def release(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def release_all(self) -> int: ...
    def estimate_texture_memory(self) -> int: ...
    def set_aux_data(self, key: str, aux_data: TypedReferenceCount) -> None: ...
    def clear_aux_data(self, key: str) -> None: ...
    def get_aux_data(self, key: str) -> TypedReferenceCount: ...
    @staticmethod
    def set_textures_power_2(scale: _AutoTextureScale) -> None: ...
    @staticmethod
    def get_textures_power_2() -> _AutoTextureScale: ...
    @staticmethod
    def has_textures_power_2() -> bool: ...
    def get_pad_x_size(self) -> int: ...
    def get_pad_y_size(self) -> int: ...
    def get_pad_z_size(self) -> int: ...
    def get_tex_scale(self) -> LVecBase2f: ...
    def set_pad_size(self, x: int = ..., y: int = ..., z: int = ...) -> None: ...
    def set_size_padded(self, x: int = ..., y: int = ..., z: int = ...) -> None: ...
    def get_orig_file_x_size(self) -> int: ...
    def get_orig_file_y_size(self) -> int: ...
    def get_orig_file_z_size(self) -> int: ...
    def set_orig_file_size(self, x: int, y: int, z: int = ...) -> None: ...
    def set_loaded_from_image(self, flag: bool = ...) -> None: ...
    def get_loaded_from_image(self) -> bool: ...
    def set_loaded_from_txo(self, flag: bool = ...) -> None: ...
    def get_loaded_from_txo(self) -> bool: ...
    def get_match_framebuffer_format(self) -> bool: ...
    def set_match_framebuffer_format(self, flag: bool) -> None: ...
    def get_post_load_store_cache(self) -> bool: ...
    def set_post_load_store_cache(self, flag: bool) -> None: ...
    def prepare_now(self, view: int, prepared_objects: PreparedGraphicsObjects, gsg: GraphicsStateGuardianBase) -> TextureContext: ...
    @staticmethod
    def up_to_power_2(value: int) -> int: ...
    @staticmethod
    def down_to_power_2(value: int) -> int: ...
    @overload
    def consider_rescale(self, pnmimage: PNMImage) -> None: ...
    @overload
    def consider_rescale(self, pnmimage: PNMImage, name: str, auto_texture_scale: _AutoTextureScale = ...) -> None: ...
    def rescale_texture(self) -> bool: ...
    @staticmethod
    def format_texture_type(tt: _Texture_TextureType) -> str: ...
    @staticmethod
    def string_texture_type(str: str) -> _Texture_TextureType: ...
    @staticmethod
    def format_component_type(ct: _Texture_ComponentType) -> str: ...
    @staticmethod
    def string_component_type(str: str) -> _Texture_ComponentType: ...
    @staticmethod
    def format_format(f: _Texture_Format) -> str: ...
    @staticmethod
    def string_format(str: str) -> _Texture_Format: ...
    @staticmethod
    def format_compression_mode(cm: _Texture_CompressionMode) -> str: ...
    @staticmethod
    def string_compression_mode(str: str) -> _Texture_CompressionMode: ...
    @staticmethod
    def format_quality_level(tql: _Texture_QualityLevel) -> str: ...
    @staticmethod
    def string_quality_level(str: str) -> _Texture_QualityLevel: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToTypedWritableReferenceCount = upcast_to_TypedWritableReferenceCount
    upcastToNamable = upcast_to_Namable
    makeCopy = make_copy
    setupTexture = setup_texture
    setup1dTexture = setup_1d_texture
    setup2dTexture = setup_2d_texture
    setup3dTexture = setup_3d_texture
    setupCubeMap = setup_cube_map
    setup2dTextureArray = setup_2d_texture_array
    setupCubeMapArray = setup_cube_map_array
    setupBufferTexture = setup_buffer_texture
    generateNormalizationCubeMap = generate_normalization_cube_map
    generateAlphaScaleMap = generate_alpha_scale_map
    clearImage = clear_image
    hasClearColor = has_clear_color
    getClearColor = get_clear_color
    setClearColor = set_clear_color
    clearClearColor = clear_clear_color
    getClearData = get_clear_data
    readTxo = read_txo
    makeFromTxo = make_from_txo
    writeTxo = write_txo
    readDds = read_dds
    readKtx = read_ktx
    loadSubImage = load_sub_image
    loadRelated = load_related
    hasFilename = has_filename
    getFilename = get_filename
    setFilename = set_filename
    clearFilename = clear_filename
    hasAlphaFilename = has_alpha_filename
    getAlphaFilename = get_alpha_filename
    setAlphaFilename = set_alpha_filename
    clearAlphaFilename = clear_alpha_filename
    hasFullpath = has_fullpath
    getFullpath = get_fullpath
    setFullpath = set_fullpath
    clearFullpath = clear_fullpath
    hasAlphaFullpath = has_alpha_fullpath
    getAlphaFullpath = get_alpha_fullpath
    setAlphaFullpath = set_alpha_fullpath
    clearAlphaFullpath = clear_alpha_fullpath
    getXSize = get_x_size
    setXSize = set_x_size
    getYSize = get_y_size
    setYSize = set_y_size
    getZSize = get_z_size
    setZSize = set_z_size
    getNumViews = get_num_views
    setNumViews = set_num_views
    getNumPages = get_num_pages
    getNumComponents = get_num_components
    getComponentWidth = get_component_width
    getTextureType = get_texture_type
    getUsageHint = get_usage_hint
    getFormat = get_format
    setFormat = set_format
    getComponentType = get_component_type
    setComponentType = set_component_type
    getWrapU = get_wrap_u
    setWrapU = set_wrap_u
    getWrapV = get_wrap_v
    setWrapV = set_wrap_v
    getWrapW = get_wrap_w
    setWrapW = set_wrap_w
    getMinfilter = get_minfilter
    getEffectiveMinfilter = get_effective_minfilter
    setMinfilter = set_minfilter
    getMagfilter = get_magfilter
    getEffectiveMagfilter = get_effective_magfilter
    setMagfilter = set_magfilter
    getAnisotropicDegree = get_anisotropic_degree
    getEffectiveAnisotropicDegree = get_effective_anisotropic_degree
    setAnisotropicDegree = set_anisotropic_degree
    getBorderColor = get_border_color
    setBorderColor = set_border_color
    hasCompression = has_compression
    getCompression = get_compression
    setCompression = set_compression
    getRenderToTexture = get_render_to_texture
    setRenderToTexture = set_render_to_texture
    getDefaultSampler = get_default_sampler
    setDefaultSampler = set_default_sampler
    usesMipmaps = uses_mipmaps
    getQualityLevel = get_quality_level
    getEffectiveQualityLevel = get_effective_quality_level
    setQualityLevel = set_quality_level
    getExpectedNumMipmapLevels = get_expected_num_mipmap_levels
    getExpectedMipmapXSize = get_expected_mipmap_x_size
    getExpectedMipmapYSize = get_expected_mipmap_y_size
    getExpectedMipmapZSize = get_expected_mipmap_z_size
    getExpectedMipmapNumPages = get_expected_mipmap_num_pages
    hasRamImage = has_ram_image
    hasUncompressedRamImage = has_uncompressed_ram_image
    mightHaveRamImage = might_have_ram_image
    getRamImageSize = get_ram_image_size
    getRamViewSize = get_ram_view_size
    getRamPageSize = get_ram_page_size
    getExpectedRamImageSize = get_expected_ram_image_size
    getExpectedRamPageSize = get_expected_ram_page_size
    getRamImage = get_ram_image
    getRamImageCompression = get_ram_image_compression
    getUncompressedRamImage = get_uncompressed_ram_image
    getRamImageAs = get_ram_image_as
    modifyRamImage = modify_ram_image
    makeRamImage = make_ram_image
    setRamImage = set_ram_image
    setRamImageAs = set_ram_image_as
    clearRamImage = clear_ram_image
    setKeepRamImage = set_keep_ram_image
    getKeepRamImage = get_keep_ram_image
    isCacheable = is_cacheable
    compressRamImage = compress_ram_image
    uncompressRamImage = uncompress_ram_image
    getNumRamMipmapImages = get_num_ram_mipmap_images
    hasRamMipmapImage = has_ram_mipmap_image
    getNumLoadableRamMipmapImages = get_num_loadable_ram_mipmap_images
    hasAllRamMipmapImages = has_all_ram_mipmap_images
    getRamMipmapImageSize = get_ram_mipmap_image_size
    getRamMipmapViewSize = get_ram_mipmap_view_size
    getRamMipmapPageSize = get_ram_mipmap_page_size
    getExpectedRamMipmapImageSize = get_expected_ram_mipmap_image_size
    getExpectedRamMipmapViewSize = get_expected_ram_mipmap_view_size
    getExpectedRamMipmapPageSize = get_expected_ram_mipmap_page_size
    getRamMipmapImage = get_ram_mipmap_image
    modifyRamMipmapImage = modify_ram_mipmap_image
    makeRamMipmapImage = make_ram_mipmap_image
    setRamMipmapPointerFromInt = set_ram_mipmap_pointer_from_int
    setRamMipmapImage = set_ram_mipmap_image
    clearRamMipmapImage = clear_ram_mipmap_image
    clearRamMipmapImages = clear_ram_mipmap_images
    generateRamMipmapImages = generate_ram_mipmap_images
    getSimpleXSize = get_simple_x_size
    getSimpleYSize = get_simple_y_size
    hasSimpleRamImage = has_simple_ram_image
    getSimpleRamImageSize = get_simple_ram_image_size
    getSimpleRamImage = get_simple_ram_image
    setSimpleRamImage = set_simple_ram_image
    modifySimpleRamImage = modify_simple_ram_image
    newSimpleRamImage = new_simple_ram_image
    generateSimpleRamImage = generate_simple_ram_image
    clearSimpleRamImage = clear_simple_ram_image
    getPropertiesModified = get_properties_modified
    getImageModified = get_image_modified
    getSimpleImageModified = get_simple_image_modified
    hasAutoTextureScale = has_auto_texture_scale
    getAutoTextureScale = get_auto_texture_scale
    setAutoTextureScale = set_auto_texture_scale
    isPrepared = is_prepared
    wasImageModified = was_image_modified
    getDataSizeBytes = get_data_size_bytes
    getActive = get_active
    getResident = get_resident
    releaseAll = release_all
    estimateTextureMemory = estimate_texture_memory
    setAuxData = set_aux_data
    clearAuxData = clear_aux_data
    getAuxData = get_aux_data
    setTexturesPower2 = set_textures_power_2
    getTexturesPower2 = get_textures_power_2
    hasTexturesPower2 = has_textures_power_2
    getPadXSize = get_pad_x_size
    getPadYSize = get_pad_y_size
    getPadZSize = get_pad_z_size
    getTexScale = get_tex_scale
    setPadSize = set_pad_size
    setSizePadded = set_size_padded
    getOrigFileXSize = get_orig_file_x_size
    getOrigFileYSize = get_orig_file_y_size
    getOrigFileZSize = get_orig_file_z_size
    setOrigFileSize = set_orig_file_size
    setLoadedFromImage = set_loaded_from_image
    getLoadedFromImage = get_loaded_from_image
    setLoadedFromTxo = set_loaded_from_txo
    getLoadedFromTxo = get_loaded_from_txo
    getMatchFramebufferFormat = get_match_framebuffer_format
    setMatchFramebufferFormat = set_match_framebuffer_format
    getPostLoadStoreCache = get_post_load_store_cache
    setPostLoadStoreCache = set_post_load_store_cache
    prepareNow = prepare_now
    upToPower2 = up_to_power_2
    downToPower2 = down_to_power_2
    considerRescale = consider_rescale
    rescaleTexture = rescale_texture
    formatTextureType = format_texture_type
    stringTextureType = string_texture_type
    formatComponentType = format_component_type
    stringComponentType = string_component_type
    formatFormat = format_format
    stringFormat = string_format
    formatCompressionMode = format_compression_mode
    stringCompressionMode = string_compression_mode
    formatQualityLevel = format_quality_level
    stringQualityLevel = string_quality_level
    getClassType = get_class_type
    TT1dTexture = TT_1d_texture
    TT2dTexture = TT_2d_texture
    TT3dTexture = TT_3d_texture
    TT2dTextureArray = TT_2d_texture_array
    TTCubeMap = TT_cube_map
    TTBufferTexture = TT_buffer_texture
    TTCubeMapArray = TT_cube_map_array
    TT1dTextureArray = TT_1d_texture_array
    TUnsignedByte = T_unsigned_byte
    TUnsignedShort = T_unsigned_short
    TFloat = T_float
    TUnsignedInt248 = T_unsigned_int_24_8
    TInt = T_int
    TByte = T_byte
    TShort = T_short
    THalfFloat = T_half_float
    TUnsignedInt = T_unsigned_int
    FDepthStencil = F_depth_stencil
    FColorIndex = F_color_index
    FRed = F_red
    FGreen = F_green
    FBlue = F_blue
    FAlpha = F_alpha
    FRgb = F_rgb
    FRgb5 = F_rgb5
    FRgb8 = F_rgb8
    FRgb12 = F_rgb12
    FRgb332 = F_rgb332
    FRgba = F_rgba
    FRgbm = F_rgbm
    FRgba4 = F_rgba4
    FRgba5 = F_rgba5
    FRgba8 = F_rgba8
    FRgba12 = F_rgba12
    FLuminance = F_luminance
    FLuminanceAlpha = F_luminance_alpha
    FLuminanceAlphamask = F_luminance_alphamask
    FRgba16 = F_rgba16
    FRgba32 = F_rgba32
    FDepthComponent = F_depth_component
    FDepthComponent16 = F_depth_component16
    FDepthComponent24 = F_depth_component24
    FDepthComponent32 = F_depth_component32
    FR16 = F_r16
    FRg16 = F_rg16
    FRgb16 = F_rgb16
    FSrgb = F_srgb
    FSrgbAlpha = F_srgb_alpha
    FSluminance = F_sluminance
    FSluminanceAlpha = F_sluminance_alpha
    FR32i = F_r32i
    FR32 = F_r32
    FRg32 = F_rg32
    FRgb32 = F_rgb32
    FR8i = F_r8i
    FRg8i = F_rg8i
    FRgb8i = F_rgb8i
    FRgba8i = F_rgba8i
    FR11G11B10 = F_r11_g11_b10
    FRgb9E5 = F_rgb9_e5
    FRgb10A2 = F_rgb10_a2
    FRg = F_rg
    FR16i = F_r16i
    FRg16i = F_rg16i
    FRgb16i = F_rgb16i
    FRgba16i = F_rgba16i
    FRg32i = F_rg32i
    FRgb32i = F_rgb32i
    FRgba32i = F_rgba32i
    FTNearest = FT_nearest
    FTLinear = FT_linear
    FTNearestMipmapNearest = FT_nearest_mipmap_nearest
    FTLinearMipmapNearest = FT_linear_mipmap_nearest
    FTNearestMipmapLinear = FT_nearest_mipmap_linear
    FTLinearMipmapLinear = FT_linear_mipmap_linear
    FTShadow = FT_shadow
    FTDefault = FT_default
    FTInvalid = FT_invalid
    WMClamp = WM_clamp
    WMRepeat = WM_repeat
    WMMirror = WM_mirror
    WMMirrorOnce = WM_mirror_once
    WMBorderColor = WM_border_color
    WMInvalid = WM_invalid
    CMDefault = CM_default
    CMOff = CM_off
    CMOn = CM_on
    CMFxt1 = CM_fxt1
    CMDxt1 = CM_dxt1
    CMDxt2 = CM_dxt2
    CMDxt3 = CM_dxt3
    CMDxt4 = CM_dxt4
    CMDxt5 = CM_dxt5
    CMPvr12bpp = CM_pvr1_2bpp
    CMPvr14bpp = CM_pvr1_4bpp
    CMRgtc = CM_rgtc
    CMEtc1 = CM_etc1
    CMEtc2 = CM_etc2
    CMEac = CM_eac
    QLDefault = QL_default
    QLFastest = QL_fastest
    QLNormal = QL_normal
    QLBest = QL_best

class Shader(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    SL_none: ClassVar[Literal[0]]
    SL_Cg: ClassVar[Literal[1]]
    SL_GLSL: ClassVar[Literal[2]]
    SL_HLSL: ClassVar[Literal[3]]
    SL_SPIR_V: ClassVar[Literal[4]]
    ST_none: ClassVar[Literal[0]]
    ST_vertex: ClassVar[Literal[1]]
    ST_fragment: ClassVar[Literal[2]]
    ST_geometry: ClassVar[Literal[3]]
    ST_tess_control: ClassVar[Literal[4]]
    ST_tess_evaluation: ClassVar[Literal[5]]
    ST_compute: ClassVar[Literal[6]]
    ST_COUNT: ClassVar[Literal[7]]
    AS_normal: ClassVar[Literal[1]]
    AS_glow: ClassVar[Literal[2]]
    AS_gloss: ClassVar[Literal[4]]
    AS_ramp: ClassVar[Literal[8]]
    AS_shadow: ClassVar[Literal[16]]
    bit_AutoShaderNormal: ClassVar[Literal[0]]
    bit_AutoShaderGlow: ClassVar[Literal[1]]
    bit_AutoShaderGloss: ClassVar[Literal[2]]
    bit_AutoShaderRamp: ClassVar[Literal[3]]
    bit_AutoShaderShadow: ClassVar[Literal[4]]
    def __init__(self, __param0: Shader) -> None: ...
    @overload
    @staticmethod
    def load(file: _Filename, lang: _Shader_ShaderLanguage = ...) -> Shader: ...
    @overload
    @staticmethod
    def load(lang: _Shader_ShaderLanguage, vertex: _Filename, fragment: _Filename, geometry: _Filename = ..., tess_control: _Filename = ..., tess_evaluation: _Filename = ...) -> Shader: ...
    @overload
    @staticmethod
    def make(body: str, lang: _Shader_ShaderLanguage = ...) -> Shader: ...
    @overload
    @staticmethod
    def make(lang: _Shader_ShaderLanguage, vertex: str, fragment: str, geometry: str = ..., tess_control: str = ..., tess_evaluation: str = ...) -> Shader: ...
    @staticmethod
    def load_compute(lang: _Shader_ShaderLanguage, fn: _Filename) -> Shader: ...
    @staticmethod
    def make_compute(lang: _Shader_ShaderLanguage, body: str) -> Shader: ...
    def get_filename(self, type: _Shader_ShaderType = ...) -> Filename: ...
    def set_filename(self, type: _Shader_ShaderType, filename: _Filename) -> None: ...
    def get_text(self, type: _Shader_ShaderType = ...) -> str: ...
    def get_error_flag(self) -> bool: ...
    def get_language(self) -> _Shader_ShaderLanguage: ...
    def has_fullpath(self) -> bool: ...
    def get_fullpath(self) -> Filename: ...
    def get_cache_compiled_shader(self) -> bool: ...
    def set_cache_compiled_shader(self, flag: bool) -> None: ...
    def prepare(self, prepared_objects: PreparedGraphicsObjects) -> AsyncFuture: ...
    def is_prepared(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def release(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def release_all(self) -> int: ...
    def prepare_now(self, prepared_objects: PreparedGraphicsObjects, gsg: GraphicsStateGuardianBase) -> ShaderContext: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    loadCompute = load_compute
    makeCompute = make_compute
    getFilename = get_filename
    setFilename = set_filename
    getText = get_text
    getErrorFlag = get_error_flag
    getLanguage = get_language
    hasFullpath = has_fullpath
    getFullpath = get_fullpath
    getCacheCompiledShader = get_cache_compiled_shader
    setCacheCompiledShader = set_cache_compiled_shader
    isPrepared = is_prepared
    releaseAll = release_all
    prepareNow = prepare_now
    getClassType = get_class_type
    SLNone = SL_none
    SLCg = SL_Cg
    SLGLSL = SL_GLSL
    SLHLSL = SL_HLSL
    SLSPIRV = SL_SPIR_V
    STNone = ST_none
    STVertex = ST_vertex
    STFragment = ST_fragment
    STGeometry = ST_geometry
    STTessControl = ST_tess_control
    STTessEvaluation = ST_tess_evaluation
    STCompute = ST_compute
    STCOUNT = ST_COUNT
    ASNormal = AS_normal
    ASGlow = AS_glow
    ASGloss = AS_gloss
    ASRamp = AS_ramp
    ASShadow = AS_shadow
    BitAutoShaderNormal = bit_AutoShaderNormal
    BitAutoShaderGlow = bit_AutoShaderGlow
    BitAutoShaderGloss = bit_AutoShaderGloss
    BitAutoShaderRamp = bit_AutoShaderRamp
    BitAutoShaderShadow = bit_AutoShaderShadow

class ShaderBuffer(TypedWritableReferenceCount, Namable, GeomEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def data_size_bytes(self) -> int: ...
    @property
    def usage_hint(self) -> _GeomEnums_UsageHint: ...
    @overload
    def __init__(self, __param0: ShaderBuffer) -> None: ...
    @overload
    def __init__(self, name: str, size: int, usage_hint: _GeomEnums_UsageHint) -> None: ...
    @overload
    def __init__(self, name: str, initial_data: bytes, usage_hint: _GeomEnums_UsageHint) -> None: ...
    def upcast_to_TypedWritableReferenceCount(self) -> TypedWritableReferenceCount: ...
    def upcast_to_Namable(self) -> Namable: ...
    def upcast_to_GeomEnums(self) -> GeomEnums: ...
    def prepare(self, prepared_objects: PreparedGraphicsObjects) -> None: ...
    def is_prepared(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def prepare_now(self, prepared_objects: PreparedGraphicsObjects, gsg: GraphicsStateGuardianBase) -> BufferContext: ...
    def release(self, prepared_objects: PreparedGraphicsObjects) -> bool: ...
    def release_all(self) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToTypedWritableReferenceCount = upcast_to_TypedWritableReferenceCount
    upcastToNamable = upcast_to_Namable
    upcastToGeomEnums = upcast_to_GeomEnums
    isPrepared = is_prepared
    prepareNow = prepare_now
    releaseAll = release_all
    getClassType = get_class_type

class PreparedGraphicsObjects(ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_name(self) -> str: ...
    def set_graphics_memory_limit(self, limit: int) -> None: ...
    def get_graphics_memory_limit(self) -> int: ...
    def show_graphics_memory_lru(self, out: ostream) -> None: ...
    def show_residency_trackers(self, out: ostream) -> None: ...
    def release_all(self) -> None: ...
    def get_num_queued(self) -> int: ...
    def get_num_prepared(self) -> int: ...
    def enqueue_texture(self, tex: Texture) -> None: ...
    def is_texture_queued(self, tex: Texture) -> bool: ...
    def dequeue_texture(self, tex: Texture) -> bool: ...
    def is_texture_prepared(self, tex: Texture) -> bool: ...
    @overload
    def release_texture(self, tex: Texture) -> None: ...
    @overload
    def release_texture(self, tc: TextureContext) -> None: ...
    def release_all_textures(self) -> int: ...
    def get_num_queued_textures(self) -> int: ...
    def get_num_prepared_textures(self) -> int: ...
    def prepare_texture_now(self, tex: Texture, view: int, gsg: GraphicsStateGuardianBase) -> TextureContext: ...
    def enqueue_sampler(self, sampler: SamplerState) -> None: ...
    def is_sampler_queued(self, sampler: SamplerState) -> bool: ...
    def dequeue_sampler(self, sampler: SamplerState) -> bool: ...
    def is_sampler_prepared(self, sampler: SamplerState) -> bool: ...
    def release_sampler(self, sampler: SamplerState) -> None: ...
    def release_all_samplers(self) -> int: ...
    def get_num_queued_samplers(self) -> int: ...
    def get_num_prepared_samplers(self) -> int: ...
    def enqueue_geom(self, geom: Geom) -> None: ...
    def is_geom_queued(self, geom: Geom) -> bool: ...
    def dequeue_geom(self, geom: Geom) -> bool: ...
    def is_geom_prepared(self, geom: Geom) -> bool: ...
    def release_geom(self, gc: GeomContext) -> None: ...
    def release_all_geoms(self) -> int: ...
    def get_num_queued_geoms(self) -> int: ...
    def get_num_prepared_geoms(self) -> int: ...
    def prepare_geom_now(self, geom: Geom, gsg: GraphicsStateGuardianBase) -> GeomContext: ...
    def enqueue_shader(self, shader: Shader) -> None: ...
    def is_shader_queued(self, shader: Shader) -> bool: ...
    def dequeue_shader(self, shader: Shader) -> bool: ...
    def is_shader_prepared(self, shader: Shader) -> bool: ...
    def release_shader(self, sc: ShaderContext) -> None: ...
    def release_all_shaders(self) -> int: ...
    def get_num_queued_shaders(self) -> int: ...
    def get_num_prepared_shaders(self) -> int: ...
    def prepare_shader_now(self, shader: Shader, gsg: GraphicsStateGuardianBase) -> ShaderContext: ...
    def enqueue_vertex_buffer(self, data: GeomVertexArrayData) -> None: ...
    def is_vertex_buffer_queued(self, data: GeomVertexArrayData) -> bool: ...
    def dequeue_vertex_buffer(self, data: GeomVertexArrayData) -> bool: ...
    def is_vertex_buffer_prepared(self, data: GeomVertexArrayData) -> bool: ...
    def release_vertex_buffer(self, vbc: VertexBufferContext) -> None: ...
    def release_all_vertex_buffers(self) -> int: ...
    def get_num_queued_vertex_buffers(self) -> int: ...
    def get_num_prepared_vertex_buffers(self) -> int: ...
    def prepare_vertex_buffer_now(self, data: GeomVertexArrayData, gsg: GraphicsStateGuardianBase) -> VertexBufferContext: ...
    def enqueue_index_buffer(self, data: GeomPrimitive) -> None: ...
    def is_index_buffer_queued(self, data: GeomPrimitive) -> bool: ...
    def dequeue_index_buffer(self, data: GeomPrimitive) -> bool: ...
    def is_index_buffer_prepared(self, data: GeomPrimitive) -> bool: ...
    def release_index_buffer(self, ibc: IndexBufferContext) -> None: ...
    def release_all_index_buffers(self) -> int: ...
    def get_num_queued_index_buffers(self) -> int: ...
    def get_num_prepared_index_buffers(self) -> int: ...
    def prepare_index_buffer_now(self, data: GeomPrimitive, gsg: GraphicsStateGuardianBase) -> IndexBufferContext: ...
    def enqueue_shader_buffer(self, data: ShaderBuffer) -> None: ...
    def is_shader_buffer_queued(self, data: ShaderBuffer) -> bool: ...
    def dequeue_shader_buffer(self, data: ShaderBuffer) -> bool: ...
    def is_shader_buffer_prepared(self, data: ShaderBuffer) -> bool: ...
    def release_shader_buffer(self, bc: BufferContext) -> None: ...
    def release_all_shader_buffers(self) -> int: ...
    def get_num_queued_shader_buffers(self) -> int: ...
    def get_num_prepared_shader_buffers(self) -> int: ...
    def prepare_shader_buffer_now(self, data: ShaderBuffer, gsg: GraphicsStateGuardianBase) -> BufferContext: ...
    getName = get_name
    setGraphicsMemoryLimit = set_graphics_memory_limit
    getGraphicsMemoryLimit = get_graphics_memory_limit
    showGraphicsMemoryLru = show_graphics_memory_lru
    showResidencyTrackers = show_residency_trackers
    releaseAll = release_all
    getNumQueued = get_num_queued
    getNumPrepared = get_num_prepared
    enqueueTexture = enqueue_texture
    isTextureQueued = is_texture_queued
    dequeueTexture = dequeue_texture
    isTexturePrepared = is_texture_prepared
    releaseTexture = release_texture
    releaseAllTextures = release_all_textures
    getNumQueuedTextures = get_num_queued_textures
    getNumPreparedTextures = get_num_prepared_textures
    prepareTextureNow = prepare_texture_now
    enqueueSampler = enqueue_sampler
    isSamplerQueued = is_sampler_queued
    dequeueSampler = dequeue_sampler
    isSamplerPrepared = is_sampler_prepared
    releaseSampler = release_sampler
    releaseAllSamplers = release_all_samplers
    getNumQueuedSamplers = get_num_queued_samplers
    getNumPreparedSamplers = get_num_prepared_samplers
    enqueueGeom = enqueue_geom
    isGeomQueued = is_geom_queued
    dequeueGeom = dequeue_geom
    isGeomPrepared = is_geom_prepared
    releaseGeom = release_geom
    releaseAllGeoms = release_all_geoms
    getNumQueuedGeoms = get_num_queued_geoms
    getNumPreparedGeoms = get_num_prepared_geoms
    prepareGeomNow = prepare_geom_now
    enqueueShader = enqueue_shader
    isShaderQueued = is_shader_queued
    dequeueShader = dequeue_shader
    isShaderPrepared = is_shader_prepared
    releaseShader = release_shader
    releaseAllShaders = release_all_shaders
    getNumQueuedShaders = get_num_queued_shaders
    getNumPreparedShaders = get_num_prepared_shaders
    prepareShaderNow = prepare_shader_now
    enqueueVertexBuffer = enqueue_vertex_buffer
    isVertexBufferQueued = is_vertex_buffer_queued
    dequeueVertexBuffer = dequeue_vertex_buffer
    isVertexBufferPrepared = is_vertex_buffer_prepared
    releaseVertexBuffer = release_vertex_buffer
    releaseAllVertexBuffers = release_all_vertex_buffers
    getNumQueuedVertexBuffers = get_num_queued_vertex_buffers
    getNumPreparedVertexBuffers = get_num_prepared_vertex_buffers
    prepareVertexBufferNow = prepare_vertex_buffer_now
    enqueueIndexBuffer = enqueue_index_buffer
    isIndexBufferQueued = is_index_buffer_queued
    dequeueIndexBuffer = dequeue_index_buffer
    isIndexBufferPrepared = is_index_buffer_prepared
    releaseIndexBuffer = release_index_buffer
    releaseAllIndexBuffers = release_all_index_buffers
    getNumQueuedIndexBuffers = get_num_queued_index_buffers
    getNumPreparedIndexBuffers = get_num_prepared_index_buffers
    prepareIndexBufferNow = prepare_index_buffer_now
    enqueueShaderBuffer = enqueue_shader_buffer
    isShaderBufferQueued = is_shader_buffer_queued
    dequeueShaderBuffer = dequeue_shader_buffer
    isShaderBufferPrepared = is_shader_buffer_prepared
    releaseShaderBuffer = release_shader_buffer
    releaseAllShaderBuffers = release_all_shader_buffers
    getNumQueuedShaderBuffers = get_num_queued_shader_buffers
    getNumPreparedShaderBuffers = get_num_prepared_shader_buffers
    prepareShaderBufferNow = prepare_shader_buffer_now

class IndexBufferContext(BufferContext, AdaptiveLruPage):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def upcast_to_BufferContext(self) -> BufferContext: ...
    def upcast_to_AdaptiveLruPage(self) -> AdaptiveLruPage: ...
    def get_data(self) -> GeomPrimitive: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToBufferContext = upcast_to_BufferContext
    upcastToAdaptiveLruPage = upcast_to_AdaptiveLruPage
    getData = get_data
    getClassType = get_class_type

class Lens(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    change_event: str
    coordinate_system: _CoordinateSystem
    film_size: LVecBase2f
    film_offset: LVector2f
    focal_length: float
    fov: LVecBase2f
    min_fov: float
    aspect_ratio: float
    near: float
    far: float
    view_hpr: LVecBase3f
    interocular_distance: float
    convergence_distance: float
    view_mat: LMatrix4f
    keystone: LVecBase2f
    SC_mono: ClassVar[Literal[0]]
    SC_left: ClassVar[Literal[1]]
    SC_right: ClassVar[Literal[2]]
    SC_stereo: ClassVar[Literal[3]]
    FC_roll: ClassVar[Literal[1]]
    FC_camera_plane: ClassVar[Literal[2]]
    FC_off_axis: ClassVar[Literal[4]]
    FC_aspect_ratio: ClassVar[Literal[8]]
    FC_shear: ClassVar[Literal[16]]
    FC_keystone: ClassVar[Literal[32]]
    @property
    def nodal_point(self) -> LPoint3f: ...
    def make_copy(self) -> Lens: ...
    def extrude(self, point2d: LVecBase2f | _Vec3f, near_point: _Vec3f, far_point: _Vec3f) -> bool: ...
    def extrude_depth(self, point2d: _Vec3f, point3d: _Vec3f) -> bool: ...
    def extrude_vec(self, point2d: LVecBase2f | _Vec3f, vec3d: _Vec3f) -> bool: ...
    def project(self, point3d: _Vec3f, point2d: LVecBase2f | _Vec3f) -> bool: ...
    def set_change_event(self, event: str) -> None: ...
    def get_change_event(self) -> str: ...
    def set_coordinate_system(self, cs: _CoordinateSystem) -> None: ...
    def get_coordinate_system(self) -> _CoordinateSystem: ...
    def clear(self) -> None: ...
    @overload
    def set_film_size(self, film_size: LVecBase2f) -> None: ...
    @overload
    def set_film_size(self, width: float) -> None: ...
    @overload
    def set_film_size(self, width: float, height: float) -> None: ...
    def get_film_size(self) -> LVecBase2f: ...
    @overload
    def set_film_offset(self, film_offset: LVecBase2f) -> None: ...
    @overload
    def set_film_offset(self, x: float, y: float) -> None: ...
    def get_film_offset(self) -> LVector2f: ...
    def set_focal_length(self, focal_length: float) -> None: ...
    def get_focal_length(self) -> float: ...
    def set_min_fov(self, min_fov: float) -> None: ...
    @overload
    def set_fov(self, fov: LVecBase2f | float) -> None: ...
    @overload
    def set_fov(self, hfov: float, vfov: float) -> None: ...
    def get_fov(self) -> LVecBase2f: ...
    def get_hfov(self) -> float: ...
    def get_vfov(self) -> float: ...
    def get_min_fov(self) -> float: ...
    def set_aspect_ratio(self, aspect_ratio: float) -> None: ...
    def get_aspect_ratio(self) -> float: ...
    def set_near(self, near_distance: float) -> None: ...
    def get_near(self) -> float: ...
    def set_far(self, far_distance: float) -> None: ...
    def get_far(self) -> float: ...
    def set_near_far(self, near_distance: float, far_distance: float) -> None: ...
    @staticmethod
    def get_default_near() -> float: ...
    @staticmethod
    def get_default_far() -> float: ...
    @overload
    def set_view_hpr(self, view_hpr: _Vec3f) -> None: ...
    @overload
    def set_view_hpr(self, h: float, p: float, r: float) -> None: ...
    def get_view_hpr(self) -> LVecBase3f: ...
    @overload
    def set_view_vector(self, view_vector: _Vec3f, up_vector: _Vec3f) -> None: ...
    @overload
    def set_view_vector(self, x: float, y: float, z: float, i: float, j: float, k: float) -> None: ...
    def get_view_vector(self) -> LVector3f: ...
    def get_up_vector(self) -> LVector3f: ...
    def get_nodal_point(self) -> LPoint3f: ...
    def set_interocular_distance(self, interocular_distance: float) -> None: ...
    def get_interocular_distance(self) -> float: ...
    def set_convergence_distance(self, convergence_distance: float) -> None: ...
    def get_convergence_distance(self) -> float: ...
    def set_view_mat(self, view_mat: _Mat4f) -> None: ...
    def get_view_mat(self) -> LMatrix4f: ...
    def clear_view_mat(self) -> None: ...
    def set_keystone(self, keystone: LVecBase2f) -> None: ...
    def get_keystone(self) -> LVecBase2f: ...
    def clear_keystone(self) -> None: ...
    def set_custom_film_mat(self, custom_film_mat: _Mat4f) -> None: ...
    def get_custom_film_mat(self) -> LMatrix4f: ...
    def clear_custom_film_mat(self) -> None: ...
    def set_frustum_from_corners(self, ul: _Vec3f, ur: _Vec3f, ll: _Vec3f, lr: _Vec3f, flags: int) -> None: ...
    def recompute_all(self) -> None: ...
    def is_linear(self) -> bool: ...
    def is_perspective(self) -> bool: ...
    def is_orthographic(self) -> bool: ...
    def make_geometry(self) -> Geom: ...
    def make_bounds(self) -> BoundingVolume: ...
    def get_projection_mat(self, channel: _Lens_StereoChannel = ...) -> LMatrix4f: ...
    def get_projection_mat_inv(self, channel: _Lens_StereoChannel = ...) -> LMatrix4f: ...
    def get_film_mat(self) -> LMatrix4f: ...
    def get_film_mat_inv(self) -> LMatrix4f: ...
    def get_lens_mat(self) -> LMatrix4f: ...
    def get_lens_mat_inv(self) -> LMatrix4f: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def get_last_change(self) -> UpdateSeq: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    makeCopy = make_copy
    extrudeDepth = extrude_depth
    extrudeVec = extrude_vec
    setChangeEvent = set_change_event
    getChangeEvent = get_change_event
    setCoordinateSystem = set_coordinate_system
    getCoordinateSystem = get_coordinate_system
    setFilmSize = set_film_size
    getFilmSize = get_film_size
    setFilmOffset = set_film_offset
    getFilmOffset = get_film_offset
    setFocalLength = set_focal_length
    getFocalLength = get_focal_length
    setMinFov = set_min_fov
    setFov = set_fov
    getFov = get_fov
    getHfov = get_hfov
    getVfov = get_vfov
    getMinFov = get_min_fov
    setAspectRatio = set_aspect_ratio
    getAspectRatio = get_aspect_ratio
    setNear = set_near
    getNear = get_near
    setFar = set_far
    getFar = get_far
    setNearFar = set_near_far
    getDefaultNear = get_default_near
    getDefaultFar = get_default_far
    setViewHpr = set_view_hpr
    getViewHpr = get_view_hpr
    setViewVector = set_view_vector
    getViewVector = get_view_vector
    getUpVector = get_up_vector
    getNodalPoint = get_nodal_point
    setInterocularDistance = set_interocular_distance
    getInterocularDistance = get_interocular_distance
    setConvergenceDistance = set_convergence_distance
    getConvergenceDistance = get_convergence_distance
    setViewMat = set_view_mat
    getViewMat = get_view_mat
    clearViewMat = clear_view_mat
    setKeystone = set_keystone
    getKeystone = get_keystone
    clearKeystone = clear_keystone
    setCustomFilmMat = set_custom_film_mat
    getCustomFilmMat = get_custom_film_mat
    clearCustomFilmMat = clear_custom_film_mat
    setFrustumFromCorners = set_frustum_from_corners
    recomputeAll = recompute_all
    isLinear = is_linear
    isPerspective = is_perspective
    isOrthographic = is_orthographic
    makeGeometry = make_geometry
    makeBounds = make_bounds
    getProjectionMat = get_projection_mat
    getProjectionMatInv = get_projection_mat_inv
    getFilmMat = get_film_mat
    getFilmMatInv = get_film_mat_inv
    getLensMat = get_lens_mat
    getLensMatInv = get_lens_mat_inv
    getLastChange = get_last_change
    getClassType = get_class_type
    SCMono = SC_mono
    SCLeft = SC_left
    SCRight = SC_right
    SCStereo = SC_stereo
    FCRoll = FC_roll
    FCCameraPlane = FC_camera_plane
    FCOffAxis = FC_off_axis
    FCAspectRatio = FC_aspect_ratio
    FCShear = FC_shear
    FCKeystone = FC_keystone

class Material(TypedWritableReferenceCount, Namable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    base_color: LVecBase4f
    ambient: LVecBase4f
    diffuse: LVecBase4f
    specular: LVecBase4f
    emission: LVecBase4f
    shininess: float
    roughness: float
    metallic: float
    refractive_index: float
    local: bool
    twoside: bool
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: Material) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: Material) -> bool: ...
    def __le__(self, other: Material) -> bool: ...
    def upcast_to_TypedWritableReferenceCount(self) -> TypedWritableReferenceCount: ...
    def upcast_to_Namable(self) -> Namable: ...
    def assign(self, copy: Material) -> Material: ...
    @staticmethod
    def get_default() -> Material: ...
    def has_base_color(self) -> bool: ...
    def get_base_color(self) -> LVecBase4f: ...
    def set_base_color(self, color: _Vec4f) -> None: ...
    def clear_base_color(self) -> None: ...
    def has_ambient(self) -> bool: ...
    def get_ambient(self) -> LVecBase4f: ...
    def set_ambient(self, color: _Vec4f) -> None: ...
    def clear_ambient(self) -> None: ...
    def has_diffuse(self) -> bool: ...
    def get_diffuse(self) -> LVecBase4f: ...
    def set_diffuse(self, color: _Vec4f) -> None: ...
    def clear_diffuse(self) -> None: ...
    def has_specular(self) -> bool: ...
    def get_specular(self) -> LVecBase4f: ...
    def set_specular(self, color: _Vec4f) -> None: ...
    def clear_specular(self) -> None: ...
    def has_emission(self) -> bool: ...
    def get_emission(self) -> LVecBase4f: ...
    def set_emission(self, color: _Vec4f) -> None: ...
    def clear_emission(self) -> None: ...
    def get_shininess(self) -> float: ...
    def set_shininess(self, shininess: float) -> None: ...
    def has_roughness(self) -> bool: ...
    def get_roughness(self) -> float: ...
    def set_roughness(self, roughness: float) -> None: ...
    def has_metallic(self) -> bool: ...
    def get_metallic(self) -> float: ...
    def set_metallic(self, metallic: float) -> None: ...
    def clear_metallic(self) -> None: ...
    def has_refractive_index(self) -> bool: ...
    def get_refractive_index(self) -> float: ...
    def set_refractive_index(self, refractive_index: float) -> None: ...
    def get_local(self) -> bool: ...
    def set_local(self, local: bool) -> None: ...
    def get_twoside(self) -> bool: ...
    def set_twoside(self, twoside: bool) -> None: ...
    def compare_to(self, other: Material) -> int: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent: int) -> None: ...
    def is_attrib_locked(self) -> bool: ...
    def set_attrib_lock(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToTypedWritableReferenceCount = upcast_to_TypedWritableReferenceCount
    upcastToNamable = upcast_to_Namable
    getDefault = get_default
    hasBaseColor = has_base_color
    getBaseColor = get_base_color
    setBaseColor = set_base_color
    clearBaseColor = clear_base_color
    hasAmbient = has_ambient
    getAmbient = get_ambient
    setAmbient = set_ambient
    clearAmbient = clear_ambient
    hasDiffuse = has_diffuse
    getDiffuse = get_diffuse
    setDiffuse = set_diffuse
    clearDiffuse = clear_diffuse
    hasSpecular = has_specular
    getSpecular = get_specular
    setSpecular = set_specular
    clearSpecular = clear_specular
    hasEmission = has_emission
    getEmission = get_emission
    setEmission = set_emission
    clearEmission = clear_emission
    getShininess = get_shininess
    setShininess = set_shininess
    hasRoughness = has_roughness
    getRoughness = get_roughness
    setRoughness = set_roughness
    hasMetallic = has_metallic
    getMetallic = get_metallic
    setMetallic = set_metallic
    clearMetallic = clear_metallic
    hasRefractiveIndex = has_refractive_index
    getRefractiveIndex = get_refractive_index
    setRefractiveIndex = set_refractive_index
    getLocal = get_local
    setLocal = set_local
    getTwoside = get_twoside
    setTwoside = set_twoside
    compareTo = compare_to
    isAttribLocked = is_attrib_locked
    setAttribLock = set_attrib_lock
    getClassType = get_class_type

class MaterialPool:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @staticmethod
    def get_material(temp: Material) -> Material: ...
    @staticmethod
    def release_material(temp: Material) -> None: ...
    @staticmethod
    def release_all_materials() -> None: ...
    @staticmethod
    def garbage_collect() -> int: ...
    @staticmethod
    def list_contents(out: ostream) -> None: ...
    @staticmethod
    def write(out: ostream) -> None: ...
    getMaterial = get_material
    releaseMaterial = release_material
    releaseAllMaterials = release_all_materials
    garbageCollect = garbage_collect
    listContents = list_contents

class MatrixLens(Lens):
    DtoolClassDict: ClassVar[dict[str, Any]]
    user_mat: LMatrix4f
    def __init__(self) -> None: ...
    def set_user_mat(self, user_mat: _Mat4f) -> None: ...
    def get_user_mat(self) -> LMatrix4f: ...
    def set_left_eye_mat(self, user_mat: _Mat4f) -> None: ...
    def clear_left_eye_mat(self) -> None: ...
    def has_left_eye_mat(self) -> bool: ...
    def get_left_eye_mat(self) -> LMatrix4f: ...
    def set_right_eye_mat(self, user_mat: _Mat4f) -> None: ...
    def clear_right_eye_mat(self) -> None: ...
    def has_right_eye_mat(self) -> bool: ...
    def get_right_eye_mat(self) -> LMatrix4f: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setUserMat = set_user_mat
    getUserMat = get_user_mat
    setLeftEyeMat = set_left_eye_mat
    clearLeftEyeMat = clear_left_eye_mat
    hasLeftEyeMat = has_left_eye_mat
    getLeftEyeMat = get_left_eye_mat
    setRightEyeMat = set_right_eye_mat
    clearRightEyeMat = clear_right_eye_mat
    hasRightEyeMat = has_right_eye_mat
    getRightEyeMat = get_right_eye_mat
    getClassType = get_class_type

class OrthographicLens(Lens):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class ParamTextureSampler(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def texture(self) -> Texture: ...
    @property
    def sampler(self) -> SamplerState: ...
    def __init__(self, tex: Texture, sampler: SamplerState) -> None: ...
    def get_texture(self) -> Texture: ...
    def get_sampler(self) -> SamplerState: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getTexture = get_texture
    getSampler = get_sampler
    getClassType = get_class_type

class ParamTextureImage(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def texture(self) -> Texture: ...
    @property
    def read_access(self) -> bool: ...
    @property
    def write_access(self) -> bool: ...
    @property
    def bind_level(self) -> int: ...
    @property
    def bind_layer(self) -> int: ...
    def __init__(self, tex: Texture, read: bool, write: bool, z: int = ..., n: int = ...) -> None: ...
    def get_texture(self) -> Texture: ...
    def has_read_access(self) -> bool: ...
    def has_write_access(self) -> bool: ...
    def get_bind_layered(self) -> bool: ...
    def get_bind_level(self) -> int: ...
    def get_bind_layer(self) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getTexture = get_texture
    hasReadAccess = has_read_access
    hasWriteAccess = has_write_access
    getBindLayered = get_bind_layered
    getBindLevel = get_bind_level
    getBindLayer = get_bind_layer
    getClassType = get_class_type

class PerspectiveLens(Lens):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, hfov: float, vfov: float) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class TextureReloadRequest(AsyncTask):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def texture(self) -> Texture: ...
    @overload
    def __init__(self, __param0: TextureReloadRequest) -> None: ...
    @overload
    def __init__(self, name: str, pgo: PreparedGraphicsObjects, texture: Texture, allow_compressed: bool) -> None: ...
    def get_prepared_graphics_objects(self) -> PreparedGraphicsObjects: ...
    def get_texture(self) -> Texture: ...
    def get_allow_compressed(self) -> bool: ...
    def is_ready(self) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getPreparedGraphicsObjects = get_prepared_graphics_objects
    getTexture = get_texture
    getAllowCompressed = get_allow_compressed
    isReady = is_ready
    getClassType = get_class_type

class TextureContext(BufferContext, AdaptiveLruPage):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def upcast_to_BufferContext(self) -> BufferContext: ...
    def upcast_to_AdaptiveLruPage(self) -> AdaptiveLruPage: ...
    def get_texture(self) -> Texture: ...
    def get_view(self) -> int: ...
    def get_native_id(self) -> int: ...
    def get_native_buffer_id(self) -> int: ...
    def was_modified(self) -> bool: ...
    def was_properties_modified(self) -> bool: ...
    def was_image_modified(self) -> bool: ...
    def was_simple_image_modified(self) -> bool: ...
    def get_properties_modified(self) -> UpdateSeq: ...
    def get_image_modified(self) -> UpdateSeq: ...
    def get_simple_image_modified(self) -> UpdateSeq: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToBufferContext = upcast_to_BufferContext
    upcastToAdaptiveLruPage = upcast_to_AdaptiveLruPage
    getTexture = get_texture
    getView = get_view
    getNativeId = get_native_id
    getNativeBufferId = get_native_buffer_id
    wasModified = was_modified
    wasPropertiesModified = was_properties_modified
    wasImageModified = was_image_modified
    wasSimpleImageModified = was_simple_image_modified
    getPropertiesModified = get_properties_modified
    getImageModified = get_image_modified
    getSimpleImageModified = get_simple_image_modified
    getClassType = get_class_type

class ShaderContext(SavedContext):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def shader(self) -> Shader: ...
    def get_shader(self) -> Shader: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getShader = get_shader
    getClassType = get_class_type

class UserVertexSlider(VertexSlider):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, name: InternalName | str) -> None: ...
    def set_slider(self, slider: float) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setSlider = set_slider
    getClassType = get_class_type

class UserVertexTransform(VertexTransform):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, name: str) -> None: ...
    def get_name(self) -> str: ...
    def set_matrix(self, matrix: _Mat4f) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getName = get_name
    setMatrix = set_matrix
    getClassType = get_class_type

class VideoTexture(Texture, AnimInterface):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def video_width(self) -> int: ...
    @property
    def video_height(self) -> int: ...
    def upcast_to_Texture(self) -> Texture: ...
    def upcast_to_AnimInterface(self) -> AnimInterface: ...
    def get_keep_ram_image(self) -> bool: ...
    def get_video_width(self) -> int: ...
    def get_video_height(self) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToTexture = upcast_to_Texture
    upcastToAnimInterface = upcast_to_AnimInterface
    getKeepRamImage = get_keep_ram_image
    getVideoWidth = get_video_width
    getVideoHeight = get_video_height
    getClassType = get_class_type

class VertexBufferContext(BufferContext, AdaptiveLruPage):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def upcast_to_BufferContext(self) -> BufferContext: ...
    def upcast_to_AdaptiveLruPage(self) -> AdaptiveLruPage: ...
    def get_data(self) -> GeomVertexArrayData: ...
    def changed_size(self, reader: GeomVertexArrayDataHandle) -> bool: ...
    def changed_usage_hint(self, reader: GeomVertexArrayDataHandle) -> bool: ...
    def was_modified(self, reader: GeomVertexArrayDataHandle) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToBufferContext = upcast_to_BufferContext
    upcastToAdaptiveLruPage = upcast_to_AdaptiveLruPage
    getData = get_data
    changedSize = changed_size
    changedUsageHint = changed_usage_hint
    wasModified = was_modified
    getClassType = get_class_type

class TextureCollection:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, sequence: Any) -> None: ...
    @overload
    def __init__(self, copy: TextureCollection) -> None: ...
    def __getitem__(self, index: int) -> Texture: ...
    def __len__(self) -> int: ...
    def __iadd__(self, other: TextureCollection) -> TextureCollection: ...
    def __add__(self, other: TextureCollection) -> TextureCollection: ...
    def assign(self, copy: TextureCollection) -> TextureCollection: ...
    def add_texture(self, texture: Texture) -> None: ...
    def remove_texture(self, texture: Texture) -> bool: ...
    def add_textures_from(self, other: TextureCollection) -> None: ...
    def remove_textures_from(self, other: TextureCollection) -> None: ...
    def remove_duplicate_textures(self) -> None: ...
    def has_texture(self, texture: Texture) -> bool: ...
    def clear(self) -> None: ...
    def reserve(self, num: int) -> None: ...
    def find_texture(self, name: str) -> Texture: ...
    def get_num_textures(self) -> int: ...
    def get_texture(self, index: int) -> Texture: ...
    def append(self, texture: Texture) -> None: ...
    def extend(self, other: TextureCollection) -> None: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def get_textures(self) -> tuple[Texture, ...]: ...
    addTexture = add_texture
    removeTexture = remove_texture
    addTexturesFrom = add_textures_from
    removeTexturesFrom = remove_textures_from
    removeDuplicateTextures = remove_duplicate_textures
    hasTexture = has_texture
    findTexture = find_texture
    getNumTextures = get_num_textures
    getTexture = get_texture
    getTextures = get_textures

class TexturePool:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @staticmethod
    def has_texture(filename: _Filename) -> bool: ...
    @staticmethod
    def verify_texture(filename: _Filename) -> bool: ...
    @overload
    @staticmethod
    def get_texture(filename: _Filename, primary_file_num_channels: int = ..., read_mipmaps: bool = ...) -> Texture: ...
    @overload
    @staticmethod
    def get_texture(filename: _Filename, alpha_filename: _Filename, primary_file_num_channels: int = ..., alpha_file_channel: int = ..., read_mipmaps: bool = ...) -> Texture: ...
    @overload
    @staticmethod
    def load_texture(filename: _Filename, primary_file_num_channels: int = ..., read_mipmaps: bool = ..., options: LoaderOptions = ...) -> Texture: ...
    @overload
    @staticmethod
    def load_texture(filename: _Filename, alpha_filename: _Filename, primary_file_num_channels: int = ..., alpha_file_channel: int = ..., read_mipmaps: bool = ..., options: LoaderOptions = ...) -> Texture: ...
    @staticmethod
    def load_3d_texture(filename_pattern: _Filename, read_mipmaps: bool = ..., options: LoaderOptions = ...) -> Texture: ...
    @staticmethod
    def load_2d_texture_array(filename_pattern: _Filename, read_mipmaps: bool = ..., options: LoaderOptions = ...) -> Texture: ...
    @staticmethod
    def load_cube_map(filename_pattern: _Filename, read_mipmaps: bool = ..., options: LoaderOptions = ...) -> Texture: ...
    @staticmethod
    def get_normalization_cube_map(size: int) -> Texture: ...
    @staticmethod
    def get_alpha_scale_map() -> Texture: ...
    @staticmethod
    def add_texture(texture: Texture) -> None: ...
    @staticmethod
    def release_texture(texture: Texture) -> None: ...
    @staticmethod
    def release_all_textures() -> None: ...
    @staticmethod
    def rehash() -> None: ...
    @staticmethod
    def garbage_collect() -> int: ...
    @overload
    @staticmethod
    def list_contents() -> None: ...
    @overload
    @staticmethod
    def list_contents(out: ostream) -> None: ...
    @staticmethod
    def find_texture(name: str) -> Texture: ...
    @staticmethod
    def find_all_textures(name: str = ...) -> TextureCollection: ...
    @staticmethod
    def set_fake_texture_image(filename: _Filename) -> None: ...
    @staticmethod
    def clear_fake_texture_image() -> None: ...
    @staticmethod
    def has_fake_texture_image() -> bool: ...
    @staticmethod
    def get_fake_texture_image() -> Filename: ...
    @staticmethod
    def make_texture(extension: str) -> Texture: ...
    @staticmethod
    def write(out: ostream) -> None: ...
    hasTexture = has_texture
    verifyTexture = verify_texture
    getTexture = get_texture
    loadTexture = load_texture
    load3dTexture = load_3d_texture
    load2dTextureArray = load_2d_texture_array
    loadCubeMap = load_cube_map
    getNormalizationCubeMap = get_normalization_cube_map
    getAlphaScaleMap = get_alpha_scale_map
    addTexture = add_texture
    releaseTexture = release_texture
    releaseAllTextures = release_all_textures
    garbageCollect = garbage_collect
    listContents = list_contents
    findTexture = find_texture
    findAllTextures = find_all_textures
    setFakeTextureImage = set_fake_texture_image
    clearFakeTextureImage = clear_fake_texture_image
    hasFakeTextureImage = has_fake_texture_image
    getFakeTextureImage = get_fake_texture_image
    makeTexture = make_texture

class TexturePeeker(ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, __param0: TexturePeeker) -> None: ...
    def get_x_size(self) -> int: ...
    def get_y_size(self) -> int: ...
    def get_z_size(self) -> int: ...
    @overload
    def has_pixel(self, x: int, y: int) -> bool: ...
    @overload
    def has_pixel(self, x: int, y: int, z: int) -> bool: ...
    @overload
    def lookup(self, color: _Vec4f, u: float, v: float) -> None: ...
    @overload
    def lookup(self, color: _Vec4f, u: float, v: float, w: float) -> None: ...
    @overload
    def fetch_pixel(self, color: _Vec4f, x: int, y: int) -> None: ...
    @overload
    def fetch_pixel(self, color: _Vec4f, x: int, y: int, z: int) -> None: ...
    def lookup_bilinear(self, color: _Vec4f, u: float, v: float) -> bool: ...
    @overload
    def filter_rect(self, color: _Vec4f, min_u: float, min_v: float, max_u: float, max_v: float) -> None: ...
    @overload
    def filter_rect(self, color: _Vec4f, min_u: float, min_v: float, min_w: float, max_u: float, max_v: float, max_w: float) -> None: ...
    getXSize = get_x_size
    getYSize = get_y_size
    getZSize = get_z_size
    hasPixel = has_pixel
    fetchPixel = fetch_pixel
    lookupBilinear = lookup_bilinear
    filterRect = filter_rect

class TextureStagePool:
    DtoolClassDict: ClassVar[dict[str, Any]]
    mode: _TextureStagePool_Mode
    M_none: ClassVar[Literal[0]]
    M_name: ClassVar[Literal[1]]
    M_unique: ClassVar[Literal[2]]
    @staticmethod
    def get_stage(temp: TextureStage) -> TextureStage: ...
    @staticmethod
    def release_stage(temp: TextureStage) -> None: ...
    @staticmethod
    def release_all_stages() -> None: ...
    @staticmethod
    def set_mode(mode: _TextureStagePool_Mode) -> None: ...
    @staticmethod
    def get_mode() -> _TextureStagePool_Mode: ...
    @staticmethod
    def garbage_collect() -> int: ...
    @staticmethod
    def list_contents(out: ostream) -> None: ...
    @staticmethod
    def write(out: ostream) -> None: ...
    getStage = get_stage
    releaseStage = release_stage
    releaseAllStages = release_all_stages
    setMode = set_mode
    getMode = get_mode
    garbageCollect = garbage_collect
    listContents = list_contents
    MNone = M_none
    MName = M_name
    MUnique = M_unique
