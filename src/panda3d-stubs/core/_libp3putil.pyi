from collections.abc import Callable, Sequence
from enum import Enum
from os import PathLike
from typing import Any, ClassVar, Literal, TypeAlias, final, overload
from panda3d.core import (
    ConfigPage,
    ConfigVariableColor,
    ConfigVariableFilename,
    ConfigVariableSearchPath,
    DatagramGenerator,
    DatagramIterator,
    DatagramSink,
    FileReference,
    Filename,
    HashVal,
    LMatrix3d,
    LMatrix3f,
    LMatrix4d,
    LMatrix4f,
    LVecBase2d,
    LVecBase2f,
    LVecBase2i,
    LVecBase3d,
    LVecBase3f,
    LVecBase3i,
    LVecBase4d,
    LVecBase4f,
    LVecBase4i,
    PointerToVoid,
    ReferenceCount,
    Thread,
    TypeHandle,
    TypedObject,
    TypedReferenceCount,
    UnalignedLMatrix4d,
    UnalignedLMatrix4f,
    UnalignedLVecBase4d,
    UnalignedLVecBase4f,
    UnalignedLVecBase4i,
    VirtualFile,
    istream,
    ostream,
)

_ColorSpace: TypeAlias = Literal[0, 1, 2, 3]
_Filename: TypeAlias = Filename | ConfigVariableFilename | str | bytes | PathLike
_AutoTextureScale: TypeAlias = Literal[0, 1, 2, 3, 4]
_BamEnums_BamEndian: TypeAlias = Literal[0, 1, 1]
_BamEnums_BamTextureMode: TypeAlias = Literal[0, 1, 2, 3, 4]
_ClockObject_Mode: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7]
_Vec3d: TypeAlias = LVecBase3d | LMatrix3d.Row | LMatrix3d.CRow
_Vec3f: TypeAlias = LVecBase3f | LMatrix3f.Row | LMatrix3f.CRow
_Vec4d: TypeAlias = LVecBase4d | UnalignedLVecBase4d | LMatrix4d.Row | LMatrix4d.CRow
_Vec4f: TypeAlias = LVecBase4f | UnalignedLVecBase4f | LMatrix4f.Row | LMatrix4f.CRow | ConfigVariableColor
_Vec4i: TypeAlias = LVecBase4i | UnalignedLVecBase4i
_Mat4d: TypeAlias = LMatrix4d | UnalignedLMatrix4d
_Mat4f: TypeAlias = LMatrix4f | UnalignedLMatrix4f

class ConstPointerToArray_ushort(PointerToArrayBase_ushort):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_ushort | PointerToArray_ushort) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> int: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> int: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: int) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_ushort(PointerToBase_ReferenceCountedVector_ushort):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_ushort(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class PointerToArray_ushort(PointerToArrayBase_ushort):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_ushort) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> int: ...
    def __setitem__(self, n: int, value: int) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_ushort: ...
    def clear(self) -> None: ...
    def push_back(self, x: int) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> int: ...
    def set_element(self, n: int, value: int) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: int) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class AnimInterface:
    DtoolClassDict: ClassVar[dict[str, Any]]
    play_rate: float
    @property
    def frame_rate(self) -> float: ...
    @property
    def num_frames(self) -> int: ...
    @property
    def frame(self) -> int: ...
    @property
    def next_frame(self) -> int: ...
    @property
    def frac(self) -> float: ...
    @property
    def full_frame(self) -> int: ...
    @property
    def full_fframe(self) -> float: ...
    @property
    def playing(self) -> bool: ...
    @overload
    def play(self) -> None: ...
    @overload
    def play(self, _from: float, to: float) -> None: ...
    @overload
    def loop(self, restart: bool) -> None: ...
    @overload
    def loop(self, restart: bool, _from: float, to: float) -> None: ...
    @overload
    def pingpong(self, restart: bool) -> None: ...
    @overload
    def pingpong(self, restart: bool, _from: float, to: float) -> None: ...
    def stop(self) -> None: ...
    def pose(self, frame: float) -> None: ...
    def set_play_rate(self, play_rate: float) -> None: ...
    def get_play_rate(self) -> float: ...
    def get_frame_rate(self) -> float: ...
    def get_num_frames(self) -> int: ...
    def get_frame(self) -> int: ...
    def get_next_frame(self) -> int: ...
    def get_frac(self) -> float: ...
    def get_full_frame(self) -> int: ...
    def get_full_fframe(self) -> float: ...
    def is_playing(self) -> bool: ...
    def output(self, out: ostream) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setPlayRate = set_play_rate
    getPlayRate = get_play_rate
    getFrameRate = get_frame_rate
    getNumFrames = get_num_frames
    getFrame = get_frame
    getNextFrame = get_next_frame
    getFrac = get_frac
    getFullFrame = get_full_frame
    getFullFframe = get_full_fframe
    isPlaying = is_playing
    getClassType = get_class_type

class UpdateSeq:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def seq(self) -> int: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: UpdateSeq) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: UpdateSeq) -> bool: ...
    def __le__(self, other: UpdateSeq) -> bool: ...
    def __gt__(self, other: UpdateSeq) -> bool: ...
    def __ge__(self, other: UpdateSeq) -> bool: ...
    @staticmethod
    def initial() -> UpdateSeq: ...
    @staticmethod
    def old() -> UpdateSeq: ...
    @staticmethod
    def fresh() -> UpdateSeq: ...
    def assign(self, copy: UpdateSeq) -> UpdateSeq: ...
    def clear(self) -> None: ...
    def is_initial(self) -> bool: ...
    def is_old(self) -> bool: ...
    def is_fresh(self) -> bool: ...
    def is_special(self) -> bool: ...
    def increment(self) -> UpdateSeq: ...
    def increment(self, __param0: int) -> UpdateSeq: ...
    def get_seq(self) -> int: ...
    def output(self, out: ostream) -> None: ...
    isInitial = is_initial
    isOld = is_old
    isFresh = is_fresh
    isSpecial = is_special
    getSeq = get_seq

class TypedWritable(TypedObject):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def fillin(self, scan: DatagramIterator, manager: BamReader) -> None: ...
    def mark_bam_modified(self) -> None: ...
    def get_bam_modified(self) -> UpdateSeq: ...
    @overload
    def encode_to_bam_stream(self) -> bytes: ...
    @overload
    def encode_to_bam_stream(self, data: bytes, writer: BamWriter = ...) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    markBamModified = mark_bam_modified
    getBamModified = get_bam_modified
    encodeToBamStream = encode_to_bam_stream
    getClassType = get_class_type

class TypedWritableReferenceCount(TypedWritable, ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def upcast_to_TypedWritable(self) -> TypedWritable: ...
    def upcast_to_ReferenceCount(self) -> ReferenceCount: ...
    @staticmethod
    def decode_from_bam_stream(data: bytes, reader: BamReader = ...) -> TypedWritableReferenceCount: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToTypedWritable = upcast_to_TypedWritable
    upcastToReferenceCount = upcast_to_ReferenceCount
    decodeFromBamStream = decode_from_bam_stream
    getClassType = get_class_type

class BamCacheRecord(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    data: TypedWritable
    @property
    def source_pathname(self) -> Filename: ...
    @property
    def cache_filename(self) -> Filename: ...
    @property
    def source_timestamp(self) -> int: ...
    @property
    def recorded_time(self) -> int: ...
    def __eq__(self, __other: object) -> bool: ...
    def upcast_to_TypedWritableReferenceCount(self) -> TypedWritableReferenceCount: ...
    def make_copy(self) -> BamCacheRecord: ...
    def get_source_pathname(self) -> Filename: ...
    def get_cache_filename(self) -> Filename: ...
    def get_source_timestamp(self) -> int: ...
    def get_recorded_time(self) -> int: ...
    def get_num_dependent_files(self) -> int: ...
    def get_dependent_pathname(self, n: int) -> Filename: ...
    def dependents_unchanged(self) -> bool: ...
    def clear_dependent_files(self) -> None: ...
    @overload
    def add_dependent_file(self, pathname: _Filename) -> None: ...
    @overload
    def add_dependent_file(self, file: VirtualFile) -> None: ...
    def has_data(self) -> bool: ...
    def clear_data(self) -> None: ...
    def get_data(self) -> TypedWritable: ...
    @overload
    def set_data(self, ptr: TypedWritable) -> None: ...
    @overload
    def set_data(self, ptr: TypedWritable, ref_ptr: ReferenceCount) -> None: ...
    @overload
    def set_data(self, ptr: TypedWritable, dummy: int) -> None: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToTypedWritableReferenceCount = upcast_to_TypedWritableReferenceCount
    makeCopy = make_copy
    getSourcePathname = get_source_pathname
    getCacheFilename = get_cache_filename
    getSourceTimestamp = get_source_timestamp
    getRecordedTime = get_recorded_time
    getNumDependentFiles = get_num_dependent_files
    getDependentPathname = get_dependent_pathname
    dependentsUnchanged = dependents_unchanged
    clearDependentFiles = clear_dependent_files
    addDependentFile = add_dependent_file
    hasData = has_data
    clearData = clear_data
    getData = get_data
    setData = set_data
    getClassType = get_class_type

class BamCache:
    DtoolClassDict: ClassVar[dict[str, Any]]
    active: bool
    cache_models: bool
    cache_textures: bool
    cache_compressed_textures: bool
    cache_compiled_shaders: bool
    root: Filename
    flush_time: int
    cache_max_kbytes: int
    read_only: bool
    def __init__(self) -> None: ...
    def set_active(self, flag: bool) -> None: ...
    def get_active(self) -> bool: ...
    def set_cache_models(self, flag: bool) -> None: ...
    def get_cache_models(self) -> bool: ...
    def set_cache_textures(self, flag: bool) -> None: ...
    def get_cache_textures(self) -> bool: ...
    def set_cache_compressed_textures(self, flag: bool) -> None: ...
    def get_cache_compressed_textures(self) -> bool: ...
    def set_cache_compiled_shaders(self, flag: bool) -> None: ...
    def get_cache_compiled_shaders(self) -> bool: ...
    def set_root(self, root: _Filename) -> None: ...
    def get_root(self) -> Filename: ...
    def set_flush_time(self, flush_time: int) -> None: ...
    def get_flush_time(self) -> int: ...
    def set_cache_max_kbytes(self, max_kbytes: int) -> None: ...
    def get_cache_max_kbytes(self) -> int: ...
    def set_read_only(self, ro: bool) -> None: ...
    def get_read_only(self) -> bool: ...
    def lookup(self, source_filename: _Filename, cache_extension: str) -> BamCacheRecord: ...
    def store(self, record: BamCacheRecord) -> bool: ...
    def consider_flush_index(self) -> None: ...
    def flush_index(self) -> None: ...
    def list_index(self, out: ostream, indent_level: int = ...) -> None: ...
    @staticmethod
    def get_global_ptr() -> BamCache: ...
    @staticmethod
    def consider_flush_global_index() -> None: ...
    @staticmethod
    def flush_global_index() -> None: ...
    setActive = set_active
    getActive = get_active
    setCacheModels = set_cache_models
    getCacheModels = get_cache_models
    setCacheTextures = set_cache_textures
    getCacheTextures = get_cache_textures
    setCacheCompressedTextures = set_cache_compressed_textures
    getCacheCompressedTextures = get_cache_compressed_textures
    setCacheCompiledShaders = set_cache_compiled_shaders
    getCacheCompiledShaders = get_cache_compiled_shaders
    setRoot = set_root
    getRoot = get_root
    setFlushTime = set_flush_time
    getFlushTime = get_flush_time
    setCacheMaxKbytes = set_cache_max_kbytes
    getCacheMaxKbytes = get_cache_max_kbytes
    setReadOnly = set_read_only
    getReadOnly = get_read_only
    considerFlushIndex = consider_flush_index
    flushIndex = flush_index
    listIndex = list_index
    getGlobalPtr = get_global_ptr
    considerFlushGlobalIndex = consider_flush_global_index
    flushGlobalIndex = flush_global_index

class BamEnums:
    DtoolClassDict: ClassVar[dict[str, Any]]
    BE_bigendian: ClassVar[Literal[0]]
    BE_littleendian: ClassVar[Literal[1]]
    BE_native: ClassVar[Literal[1]]
    BOC_push: ClassVar[Literal[0]]
    BOC_pop: ClassVar[Literal[1]]
    BOC_adjunct: ClassVar[Literal[2]]
    BOC_remove: ClassVar[Literal[3]]
    BOC_file_data: ClassVar[Literal[4]]
    BTM_unchanged: ClassVar[Literal[0]]
    BTM_fullpath: ClassVar[Literal[1]]
    BTM_relative: ClassVar[Literal[2]]
    BTM_basename: ClassVar[Literal[3]]
    BTM_rawdata: ClassVar[Literal[4]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: BamEnums) -> None: ...
    BEBigendian = BE_bigendian
    BELittleendian = BE_littleendian
    BENative = BE_native
    BOCPush = BOC_push
    BOCPop = BOC_pop
    BOCAdjunct = BOC_adjunct
    BOCRemove = BOC_remove
    BOCFileData = BOC_file_data
    BTMUnchanged = BTM_unchanged
    BTMFullpath = BTM_fullpath
    BTMRelative = BTM_relative
    BTMBasename = BTM_basename
    BTMRawdata = BTM_rawdata

class LoaderOptions:
    DtoolClassDict: ClassVar[dict[str, Any]]
    flags: int
    texture_flags: int
    texture_num_views: int
    auto_texture_scale: _AutoTextureScale
    LF_search: ClassVar[Literal[1]]
    LF_report_errors: ClassVar[Literal[2]]
    LF_convert_skeleton: ClassVar[Literal[4]]
    LF_convert_channels: ClassVar[Literal[8]]
    LF_convert_anim: ClassVar[Literal[12]]
    LF_no_disk_cache: ClassVar[Literal[16]]
    LF_no_ram_cache: ClassVar[Literal[32]]
    LF_no_cache: ClassVar[Literal[48]]
    LF_cache_only: ClassVar[Literal[64]]
    LF_allow_instance: ClassVar[Literal[128]]
    TF_preload: ClassVar[Literal[4]]
    TF_preload_simple: ClassVar[Literal[8]]
    TF_allow_1d: ClassVar[Literal[16]]
    TF_generate_mipmaps: ClassVar[Literal[32]]
    TF_multiview: ClassVar[Literal[64]]
    TF_integer: ClassVar[Literal[128]]
    TF_float: ClassVar[Literal[256]]
    TF_allow_compression: ClassVar[Literal[512]]
    @overload
    def __init__(self, flags: int = ...) -> None: ...
    @overload
    def __init__(self, __param0: LoaderOptions) -> None: ...
    @overload
    def __init__(self, flags: int, texture_flags: int) -> None: ...
    def set_flags(self, flags: int) -> None: ...
    def get_flags(self) -> int: ...
    def set_texture_flags(self, flags: int) -> None: ...
    def get_texture_flags(self) -> int: ...
    def set_texture_num_views(self, num_views: int) -> None: ...
    def get_texture_num_views(self) -> int: ...
    def set_auto_texture_scale(self, scale: _AutoTextureScale) -> None: ...
    def get_auto_texture_scale(self) -> _AutoTextureScale: ...
    def output(self, out: ostream) -> None: ...
    setFlags = set_flags
    getFlags = get_flags
    setTextureFlags = set_texture_flags
    getTextureFlags = get_texture_flags
    setTextureNumViews = set_texture_num_views
    getTextureNumViews = get_texture_num_views
    setAutoTextureScale = set_auto_texture_scale
    getAutoTextureScale = get_auto_texture_scale
    LFSearch = LF_search
    LFReportErrors = LF_report_errors
    LFConvertSkeleton = LF_convert_skeleton
    LFConvertChannels = LF_convert_channels
    LFConvertAnim = LF_convert_anim
    LFNoDiskCache = LF_no_disk_cache
    LFNoRamCache = LF_no_ram_cache
    LFNoCache = LF_no_cache
    LFCacheOnly = LF_cache_only
    LFAllowInstance = LF_allow_instance
    TFPreload = TF_preload
    TFPreloadSimple = TF_preload_simple
    TFAllow1d = TF_allow_1d
    TFGenerateMipmaps = TF_generate_mipmaps
    TFMultiview = TF_multiview
    TFInteger = TF_integer
    TFFloat = TF_float
    TFAllowCompression = TF_allow_compression

class BamReader(BamEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    source: DatagramGenerator
    loader_options: LoaderOptions
    @property
    def filename(self) -> Filename: ...
    @property
    def file_version(self) -> Any: ...
    @property
    def file_endian(self) -> _BamEnums_BamEndian: ...
    @property
    def file_stdfloat_double(self) -> bool: ...
    def __init__(self, source: DatagramGenerator = ...) -> None: ...
    def set_source(self, source: DatagramGenerator) -> None: ...
    def get_source(self) -> DatagramGenerator: ...
    def init(self) -> bool: ...
    def get_filename(self) -> Filename: ...
    def get_loader_options(self) -> LoaderOptions: ...
    def set_loader_options(self, options: LoaderOptions) -> None: ...
    def read_object(self) -> TypedWritable: ...
    def is_eof(self) -> bool: ...
    def resolve(self) -> bool: ...
    def change_pointer(self, orig_pointer: TypedWritable, new_pointer: TypedWritable) -> bool: ...
    def get_file_major_ver(self) -> int: ...
    def get_file_minor_ver(self) -> int: ...
    def get_file_endian(self) -> _BamEnums_BamEndian: ...
    def get_file_stdfloat_double(self) -> bool: ...
    def get_current_major_ver(self) -> int: ...
    def get_current_minor_ver(self) -> int: ...
    def get_file_version(self) -> Any: ...
    @staticmethod
    def register_factory(handle: TypeHandle, func: Any) -> None: ...
    setSource = set_source
    getSource = get_source
    getFilename = get_filename
    getLoaderOptions = get_loader_options
    setLoaderOptions = set_loader_options
    readObject = read_object
    isEof = is_eof
    changePointer = change_pointer
    getFileMajorVer = get_file_major_ver
    getFileMinorVer = get_file_minor_ver
    getFileEndian = get_file_endian
    getFileStdfloatDouble = get_file_stdfloat_double
    getCurrentMajorVer = get_current_major_ver
    getCurrentMinorVer = get_current_minor_ver
    getFileVersion = get_file_version
    registerFactory = register_factory

class BamWriter(BamEnums):
    DtoolClassDict: ClassVar[dict[str, Any]]
    target: DatagramSink
    root_node: TypedWritable
    @property
    def filename(self) -> Filename: ...
    @property
    def file_endian(self) -> _BamEnums_BamEndian: ...
    @property
    def file_stdfloat_double(self) -> bool: ...
    @property
    def file_texture_mode(self) -> _BamEnums_BamTextureMode: ...
    @overload
    def __init__(self, target: DatagramSink = ...) -> None: ...
    @overload
    def __init__(self, __param0: BamWriter) -> None: ...
    def set_target(self, target: DatagramSink) -> None: ...
    def get_target(self) -> DatagramSink: ...
    def init(self) -> bool: ...
    def get_filename(self) -> Filename: ...
    def write_object(self, obj: TypedWritable) -> bool: ...
    def has_object(self, obj: TypedWritable) -> bool: ...
    def flush(self) -> None: ...
    def get_file_major_ver(self) -> int: ...
    def get_file_minor_ver(self) -> int: ...
    def set_file_minor_ver(self, minor_ver: int) -> None: ...
    def get_file_endian(self) -> _BamEnums_BamEndian: ...
    def get_file_stdfloat_double(self) -> bool: ...
    def get_file_texture_mode(self) -> _BamEnums_BamTextureMode: ...
    def set_file_texture_mode(self, file_texture_mode: _BamEnums_BamTextureMode) -> None: ...
    def get_root_node(self) -> TypedWritable: ...
    def set_root_node(self, root_node: TypedWritable) -> None: ...
    setTarget = set_target
    getTarget = get_target
    getFilename = get_filename
    writeObject = write_object
    hasObject = has_object
    getFileMajorVer = get_file_major_ver
    getFileMinorVer = get_file_minor_ver
    setFileMinorVer = set_file_minor_ver
    getFileEndian = get_file_endian
    getFileStdfloatDouble = get_file_stdfloat_double
    getFileTextureMode = get_file_texture_mode
    setFileTextureMode = set_file_texture_mode
    getRootNode = get_root_node
    setRootNode = set_root_node

class BitMask_uint16_t_16:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: BitMask_uint16_t_16) -> None: ...
    @overload
    def __init__(self, init_value: int) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: BitMask_uint16_t_16) -> bool: ...
    def __and__(self, other: BitMask_uint16_t_16) -> BitMask_uint16_t_16: ...
    def __or__(self, other: BitMask_uint16_t_16) -> BitMask_uint16_t_16: ...
    def __xor__(self, other: BitMask_uint16_t_16) -> BitMask_uint16_t_16: ...
    def __invert__(self) -> BitMask_uint16_t_16: ...
    def __lshift__(self, shift: int) -> BitMask_uint16_t_16: ...
    def __rshift__(self, shift: int) -> BitMask_uint16_t_16: ...
    def __iand__(self, other: BitMask_uint16_t_16) -> BitMask_uint16_t_16: ...
    def __ior__(self, other: BitMask_uint16_t_16) -> BitMask_uint16_t_16: ...
    def __ixor__(self, other: BitMask_uint16_t_16) -> BitMask_uint16_t_16: ...
    def __ilshift__(self, shift: int) -> BitMask_uint16_t_16: ...
    def __irshift__(self, shift: int) -> BitMask_uint16_t_16: ...
    def __bool__(self) -> bool: ...
    def __le__(self, other: BitMask_uint16_t_16) -> bool: ...
    @staticmethod
    def all_on() -> BitMask_uint16_t_16: ...
    @staticmethod
    def all_off() -> BitMask_uint16_t_16: ...
    @staticmethod
    def lower_on(on_bits: int) -> BitMask_uint16_t_16: ...
    @staticmethod
    def bit(index: int) -> BitMask_uint16_t_16: ...
    @staticmethod
    def range(low_bit: int, size: int) -> BitMask_uint16_t_16: ...
    @staticmethod
    def has_max_num_bits() -> bool: ...
    @staticmethod
    def get_max_num_bits() -> int: ...
    def get_num_bits(self) -> int: ...
    def get_bit(self, index: int) -> bool: ...
    def set_bit(self, index: int) -> None: ...
    def clear_bit(self, index: int) -> None: ...
    def set_bit_to(self, index: int, value: bool) -> None: ...
    def is_zero(self) -> bool: ...
    def is_all_on(self) -> bool: ...
    def extract(self, low_bit: int, size: int) -> int: ...
    def store(self, value: int, low_bit: int, size: int) -> None: ...
    def has_any_of(self, low_bit: int, size: int) -> bool: ...
    def has_all_of(self, low_bit: int, size: int) -> bool: ...
    def set_range(self, low_bit: int, size: int) -> None: ...
    def clear_range(self, low_bit: int, size: int) -> None: ...
    def set_range_to(self, value: bool, low_bit: int, size: int) -> None: ...
    def get_word(self) -> int: ...
    def set_word(self, value: int) -> None: ...
    def get_num_on_bits(self) -> int: ...
    def get_num_off_bits(self) -> int: ...
    def get_lowest_on_bit(self) -> int: ...
    def get_lowest_off_bit(self) -> int: ...
    def get_highest_on_bit(self) -> int: ...
    def get_highest_off_bit(self) -> int: ...
    def get_next_higher_different_bit(self, low_bit: int) -> int: ...
    def invert_in_place(self) -> None: ...
    def has_bits_in_common(self, other: BitMask_uint16_t_16) -> bool: ...
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    def output_binary(self, out: ostream, spaces_every: int = ...) -> None: ...
    def output_hex(self, out: ostream, spaces_every: int = ...) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def compare_to(self, other: BitMask_uint16_t_16) -> int: ...
    def flood_down_in_place(self) -> None: ...
    def flood_up_in_place(self) -> None: ...
    def flood_bits_down(self) -> BitMask_uint16_t_16: ...
    def flood_bits_up(self) -> BitMask_uint16_t_16: ...
    @overload
    def keep_next_highest_bit(self) -> BitMask_uint16_t_16: ...
    @overload
    def keep_next_highest_bit(self, other: BitMask_uint16_t_16) -> BitMask_uint16_t_16: ...
    @overload
    def keep_next_highest_bit(self, index: int) -> BitMask_uint16_t_16: ...
    @overload
    def keep_next_lowest_bit(self) -> BitMask_uint16_t_16: ...
    @overload
    def keep_next_lowest_bit(self, other: BitMask_uint16_t_16) -> BitMask_uint16_t_16: ...
    @overload
    def keep_next_lowest_bit(self, index: int) -> BitMask_uint16_t_16: ...
    def get_key(self) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    allOn = all_on
    allOff = all_off
    lowerOn = lower_on
    hasMaxNumBits = has_max_num_bits
    getMaxNumBits = get_max_num_bits
    getNumBits = get_num_bits
    getBit = get_bit
    setBit = set_bit
    clearBit = clear_bit
    setBitTo = set_bit_to
    isZero = is_zero
    isAllOn = is_all_on
    hasAnyOf = has_any_of
    hasAllOf = has_all_of
    setRange = set_range
    clearRange = clear_range
    setRangeTo = set_range_to
    getWord = get_word
    setWord = set_word
    getNumOnBits = get_num_on_bits
    getNumOffBits = get_num_off_bits
    getLowestOnBit = get_lowest_on_bit
    getLowestOffBit = get_lowest_off_bit
    getHighestOnBit = get_highest_on_bit
    getHighestOffBit = get_highest_off_bit
    getNextHigherDifferentBit = get_next_higher_different_bit
    invertInPlace = invert_in_place
    hasBitsInCommon = has_bits_in_common
    outputBinary = output_binary
    outputHex = output_hex
    compareTo = compare_to
    floodDownInPlace = flood_down_in_place
    floodUpInPlace = flood_up_in_place
    floodBitsDown = flood_bits_down
    floodBitsUp = flood_bits_up
    keepNextHighestBit = keep_next_highest_bit
    keepNextLowestBit = keep_next_lowest_bit
    getKey = get_key
    getClassType = get_class_type

class BitMask_uint32_t_32:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: BitMask_uint32_t_32) -> None: ...
    @overload
    def __init__(self, init_value: int) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: BitMask_uint32_t_32) -> bool: ...
    def __and__(self, other: BitMask_uint32_t_32) -> BitMask_uint32_t_32: ...
    def __or__(self, other: BitMask_uint32_t_32) -> BitMask_uint32_t_32: ...
    def __xor__(self, other: BitMask_uint32_t_32) -> BitMask_uint32_t_32: ...
    def __invert__(self) -> BitMask_uint32_t_32: ...
    def __lshift__(self, shift: int) -> BitMask_uint32_t_32: ...
    def __rshift__(self, shift: int) -> BitMask_uint32_t_32: ...
    def __iand__(self, other: BitMask_uint32_t_32) -> BitMask_uint32_t_32: ...
    def __ior__(self, other: BitMask_uint32_t_32) -> BitMask_uint32_t_32: ...
    def __ixor__(self, other: BitMask_uint32_t_32) -> BitMask_uint32_t_32: ...
    def __ilshift__(self, shift: int) -> BitMask_uint32_t_32: ...
    def __irshift__(self, shift: int) -> BitMask_uint32_t_32: ...
    def __bool__(self) -> bool: ...
    def __le__(self, other: BitMask_uint32_t_32) -> bool: ...
    @staticmethod
    def all_on() -> BitMask_uint32_t_32: ...
    @staticmethod
    def all_off() -> BitMask_uint32_t_32: ...
    @staticmethod
    def lower_on(on_bits: int) -> BitMask_uint32_t_32: ...
    @staticmethod
    def bit(index: int) -> BitMask_uint32_t_32: ...
    @staticmethod
    def range(low_bit: int, size: int) -> BitMask_uint32_t_32: ...
    @staticmethod
    def has_max_num_bits() -> bool: ...
    @staticmethod
    def get_max_num_bits() -> int: ...
    def get_num_bits(self) -> int: ...
    def get_bit(self, index: int) -> bool: ...
    def set_bit(self, index: int) -> None: ...
    def clear_bit(self, index: int) -> None: ...
    def set_bit_to(self, index: int, value: bool) -> None: ...
    def is_zero(self) -> bool: ...
    def is_all_on(self) -> bool: ...
    def extract(self, low_bit: int, size: int) -> int: ...
    def store(self, value: int, low_bit: int, size: int) -> None: ...
    def has_any_of(self, low_bit: int, size: int) -> bool: ...
    def has_all_of(self, low_bit: int, size: int) -> bool: ...
    def set_range(self, low_bit: int, size: int) -> None: ...
    def clear_range(self, low_bit: int, size: int) -> None: ...
    def set_range_to(self, value: bool, low_bit: int, size: int) -> None: ...
    def get_word(self) -> int: ...
    def set_word(self, value: int) -> None: ...
    def get_num_on_bits(self) -> int: ...
    def get_num_off_bits(self) -> int: ...
    def get_lowest_on_bit(self) -> int: ...
    def get_lowest_off_bit(self) -> int: ...
    def get_highest_on_bit(self) -> int: ...
    def get_highest_off_bit(self) -> int: ...
    def get_next_higher_different_bit(self, low_bit: int) -> int: ...
    def invert_in_place(self) -> None: ...
    def has_bits_in_common(self, other: BitMask_uint32_t_32) -> bool: ...
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    def output_binary(self, out: ostream, spaces_every: int = ...) -> None: ...
    def output_hex(self, out: ostream, spaces_every: int = ...) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def compare_to(self, other: BitMask_uint32_t_32) -> int: ...
    def flood_down_in_place(self) -> None: ...
    def flood_up_in_place(self) -> None: ...
    def flood_bits_down(self) -> BitMask_uint32_t_32: ...
    def flood_bits_up(self) -> BitMask_uint32_t_32: ...
    @overload
    def keep_next_highest_bit(self) -> BitMask_uint32_t_32: ...
    @overload
    def keep_next_highest_bit(self, other: BitMask_uint32_t_32) -> BitMask_uint32_t_32: ...
    @overload
    def keep_next_highest_bit(self, index: int) -> BitMask_uint32_t_32: ...
    @overload
    def keep_next_lowest_bit(self) -> BitMask_uint32_t_32: ...
    @overload
    def keep_next_lowest_bit(self, other: BitMask_uint32_t_32) -> BitMask_uint32_t_32: ...
    @overload
    def keep_next_lowest_bit(self, index: int) -> BitMask_uint32_t_32: ...
    def get_key(self) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    allOn = all_on
    allOff = all_off
    lowerOn = lower_on
    hasMaxNumBits = has_max_num_bits
    getMaxNumBits = get_max_num_bits
    getNumBits = get_num_bits
    getBit = get_bit
    setBit = set_bit
    clearBit = clear_bit
    setBitTo = set_bit_to
    isZero = is_zero
    isAllOn = is_all_on
    hasAnyOf = has_any_of
    hasAllOf = has_all_of
    setRange = set_range
    clearRange = clear_range
    setRangeTo = set_range_to
    getWord = get_word
    setWord = set_word
    getNumOnBits = get_num_on_bits
    getNumOffBits = get_num_off_bits
    getLowestOnBit = get_lowest_on_bit
    getLowestOffBit = get_lowest_off_bit
    getHighestOnBit = get_highest_on_bit
    getHighestOffBit = get_highest_off_bit
    getNextHigherDifferentBit = get_next_higher_different_bit
    invertInPlace = invert_in_place
    hasBitsInCommon = has_bits_in_common
    outputBinary = output_binary
    outputHex = output_hex
    compareTo = compare_to
    floodDownInPlace = flood_down_in_place
    floodUpInPlace = flood_up_in_place
    floodBitsDown = flood_bits_down
    floodBitsUp = flood_bits_up
    keepNextHighestBit = keep_next_highest_bit
    keepNextLowestBit = keep_next_lowest_bit
    getKey = get_key
    getClassType = get_class_type

class BitMask_uint64_t_64:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: BitMask_uint64_t_64) -> None: ...
    @overload
    def __init__(self, init_value: int) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: BitMask_uint64_t_64) -> bool: ...
    def __and__(self, other: BitMask_uint64_t_64) -> BitMask_uint64_t_64: ...
    def __or__(self, other: BitMask_uint64_t_64) -> BitMask_uint64_t_64: ...
    def __xor__(self, other: BitMask_uint64_t_64) -> BitMask_uint64_t_64: ...
    def __invert__(self) -> BitMask_uint64_t_64: ...
    def __lshift__(self, shift: int) -> BitMask_uint64_t_64: ...
    def __rshift__(self, shift: int) -> BitMask_uint64_t_64: ...
    def __iand__(self, other: BitMask_uint64_t_64) -> BitMask_uint64_t_64: ...
    def __ior__(self, other: BitMask_uint64_t_64) -> BitMask_uint64_t_64: ...
    def __ixor__(self, other: BitMask_uint64_t_64) -> BitMask_uint64_t_64: ...
    def __ilshift__(self, shift: int) -> BitMask_uint64_t_64: ...
    def __irshift__(self, shift: int) -> BitMask_uint64_t_64: ...
    def __bool__(self) -> bool: ...
    def __le__(self, other: BitMask_uint64_t_64) -> bool: ...
    @staticmethod
    def all_on() -> BitMask_uint64_t_64: ...
    @staticmethod
    def all_off() -> BitMask_uint64_t_64: ...
    @staticmethod
    def lower_on(on_bits: int) -> BitMask_uint64_t_64: ...
    @staticmethod
    def bit(index: int) -> BitMask_uint64_t_64: ...
    @staticmethod
    def range(low_bit: int, size: int) -> BitMask_uint64_t_64: ...
    @staticmethod
    def has_max_num_bits() -> bool: ...
    @staticmethod
    def get_max_num_bits() -> int: ...
    def get_num_bits(self) -> int: ...
    def get_bit(self, index: int) -> bool: ...
    def set_bit(self, index: int) -> None: ...
    def clear_bit(self, index: int) -> None: ...
    def set_bit_to(self, index: int, value: bool) -> None: ...
    def is_zero(self) -> bool: ...
    def is_all_on(self) -> bool: ...
    def extract(self, low_bit: int, size: int) -> int: ...
    def store(self, value: int, low_bit: int, size: int) -> None: ...
    def has_any_of(self, low_bit: int, size: int) -> bool: ...
    def has_all_of(self, low_bit: int, size: int) -> bool: ...
    def set_range(self, low_bit: int, size: int) -> None: ...
    def clear_range(self, low_bit: int, size: int) -> None: ...
    def set_range_to(self, value: bool, low_bit: int, size: int) -> None: ...
    def get_word(self) -> int: ...
    def set_word(self, value: int) -> None: ...
    def get_num_on_bits(self) -> int: ...
    def get_num_off_bits(self) -> int: ...
    def get_lowest_on_bit(self) -> int: ...
    def get_lowest_off_bit(self) -> int: ...
    def get_highest_on_bit(self) -> int: ...
    def get_highest_off_bit(self) -> int: ...
    def get_next_higher_different_bit(self, low_bit: int) -> int: ...
    def invert_in_place(self) -> None: ...
    def has_bits_in_common(self, other: BitMask_uint64_t_64) -> bool: ...
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    def output_binary(self, out: ostream, spaces_every: int = ...) -> None: ...
    def output_hex(self, out: ostream, spaces_every: int = ...) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def compare_to(self, other: BitMask_uint64_t_64) -> int: ...
    def flood_down_in_place(self) -> None: ...
    def flood_up_in_place(self) -> None: ...
    def flood_bits_down(self) -> BitMask_uint64_t_64: ...
    def flood_bits_up(self) -> BitMask_uint64_t_64: ...
    @overload
    def keep_next_highest_bit(self) -> BitMask_uint64_t_64: ...
    @overload
    def keep_next_highest_bit(self, other: BitMask_uint64_t_64) -> BitMask_uint64_t_64: ...
    @overload
    def keep_next_highest_bit(self, index: int) -> BitMask_uint64_t_64: ...
    @overload
    def keep_next_lowest_bit(self) -> BitMask_uint64_t_64: ...
    @overload
    def keep_next_lowest_bit(self, other: BitMask_uint64_t_64) -> BitMask_uint64_t_64: ...
    @overload
    def keep_next_lowest_bit(self, index: int) -> BitMask_uint64_t_64: ...
    def get_key(self) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    allOn = all_on
    allOff = all_off
    lowerOn = lower_on
    hasMaxNumBits = has_max_num_bits
    getMaxNumBits = get_max_num_bits
    getNumBits = get_num_bits
    getBit = get_bit
    setBit = set_bit
    clearBit = clear_bit
    setBitTo = set_bit_to
    isZero = is_zero
    isAllOn = is_all_on
    hasAnyOf = has_any_of
    hasAllOf = has_all_of
    setRange = set_range
    clearRange = clear_range
    setRangeTo = set_range_to
    getWord = get_word
    setWord = set_word
    getNumOnBits = get_num_on_bits
    getNumOffBits = get_num_off_bits
    getLowestOnBit = get_lowest_on_bit
    getLowestOffBit = get_lowest_off_bit
    getHighestOnBit = get_highest_on_bit
    getHighestOffBit = get_highest_off_bit
    getNextHigherDifferentBit = get_next_higher_different_bit
    invertInPlace = invert_in_place
    hasBitsInCommon = has_bits_in_common
    outputBinary = output_binary
    outputHex = output_hex
    compareTo = compare_to
    floodDownInPlace = flood_down_in_place
    floodUpInPlace = flood_up_in_place
    floodBitsDown = flood_bits_down
    floodBitsUp = flood_bits_up
    keepNextHighestBit = keep_next_highest_bit
    keepNextLowestBit = keep_next_lowest_bit
    getKey = get_key
    getClassType = get_class_type

class BitArray:
    DtoolClassDict: ClassVar[dict[str, Any]]
    num_bits_per_word: ClassVar[Literal[64]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _from: BitArray | SparseArray) -> None: ...
    @overload
    def __init__(self, init_value: int) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: BitArray | SparseArray) -> bool: ...
    def __and__(self, other: BitArray | SparseArray) -> BitArray: ...
    def __or__(self, other: BitArray | SparseArray) -> BitArray: ...
    def __xor__(self, other: BitArray | SparseArray) -> BitArray: ...
    def __invert__(self) -> BitArray: ...
    def __lshift__(self, shift: int) -> BitArray: ...
    def __rshift__(self, shift: int) -> BitArray: ...
    def __iand__(self, other: BitArray | SparseArray) -> BitArray: ...
    def __ior__(self, other: BitArray | SparseArray) -> BitArray: ...
    def __ixor__(self, other: BitArray | SparseArray) -> BitArray: ...
    def __ilshift__(self, shift: int) -> BitArray: ...
    def __irshift__(self, shift: int) -> BitArray: ...
    def __le__(self, other: BitArray | SparseArray) -> bool: ...
    @staticmethod
    def all_on() -> BitArray: ...
    @staticmethod
    def all_off() -> BitArray: ...
    @staticmethod
    def lower_on(on_bits: int) -> BitArray: ...
    @staticmethod
    def bit(index: int) -> BitArray: ...
    @staticmethod
    def range(low_bit: int, size: int) -> BitArray: ...
    @staticmethod
    def has_max_num_bits() -> bool: ...
    @staticmethod
    def get_max_num_bits() -> int: ...
    @staticmethod
    def get_num_bits_per_word() -> int: ...
    def get_num_bits(self) -> int: ...
    def get_bit(self, index: int) -> bool: ...
    def set_bit(self, index: int) -> None: ...
    def clear_bit(self, index: int) -> None: ...
    def set_bit_to(self, index: int, value: bool) -> None: ...
    def get_highest_bits(self) -> bool: ...
    def is_zero(self) -> bool: ...
    def is_all_on(self) -> bool: ...
    def extract(self, low_bit: int, size: int) -> int: ...
    def store(self, value: int, low_bit: int, size: int) -> None: ...
    def has_any_of(self, low_bit: int, size: int) -> bool: ...
    def has_all_of(self, low_bit: int, size: int) -> bool: ...
    def set_range(self, low_bit: int, size: int) -> None: ...
    def clear_range(self, low_bit: int, size: int) -> None: ...
    def set_range_to(self, value: bool, low_bit: int, size: int) -> None: ...
    def get_num_on_bits(self) -> int: ...
    def get_num_off_bits(self) -> int: ...
    def get_lowest_on_bit(self) -> int: ...
    def get_lowest_off_bit(self) -> int: ...
    def get_highest_on_bit(self) -> int: ...
    def get_highest_off_bit(self) -> int: ...
    def get_next_higher_different_bit(self, low_bit: int) -> int: ...
    def get_num_words(self) -> int: ...
    def get_word(self, n: int) -> BitMask_uint32_t_32 | BitMask_uint64_t_64: ...
    def set_word(self, n: int, value: int) -> None: ...
    def invert_in_place(self) -> None: ...
    def has_bits_in_common(self, other: BitArray | SparseArray) -> bool: ...
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    def output_binary(self, out: ostream, spaces_every: int = ...) -> None: ...
    def output_hex(self, out: ostream, spaces_every: int = ...) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def compare_to(self, other: BitArray | SparseArray) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    allOn = all_on
    allOff = all_off
    lowerOn = lower_on
    hasMaxNumBits = has_max_num_bits
    getMaxNumBits = get_max_num_bits
    getNumBitsPerWord = get_num_bits_per_word
    getNumBits = get_num_bits
    getBit = get_bit
    setBit = set_bit
    clearBit = clear_bit
    setBitTo = set_bit_to
    getHighestBits = get_highest_bits
    isZero = is_zero
    isAllOn = is_all_on
    hasAnyOf = has_any_of
    hasAllOf = has_all_of
    setRange = set_range
    clearRange = clear_range
    setRangeTo = set_range_to
    getNumOnBits = get_num_on_bits
    getNumOffBits = get_num_off_bits
    getLowestOnBit = get_lowest_on_bit
    getLowestOffBit = get_lowest_off_bit
    getHighestOnBit = get_highest_on_bit
    getHighestOffBit = get_highest_off_bit
    getNextHigherDifferentBit = get_next_higher_different_bit
    getNumWords = get_num_words
    getWord = get_word
    setWord = set_word
    invertInPlace = invert_in_place
    hasBitsInCommon = has_bits_in_common
    outputBinary = output_binary
    outputHex = output_hex
    compareTo = compare_to
    getClassType = get_class_type

@final
class ButtonHandle:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def index(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def ascii_equivalent(self) -> str: ...
    @property
    def alias(self) -> ButtonHandle: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: ButtonHandle) -> None: ...
    @overload
    def __init__(self, index: int) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: ButtonHandle) -> bool: ...
    def __le__(self, other: ButtonHandle) -> bool: ...
    def __gt__(self, other: ButtonHandle) -> bool: ...
    def __ge__(self, other: ButtonHandle) -> bool: ...
    def compare_to(self, other: ButtonHandle) -> int: ...
    def get_hash(self) -> int: ...
    def get_name(self) -> str: ...
    def has_ascii_equivalent(self) -> bool: ...
    def get_ascii_equivalent(self) -> str: ...
    def get_alias(self) -> ButtonHandle: ...
    def matches(self, other: ButtonHandle) -> bool: ...
    def get_index(self) -> int: ...
    def output(self, out: ostream) -> None: ...
    @staticmethod
    def none() -> ButtonHandle: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    compareTo = compare_to
    getHash = get_hash
    getName = get_name
    hasAsciiEquivalent = has_ascii_equivalent
    getAsciiEquivalent = get_ascii_equivalent
    getAlias = get_alias
    getIndex = get_index
    getClassType = get_class_type

class ButtonRegistry:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, __param0: ButtonRegistry) -> None: ...
    def get_button(self, name: str) -> ButtonHandle: ...
    def find_button(self, name: str) -> ButtonHandle: ...
    def find_ascii_button(self, ascii_equivalent: str) -> ButtonHandle: ...
    def write(self, out: ostream) -> None: ...
    @staticmethod
    def ptr() -> ButtonRegistry: ...
    getButton = get_button
    findButton = find_button
    findAsciiButton = find_ascii_button

class ButtonMap(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: ButtonMap) -> None: ...
    def get_num_buttons(self) -> int: ...
    def get_raw_button(self, i: int) -> ButtonHandle: ...
    @overload
    def get_mapped_button(self, raw: ButtonHandle) -> ButtonHandle: ...
    @overload
    def get_mapped_button(self, i: int) -> ButtonHandle: ...
    @overload
    def get_mapped_button(self, raw_name: str) -> ButtonHandle: ...
    @overload
    def get_mapped_button_label(self, raw: ButtonHandle) -> str: ...
    @overload
    def get_mapped_button_label(self, i: int) -> str: ...
    @overload
    def get_mapped_button_label(self, raw_name: str) -> str: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getNumButtons = get_num_buttons
    getRawButton = get_raw_button
    getMappedButton = get_mapped_button
    getMappedButtonLabel = get_mapped_button_label
    getClassType = get_class_type

class CallbackObject(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, __param0: CallbackObject) -> None: ...
    def output(self, out: ostream) -> None: ...
    @staticmethod
    def make(function: Any) -> CallbackObject: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class CachedTypedWritableReferenceCount(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def cache_ref_count(self) -> int: ...
    def get_cache_ref_count(self) -> int: ...
    def cache_ref(self) -> None: ...
    def cache_unref(self) -> bool: ...
    def test_ref_count_integrity(self) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getCacheRefCount = get_cache_ref_count
    cacheRef = cache_ref
    cacheUnref = cache_unref
    testRefCountIntegrity = test_ref_count_integrity
    getClassType = get_class_type

class CallbackData(TypedObject):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def output(self, out: ostream) -> None: ...
    def upcall(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class PythonCallbackObject(CallbackObject):
    DtoolClassDict: ClassVar[dict[str, Any]]
    function: Any
    @overload
    def __init__(self, function: Callable = ...) -> None: ...
    @overload
    def __init__(self, __param0: PythonCallbackObject) -> None: ...
    def set_function(self, function: Callable) -> None: ...
    def get_function(self) -> Callable: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setFunction = set_function
    getFunction = get_function
    getClassType = get_class_type

class TimeVal:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: TimeVal) -> None: ...
    def get_sec(self) -> int: ...
    def get_usec(self) -> int: ...
    getSec = get_sec
    getUsec = get_usec

class ClockObject(ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    mode: _ClockObject_Mode
    frame_time: float
    real_time: float
    frame_count: int
    dt: float
    max_dt: float
    degrade_factor: float
    average_frame_rate_interval: float
    M_normal: ClassVar[Literal[0]]
    M_non_real_time: ClassVar[Literal[1]]
    M_forced: ClassVar[Literal[2]]
    M_degrade: ClassVar[Literal[3]]
    M_slave: ClassVar[Literal[4]]
    M_limited: ClassVar[Literal[5]]
    M_integer: ClassVar[Literal[6]]
    M_integer_limited: ClassVar[Literal[7]]
    @property
    def long_time(self) -> float: ...
    @property
    def average_frame_rate(self) -> float: ...
    @property
    def max_frame_duration(self) -> float: ...
    @overload
    def __init__(self, mode: _ClockObject_Mode = ...) -> None: ...
    @overload
    def __init__(self, copy: ClockObject) -> None: ...
    def set_mode(self, mode: _ClockObject_Mode) -> None: ...
    def get_mode(self) -> _ClockObject_Mode: ...
    def get_frame_time(self, current_thread: Thread = ...) -> float: ...
    def get_real_time(self) -> float: ...
    def get_long_time(self) -> float: ...
    def reset(self) -> None: ...
    def set_real_time(self, time: float) -> None: ...
    def set_frame_time(self, time: float, current_thread: Thread = ...) -> None: ...
    def set_frame_count(self, frame_count: int, current_thread: Thread = ...) -> None: ...
    def get_frame_count(self, current_thread: Thread = ...) -> int: ...
    def get_net_frame_rate(self, current_thread: Thread = ...) -> float: ...
    def get_dt(self, current_thread: Thread = ...) -> float: ...
    def set_dt(self, dt: float) -> None: ...
    def set_frame_rate(self, frame_rate: float) -> None: ...
    def get_max_dt(self) -> float: ...
    def set_max_dt(self, max_dt: float) -> None: ...
    def get_degrade_factor(self) -> float: ...
    def set_degrade_factor(self, degrade_factor: float) -> None: ...
    def set_average_frame_rate_interval(self, time: float) -> None: ...
    def get_average_frame_rate_interval(self) -> float: ...
    def get_average_frame_rate(self, current_thread: Thread = ...) -> float: ...
    def get_max_frame_duration(self, current_thread: Thread = ...) -> float: ...
    def calc_frame_rate_deviation(self, current_thread: Thread = ...) -> float: ...
    def tick(self, current_thread: Thread = ...) -> None: ...
    def sync_frame_time(self, current_thread: Thread = ...) -> None: ...
    def check_errors(self, current_thread: Thread) -> bool: ...
    @staticmethod
    def get_global_clock() -> ClockObject: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setMode = set_mode
    getMode = get_mode
    getFrameTime = get_frame_time
    getRealTime = get_real_time
    getLongTime = get_long_time
    setRealTime = set_real_time
    setFrameTime = set_frame_time
    setFrameCount = set_frame_count
    getFrameCount = get_frame_count
    getNetFrameRate = get_net_frame_rate
    getDt = get_dt
    setDt = set_dt
    setFrameRate = set_frame_rate
    getMaxDt = get_max_dt
    setMaxDt = set_max_dt
    getDegradeFactor = get_degrade_factor
    setDegradeFactor = set_degrade_factor
    setAverageFrameRateInterval = set_average_frame_rate_interval
    getAverageFrameRateInterval = get_average_frame_rate_interval
    getAverageFrameRate = get_average_frame_rate
    getMaxFrameDuration = get_max_frame_duration
    calcFrameRateDeviation = calc_frame_rate_deviation
    syncFrameTime = sync_frame_time
    checkErrors = check_errors
    getGlobalClock = get_global_clock
    getClassType = get_class_type
    MNormal = M_normal
    MNonRealTime = M_non_real_time
    MForced = M_forced
    MDegrade = M_degrade
    MSlave = M_slave
    MLimited = M_limited
    MInteger = M_integer
    MIntegerLimited = M_integer_limited

class CopyOnWriteObject(CachedTypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def cache_ref(self) -> None: ...
    def cache_unref(self) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    cacheRef = cache_ref
    cacheUnref = cache_unref
    getClassType = get_class_type

class DatagramBuffer(DatagramSink, DatagramGenerator):
    DtoolClassDict: ClassVar[dict[str, Any]]
    data: bytes
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, data: bytes) -> None: ...
    def upcast_to_DatagramSink(self) -> DatagramSink: ...
    def upcast_to_DatagramGenerator(self) -> DatagramGenerator: ...
    def clear(self) -> None: ...
    upcastToDatagramSink = upcast_to_DatagramSink
    upcastToDatagramGenerator = upcast_to_DatagramGenerator

class DatagramInputFile(DatagramGenerator):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    @overload
    def open(self, file: FileReference) -> bool: ...
    @overload
    def open(self, filename: _Filename) -> bool: ...
    @overload
    def open(self, _in: istream, filename: _Filename = ...) -> bool: ...
    def get_stream(self) -> istream: ...
    def close(self) -> None: ...
    getStream = get_stream

class DatagramOutputFile(DatagramSink):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def stream(self) -> ostream: ...
    def __init__(self) -> None: ...
    @overload
    def open(self, file: FileReference) -> bool: ...
    @overload
    def open(self, filename: _Filename) -> bool: ...
    @overload
    def open(self, out: ostream, filename: _Filename = ...) -> bool: ...
    def close(self) -> None: ...
    def write_header(self, header: str) -> bool: ...
    writeHeader = write_header

class DoubleBitMask_BitMaskNative:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: DoubleBitMask_BitMaskNative) -> None: ...
    @overload
    def __init__(self, init_value: Any) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: DoubleBitMask_BitMaskNative) -> bool: ...
    def __and__(self, other: DoubleBitMask_BitMaskNative) -> DoubleBitMask_BitMaskNative: ...
    def __or__(self, other: DoubleBitMask_BitMaskNative) -> DoubleBitMask_BitMaskNative: ...
    def __xor__(self, other: DoubleBitMask_BitMaskNative) -> DoubleBitMask_BitMaskNative: ...
    def __invert__(self) -> DoubleBitMask_BitMaskNative: ...
    def __lshift__(self, shift: int) -> DoubleBitMask_BitMaskNative: ...
    def __rshift__(self, shift: int) -> DoubleBitMask_BitMaskNative: ...
    def __iand__(self, other: DoubleBitMask_BitMaskNative) -> DoubleBitMask_BitMaskNative: ...
    def __ior__(self, other: DoubleBitMask_BitMaskNative) -> DoubleBitMask_BitMaskNative: ...
    def __ixor__(self, other: DoubleBitMask_BitMaskNative) -> DoubleBitMask_BitMaskNative: ...
    def __ilshift__(self, shift: int) -> DoubleBitMask_BitMaskNative: ...
    def __irshift__(self, shift: int) -> DoubleBitMask_BitMaskNative: ...
    def __le__(self, other: DoubleBitMask_BitMaskNative) -> bool: ...
    @staticmethod
    def all_on() -> DoubleBitMask_BitMaskNative: ...
    @staticmethod
    def all_off() -> DoubleBitMask_BitMaskNative: ...
    @staticmethod
    def lower_on(on_bits: int) -> DoubleBitMask_BitMaskNative: ...
    @staticmethod
    def bit(index: int) -> DoubleBitMask_BitMaskNative: ...
    @staticmethod
    def range(low_bit: int, size: int) -> DoubleBitMask_BitMaskNative: ...
    @staticmethod
    def has_max_num_bits() -> bool: ...
    @staticmethod
    def get_max_num_bits() -> int: ...
    def get_num_bits(self) -> int: ...
    def get_bit(self, index: int) -> bool: ...
    def set_bit(self, index: int) -> None: ...
    def clear_bit(self, index: int) -> None: ...
    def set_bit_to(self, index: int, value: bool) -> None: ...
    def is_zero(self) -> bool: ...
    def is_all_on(self) -> bool: ...
    def extract(self, low_bit: int, size: int) -> int: ...
    def store(self, value: int, low_bit: int, size: int) -> None: ...
    def has_any_of(self, low_bit: int, size: int) -> bool: ...
    def has_all_of(self, low_bit: int, size: int) -> bool: ...
    def set_range(self, low_bit: int, size: int) -> None: ...
    def clear_range(self, low_bit: int, size: int) -> None: ...
    def set_range_to(self, value: bool, low_bit: int, size: int) -> None: ...
    def get_num_on_bits(self) -> int: ...
    def get_num_off_bits(self) -> int: ...
    def get_lowest_on_bit(self) -> int: ...
    def get_lowest_off_bit(self) -> int: ...
    def get_highest_on_bit(self) -> int: ...
    def get_highest_off_bit(self) -> int: ...
    def get_next_higher_different_bit(self, low_bit: int) -> int: ...
    def invert_in_place(self) -> None: ...
    def has_bits_in_common(self, other: DoubleBitMask_BitMaskNative) -> bool: ...
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    def output_binary(self, out: ostream, spaces_every: int = ...) -> None: ...
    def output_hex(self, out: ostream, spaces_every: int = ...) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def compare_to(self, other: DoubleBitMask_BitMaskNative) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    allOn = all_on
    allOff = all_off
    lowerOn = lower_on
    hasMaxNumBits = has_max_num_bits
    getMaxNumBits = get_max_num_bits
    getNumBits = get_num_bits
    getBit = get_bit
    setBit = set_bit
    clearBit = clear_bit
    setBitTo = set_bit_to
    isZero = is_zero
    isAllOn = is_all_on
    hasAnyOf = has_any_of
    hasAllOf = has_all_of
    setRange = set_range
    clearRange = clear_range
    setRangeTo = set_range_to
    getNumOnBits = get_num_on_bits
    getNumOffBits = get_num_off_bits
    getLowestOnBit = get_lowest_on_bit
    getLowestOffBit = get_lowest_off_bit
    getHighestOnBit = get_highest_on_bit
    getHighestOffBit = get_highest_off_bit
    getNextHigherDifferentBit = get_next_higher_different_bit
    invertInPlace = invert_in_place
    hasBitsInCommon = has_bits_in_common
    outputBinary = output_binary
    outputHex = output_hex
    compareTo = compare_to
    getClassType = get_class_type

class DoubleBitMask_DoubleBitMaskNative:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: DoubleBitMask_DoubleBitMaskNative) -> None: ...
    @overload
    def __init__(self, init_value: Any) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: DoubleBitMask_DoubleBitMaskNative) -> bool: ...
    def __and__(self, other: DoubleBitMask_DoubleBitMaskNative) -> DoubleBitMask_DoubleBitMaskNative: ...
    def __or__(self, other: DoubleBitMask_DoubleBitMaskNative) -> DoubleBitMask_DoubleBitMaskNative: ...
    def __xor__(self, other: DoubleBitMask_DoubleBitMaskNative) -> DoubleBitMask_DoubleBitMaskNative: ...
    def __invert__(self) -> DoubleBitMask_DoubleBitMaskNative: ...
    def __lshift__(self, shift: int) -> DoubleBitMask_DoubleBitMaskNative: ...
    def __rshift__(self, shift: int) -> DoubleBitMask_DoubleBitMaskNative: ...
    def __iand__(self, other: DoubleBitMask_DoubleBitMaskNative) -> DoubleBitMask_DoubleBitMaskNative: ...
    def __ior__(self, other: DoubleBitMask_DoubleBitMaskNative) -> DoubleBitMask_DoubleBitMaskNative: ...
    def __ixor__(self, other: DoubleBitMask_DoubleBitMaskNative) -> DoubleBitMask_DoubleBitMaskNative: ...
    def __ilshift__(self, shift: int) -> DoubleBitMask_DoubleBitMaskNative: ...
    def __irshift__(self, shift: int) -> DoubleBitMask_DoubleBitMaskNative: ...
    def __le__(self, other: DoubleBitMask_DoubleBitMaskNative) -> bool: ...
    @staticmethod
    def all_on() -> DoubleBitMask_DoubleBitMaskNative: ...
    @staticmethod
    def all_off() -> DoubleBitMask_DoubleBitMaskNative: ...
    @staticmethod
    def lower_on(on_bits: int) -> DoubleBitMask_DoubleBitMaskNative: ...
    @staticmethod
    def bit(index: int) -> DoubleBitMask_DoubleBitMaskNative: ...
    @staticmethod
    def range(low_bit: int, size: int) -> DoubleBitMask_DoubleBitMaskNative: ...
    @staticmethod
    def has_max_num_bits() -> bool: ...
    @staticmethod
    def get_max_num_bits() -> int: ...
    def get_num_bits(self) -> int: ...
    def get_bit(self, index: int) -> bool: ...
    def set_bit(self, index: int) -> None: ...
    def clear_bit(self, index: int) -> None: ...
    def set_bit_to(self, index: int, value: bool) -> None: ...
    def is_zero(self) -> bool: ...
    def is_all_on(self) -> bool: ...
    def extract(self, low_bit: int, size: int) -> int: ...
    def store(self, value: int, low_bit: int, size: int) -> None: ...
    def has_any_of(self, low_bit: int, size: int) -> bool: ...
    def has_all_of(self, low_bit: int, size: int) -> bool: ...
    def set_range(self, low_bit: int, size: int) -> None: ...
    def clear_range(self, low_bit: int, size: int) -> None: ...
    def set_range_to(self, value: bool, low_bit: int, size: int) -> None: ...
    def get_num_on_bits(self) -> int: ...
    def get_num_off_bits(self) -> int: ...
    def get_lowest_on_bit(self) -> int: ...
    def get_lowest_off_bit(self) -> int: ...
    def get_highest_on_bit(self) -> int: ...
    def get_highest_off_bit(self) -> int: ...
    def get_next_higher_different_bit(self, low_bit: int) -> int: ...
    def invert_in_place(self) -> None: ...
    def has_bits_in_common(self, other: DoubleBitMask_DoubleBitMaskNative) -> bool: ...
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    def output_binary(self, out: ostream, spaces_every: int = ...) -> None: ...
    def output_hex(self, out: ostream, spaces_every: int = ...) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def compare_to(self, other: DoubleBitMask_DoubleBitMaskNative) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    allOn = all_on
    allOff = all_off
    lowerOn = lower_on
    hasMaxNumBits = has_max_num_bits
    getMaxNumBits = get_max_num_bits
    getNumBits = get_num_bits
    getBit = get_bit
    setBit = set_bit
    clearBit = clear_bit
    setBitTo = set_bit_to
    isZero = is_zero
    isAllOn = is_all_on
    hasAnyOf = has_any_of
    hasAllOf = has_all_of
    setRange = set_range
    clearRange = clear_range
    setRangeTo = set_range_to
    getNumOnBits = get_num_on_bits
    getNumOffBits = get_num_off_bits
    getLowestOnBit = get_lowest_on_bit
    getLowestOffBit = get_lowest_off_bit
    getHighestOnBit = get_highest_on_bit
    getHighestOffBit = get_highest_off_bit
    getNextHigherDifferentBit = get_next_higher_different_bit
    invertInPlace = invert_in_place
    hasBitsInCommon = has_bits_in_common
    outputBinary = output_binary
    outputHex = output_hex
    compareTo = compare_to
    getClassType = get_class_type

class GamepadButton:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: GamepadButton) -> None: ...
    @staticmethod
    def lstick() -> ButtonHandle: ...
    @staticmethod
    def rstick() -> ButtonHandle: ...
    @staticmethod
    def lshoulder() -> ButtonHandle: ...
    @staticmethod
    def rshoulder() -> ButtonHandle: ...
    @staticmethod
    def ltrigger() -> ButtonHandle: ...
    @staticmethod
    def rtrigger() -> ButtonHandle: ...
    @staticmethod
    def lgrip() -> ButtonHandle: ...
    @staticmethod
    def rgrip() -> ButtonHandle: ...
    @staticmethod
    def dpad_left() -> ButtonHandle: ...
    @staticmethod
    def dpad_right() -> ButtonHandle: ...
    @staticmethod
    def dpad_up() -> ButtonHandle: ...
    @staticmethod
    def dpad_down() -> ButtonHandle: ...
    @staticmethod
    def back() -> ButtonHandle: ...
    @staticmethod
    def guide() -> ButtonHandle: ...
    @staticmethod
    def start() -> ButtonHandle: ...
    @staticmethod
    def next() -> ButtonHandle: ...
    @staticmethod
    def previous() -> ButtonHandle: ...
    @staticmethod
    def face_a() -> ButtonHandle: ...
    @staticmethod
    def face_b() -> ButtonHandle: ...
    @staticmethod
    def face_c() -> ButtonHandle: ...
    @staticmethod
    def face_x() -> ButtonHandle: ...
    @staticmethod
    def face_y() -> ButtonHandle: ...
    @staticmethod
    def face_z() -> ButtonHandle: ...
    @staticmethod
    def face_1() -> ButtonHandle: ...
    @staticmethod
    def face_2() -> ButtonHandle: ...
    @staticmethod
    def trigger() -> ButtonHandle: ...
    @staticmethod
    def joystick(button_number: int) -> ButtonHandle: ...
    @staticmethod
    def hat_up() -> ButtonHandle: ...
    @staticmethod
    def hat_down() -> ButtonHandle: ...
    @staticmethod
    def hat_left() -> ButtonHandle: ...
    @staticmethod
    def hat_right() -> ButtonHandle: ...
    dpadLeft = dpad_left
    dpadRight = dpad_right
    dpadUp = dpad_up
    dpadDown = dpad_down
    faceA = face_a
    faceB = face_b
    faceC = face_c
    faceX = face_x
    faceY = face_y
    faceZ = face_z
    face1 = face_1
    face2 = face_2
    hatUp = hat_up
    hatDown = hat_down
    hatLeft = hat_left
    hatRight = hat_right

class KeyboardButton:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: KeyboardButton) -> None: ...
    @staticmethod
    def ascii_key(ascii_equivalent: str) -> ButtonHandle: ...
    @staticmethod
    def space() -> ButtonHandle: ...
    @staticmethod
    def backspace() -> ButtonHandle: ...
    @staticmethod
    def tab() -> ButtonHandle: ...
    @staticmethod
    def enter() -> ButtonHandle: ...
    @staticmethod
    def escape() -> ButtonHandle: ...
    @staticmethod
    def f1() -> ButtonHandle: ...
    @staticmethod
    def f2() -> ButtonHandle: ...
    @staticmethod
    def f3() -> ButtonHandle: ...
    @staticmethod
    def f4() -> ButtonHandle: ...
    @staticmethod
    def f5() -> ButtonHandle: ...
    @staticmethod
    def f6() -> ButtonHandle: ...
    @staticmethod
    def f7() -> ButtonHandle: ...
    @staticmethod
    def f8() -> ButtonHandle: ...
    @staticmethod
    def f9() -> ButtonHandle: ...
    @staticmethod
    def f10() -> ButtonHandle: ...
    @staticmethod
    def f11() -> ButtonHandle: ...
    @staticmethod
    def f12() -> ButtonHandle: ...
    @staticmethod
    def f13() -> ButtonHandle: ...
    @staticmethod
    def f14() -> ButtonHandle: ...
    @staticmethod
    def f15() -> ButtonHandle: ...
    @staticmethod
    def f16() -> ButtonHandle: ...
    @staticmethod
    def left() -> ButtonHandle: ...
    @staticmethod
    def right() -> ButtonHandle: ...
    @staticmethod
    def up() -> ButtonHandle: ...
    @staticmethod
    def down() -> ButtonHandle: ...
    @staticmethod
    def page_up() -> ButtonHandle: ...
    @staticmethod
    def page_down() -> ButtonHandle: ...
    @staticmethod
    def home() -> ButtonHandle: ...
    @staticmethod
    def end() -> ButtonHandle: ...
    @staticmethod
    def insert() -> ButtonHandle: ...
    @staticmethod
    def _del() -> ButtonHandle: ...
    @staticmethod
    def help() -> ButtonHandle: ...
    @staticmethod
    def menu() -> ButtonHandle: ...
    @staticmethod
    def shift() -> ButtonHandle: ...
    @staticmethod
    def control() -> ButtonHandle: ...
    @staticmethod
    def alt() -> ButtonHandle: ...
    @staticmethod
    def meta() -> ButtonHandle: ...
    @staticmethod
    def caps_lock() -> ButtonHandle: ...
    @staticmethod
    def shift_lock() -> ButtonHandle: ...
    @staticmethod
    def num_lock() -> ButtonHandle: ...
    @staticmethod
    def scroll_lock() -> ButtonHandle: ...
    @staticmethod
    def print_screen() -> ButtonHandle: ...
    @staticmethod
    def pause() -> ButtonHandle: ...
    @staticmethod
    def lshift() -> ButtonHandle: ...
    @staticmethod
    def rshift() -> ButtonHandle: ...
    @staticmethod
    def lcontrol() -> ButtonHandle: ...
    @staticmethod
    def rcontrol() -> ButtonHandle: ...
    @staticmethod
    def lalt() -> ButtonHandle: ...
    @staticmethod
    def ralt() -> ButtonHandle: ...
    @staticmethod
    def lmeta() -> ButtonHandle: ...
    @staticmethod
    def rmeta() -> ButtonHandle: ...
    asciiKey = ascii_key
    pageUp = page_up
    pageDown = page_down
    capsLock = caps_lock
    shiftLock = shift_lock
    numLock = num_lock
    scrollLock = scroll_lock
    printScreen = print_screen

class ModifierButtons:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def buttons(self) -> Sequence[ButtonHandle]: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: ModifierButtons) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: ModifierButtons) -> bool: ...
    def __and__(self, other: ModifierButtons) -> ModifierButtons: ...
    def __or__(self, other: ModifierButtons) -> ModifierButtons: ...
    def __iand__(self, other: ModifierButtons) -> ModifierButtons: ...
    def __ior__(self, other: ModifierButtons) -> ModifierButtons: ...
    def __le__(self, other: ModifierButtons) -> bool: ...
    def assign(self, copy: ModifierButtons) -> ModifierButtons: ...
    def set_button_list(self, other: ModifierButtons) -> None: ...
    def matches(self, other: ModifierButtons) -> bool: ...
    def add_button(self, button: ButtonHandle) -> bool: ...
    def has_button(self, button: ButtonHandle) -> bool: ...
    def remove_button(self, button: ButtonHandle) -> bool: ...
    def get_num_buttons(self) -> int: ...
    def get_button(self, index: int) -> ButtonHandle: ...
    def button_down(self, button: ButtonHandle) -> bool: ...
    def button_up(self, button: ButtonHandle) -> bool: ...
    def all_buttons_up(self) -> None: ...
    @overload
    def is_down(self, button: ButtonHandle) -> bool: ...
    @overload
    def is_down(self, index: int) -> bool: ...
    def is_any_down(self) -> bool: ...
    def get_prefix(self) -> str: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    def get_buttons(self) -> tuple[ButtonHandle, ...]: ...
    setButtonList = set_button_list
    addButton = add_button
    hasButton = has_button
    removeButton = remove_button
    getNumButtons = get_num_buttons
    getButton = get_button
    buttonDown = button_down
    buttonUp = button_up
    allButtonsUp = all_buttons_up
    isDown = is_down
    isAnyDown = is_any_down
    getPrefix = get_prefix
    getButtons = get_buttons

class MouseButton:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: MouseButton) -> None: ...
    @staticmethod
    def button(button_number: int) -> ButtonHandle: ...
    @staticmethod
    def one() -> ButtonHandle: ...
    @staticmethod
    def two() -> ButtonHandle: ...
    @staticmethod
    def three() -> ButtonHandle: ...
    @staticmethod
    def four() -> ButtonHandle: ...
    @staticmethod
    def five() -> ButtonHandle: ...
    @staticmethod
    def wheel_up() -> ButtonHandle: ...
    @staticmethod
    def wheel_down() -> ButtonHandle: ...
    @staticmethod
    def wheel_left() -> ButtonHandle: ...
    @staticmethod
    def wheel_right() -> ButtonHandle: ...
    @staticmethod
    def is_mouse_button(button: ButtonHandle) -> bool: ...
    wheelUp = wheel_up
    wheelDown = wheel_down
    wheelLeft = wheel_left
    wheelRight = wheel_right
    isMouseButton = is_mouse_button

class PointerType(Enum):
    unknown: int
    mouse: int
    finger: int
    stylus: int
    eraser: int

class PointerData:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @property
    def type(self) -> PointerType: ...
    @property
    def id(self) -> int: ...
    @property
    def in_window(self) -> bool: ...
    @property
    def pressure(self) -> float: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: PointerData) -> None: ...
    def get_x(self) -> float: ...
    def get_y(self) -> float: ...
    def get_in_window(self) -> bool: ...
    getX = get_x
    getY = get_y
    getInWindow = get_in_window

class NodeCachedReferenceCount(CachedTypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    R_node: ClassVar[Literal[1]]
    R_cache: ClassVar[Literal[2]]
    def get_node_ref_count(self) -> int: ...
    def node_ref(self) -> None: ...
    def node_unref(self) -> bool: ...
    def test_ref_count_integrity(self) -> bool: ...
    def get_referenced_bits(self) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getNodeRefCount = get_node_ref_count
    nodeRef = node_ref
    nodeUnref = node_unref
    testRefCountIntegrity = test_ref_count_integrity
    getReferencedBits = get_referenced_bits
    getClassType = get_class_type
    RNode = R_node
    RCache = R_cache

class SparseArray:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, _from: BitArray | SparseArray) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: BitArray | SparseArray) -> bool: ...
    def __and__(self, other: BitArray | SparseArray) -> SparseArray: ...
    def __or__(self, other: BitArray | SparseArray) -> SparseArray: ...
    def __xor__(self, other: BitArray | SparseArray) -> SparseArray: ...
    def __invert__(self) -> SparseArray: ...
    def __lshift__(self, shift: int) -> SparseArray: ...
    def __rshift__(self, shift: int) -> SparseArray: ...
    def __iand__(self, other: BitArray | SparseArray) -> SparseArray: ...
    def __ior__(self, other: BitArray | SparseArray) -> SparseArray: ...
    def __ixor__(self, other: BitArray | SparseArray) -> SparseArray: ...
    def __ilshift__(self, shift: int) -> SparseArray: ...
    def __irshift__(self, shift: int) -> SparseArray: ...
    def __le__(self, other: BitArray | SparseArray) -> bool: ...
    @staticmethod
    def all_on() -> SparseArray: ...
    @staticmethod
    def all_off() -> SparseArray: ...
    @staticmethod
    def lower_on(on_bits: int) -> SparseArray: ...
    @staticmethod
    def bit(index: int) -> SparseArray: ...
    @staticmethod
    def range(low_bit: int, size: int) -> SparseArray: ...
    @staticmethod
    def has_max_num_bits() -> bool: ...
    @staticmethod
    def get_max_num_bits() -> int: ...
    def get_num_bits(self) -> int: ...
    def get_bit(self, index: int) -> bool: ...
    def set_bit(self, index: int) -> None: ...
    def clear_bit(self, index: int) -> None: ...
    def set_bit_to(self, index: int, value: bool) -> None: ...
    def get_highest_bits(self) -> bool: ...
    def is_zero(self) -> bool: ...
    def is_all_on(self) -> bool: ...
    def has_any_of(self, low_bit: int, size: int) -> bool: ...
    def has_all_of(self, low_bit: int, size: int) -> bool: ...
    def set_range(self, low_bit: int, size: int) -> None: ...
    def clear_range(self, low_bit: int, size: int) -> None: ...
    def set_range_to(self, value: bool, low_bit: int, size: int) -> None: ...
    def get_num_on_bits(self) -> int: ...
    def get_num_off_bits(self) -> int: ...
    def get_lowest_on_bit(self) -> int: ...
    def get_lowest_off_bit(self) -> int: ...
    def get_highest_on_bit(self) -> int: ...
    def get_highest_off_bit(self) -> int: ...
    def get_next_higher_different_bit(self, low_bit: int) -> int: ...
    def invert_in_place(self) -> None: ...
    def has_bits_in_common(self, other: BitArray | SparseArray) -> bool: ...
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    def compare_to(self, other: BitArray | SparseArray) -> int: ...
    def is_inverse(self) -> bool: ...
    def get_num_subranges(self) -> int: ...
    def get_subrange_begin(self, n: int) -> int: ...
    def get_subrange_end(self, n: int) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    allOn = all_on
    allOff = all_off
    lowerOn = lower_on
    hasMaxNumBits = has_max_num_bits
    getMaxNumBits = get_max_num_bits
    getNumBits = get_num_bits
    getBit = get_bit
    setBit = set_bit
    clearBit = clear_bit
    setBitTo = set_bit_to
    getHighestBits = get_highest_bits
    isZero = is_zero
    isAllOn = is_all_on
    hasAnyOf = has_any_of
    hasAllOf = has_all_of
    setRange = set_range
    clearRange = clear_range
    setRangeTo = set_range_to
    getNumOnBits = get_num_on_bits
    getNumOffBits = get_num_off_bits
    getLowestOnBit = get_lowest_on_bit
    getLowestOffBit = get_lowest_off_bit
    getHighestOnBit = get_highest_on_bit
    getHighestOffBit = get_highest_off_bit
    getNextHigherDifferentBit = get_next_higher_different_bit
    invertInPlace = invert_in_place
    hasBitsInCommon = has_bits_in_common
    compareTo = compare_to
    isInverse = is_inverse
    getNumSubranges = get_num_subranges
    getSubrangeBegin = get_subrange_begin
    getSubrangeEnd = get_subrange_end
    getClassType = get_class_type

class ParamValueBase(TypedWritableReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_value_type(self) -> TypeHandle: ...
    def output(self, out: ostream) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getValueType = get_value_type
    getClassType = get_class_type

class ParamTypedRefCount(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def value(self) -> TypedReferenceCount: ...
    def __init__(self, value: TypedReferenceCount) -> None: ...
    def get_value(self) -> TypedReferenceCount: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getValue = get_value
    getClassType = get_class_type

class ParamValue_string(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: str
    def __init__(self, value: str) -> None: ...
    def set_value(self, value: str) -> None: ...
    def get_value(self) -> str: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_wstring(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: str
    def __init__(self, value: str) -> None: ...
    def set_value(self, value: str) -> None: ...
    def get_value(self) -> str: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LVecBase2d(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LVecBase2d
    def __init__(self, value: LVecBase2d) -> None: ...
    def set_value(self, value: LVecBase2d) -> None: ...
    def get_value(self) -> LVecBase2d: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LVecBase2f(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LVecBase2f
    def __init__(self, value: LVecBase2f) -> None: ...
    def set_value(self, value: LVecBase2f) -> None: ...
    def get_value(self) -> LVecBase2f: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LVecBase2i(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LVecBase2i
    def __init__(self, value: LVecBase2i) -> None: ...
    def set_value(self, value: LVecBase2i) -> None: ...
    def get_value(self) -> LVecBase2i: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LVecBase3d(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LVecBase3d
    def __init__(self, value: _Vec3d) -> None: ...
    def set_value(self, value: _Vec3d) -> None: ...
    def get_value(self) -> LVecBase3d: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LVecBase3f(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LVecBase3f
    def __init__(self, value: _Vec3f) -> None: ...
    def set_value(self, value: _Vec3f) -> None: ...
    def get_value(self) -> LVecBase3f: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LVecBase3i(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LVecBase3i
    def __init__(self, value: LVecBase3i) -> None: ...
    def set_value(self, value: LVecBase3i) -> None: ...
    def get_value(self) -> LVecBase3i: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LVecBase4d(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LVecBase4d
    def __init__(self, value: _Vec4d) -> None: ...
    def set_value(self, value: _Vec4d) -> None: ...
    def get_value(self) -> LVecBase4d: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LVecBase4f(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LVecBase4f
    def __init__(self, value: _Vec4f) -> None: ...
    def set_value(self, value: _Vec4f) -> None: ...
    def get_value(self) -> LVecBase4f: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LVecBase4i(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LVecBase4i
    def __init__(self, value: _Vec4i) -> None: ...
    def set_value(self, value: _Vec4i) -> None: ...
    def get_value(self) -> LVecBase4i: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LMatrix3d(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LMatrix3d
    def __init__(self, value: LMatrix3d) -> None: ...
    def set_value(self, value: LMatrix3d) -> None: ...
    def get_value(self) -> LMatrix3d: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LMatrix3f(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LMatrix3f
    def __init__(self, value: LMatrix3f) -> None: ...
    def set_value(self, value: LMatrix3f) -> None: ...
    def get_value(self) -> LMatrix3f: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LMatrix4d(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LMatrix4d
    def __init__(self, value: _Mat4d) -> None: ...
    def set_value(self, value: _Mat4d) -> None: ...
    def get_value(self) -> LMatrix4d: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class ParamValue_LMatrix4f(ParamValueBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: LMatrix4f
    def __init__(self, value: _Mat4f) -> None: ...
    def set_value(self, value: _Mat4f) -> None: ...
    def get_value(self) -> LMatrix4f: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class WritableConfigurable(TypedWritable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class UniqueIdAllocator:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, min: int = ..., max: int = ...) -> None: ...
    @overload
    def __init__(self, __param0: UniqueIdAllocator) -> None: ...
    def allocate(self) -> int: ...
    def initial_reserve_id(self, id: int) -> None: ...
    def free(self, index: int) -> None: ...
    def fraction_used(self) -> float: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    initialReserveId = initial_reserve_id
    fractionUsed = fraction_used

ATS_none: Literal[0]
ATS_down: Literal[1]
ATS_up: Literal[2]
ATS_pad: Literal[3]
ATS_unspecified: Literal[4]
CS_unspecified: Literal[0]
CS_linear: Literal[1]
CS_sRGB: Literal[2]
CS_scRGB: Literal[3]
def parse_color_space_string(str: str) -> _ColorSpace: ...
def format_color_space(cs: _ColorSpace) -> str: ...
def get_model_path() -> ConfigVariableSearchPath: ...
def get_plugin_path() -> ConfigVariableSearchPath: ...
def load_prc_file(filename: _Filename) -> ConfigPage: ...
def load_prc_file_data(name: str, data: str) -> ConfigPage: ...
def unload_prc_file(page: ConfigPage) -> bool: ...
def hash_prc_variables(hash: HashVal) -> None: ...
def py_decode_TypedWritable_from_bam_stream(this_class: Any, data: bytes) -> Any: ...
def py_decode_TypedWritable_from_bam_stream_persist(unpickler: Any, this_class: Any, data: bytes) -> Any: ...
parseColorSpaceString = parse_color_space_string
formatColorSpace = format_color_space
getModelPath = get_model_path
getPluginPath = get_plugin_path
loadPrcFile = load_prc_file
loadPrcFileData = load_prc_file_data
unloadPrcFile = unload_prc_file
hashPrcVariables = hash_prc_variables
pyDecodeTypedWritableFromBamStream = py_decode_TypedWritable_from_bam_stream
pyDecodeTypedWritableFromBamStreamPersist = py_decode_TypedWritable_from_bam_stream_persist
ConstPointerToArrayUshort = ConstPointerToArray_ushort
PointerToArrayBaseUshort = PointerToArrayBase_ushort
PointerToBaseReferenceCountedVectorUshort = PointerToBase_ReferenceCountedVector_ushort
PointerToArrayUshort = PointerToArray_ushort
ATSNone = ATS_none
ATSDown = ATS_down
ATSUp = ATS_up
ATSPad = ATS_pad
ATSUnspecified = ATS_unspecified
BitMaskUint16T16 = BitMask_uint16_t_16
BitMask16 = BitMask_uint16_t_16
BitMaskUint32T32 = BitMask_uint32_t_32
BitMask32 = BitMask_uint32_t_32
BitMaskUint64T64 = BitMask_uint64_t_64
BitMask64 = BitMask_uint64_t_64
CollideMask = BitMask_uint32_t_32
CSUnspecified = CS_unspecified
CSLinear = CS_linear
CSSRGB = CS_sRGB
CSScRGB = CS_scRGB
DoubleBitMaskBitMaskNative = DoubleBitMask_BitMaskNative
DoubleBitMaskNative = DoubleBitMask_BitMaskNative
DoubleBitMaskDoubleBitMaskNative = DoubleBitMask_DoubleBitMaskNative
QuadBitMaskNative = DoubleBitMask_DoubleBitMaskNative
DrawMask = BitMask_uint32_t_32
MouseData = PointerData
ParamValueString = ParamValue_string
ParamString = ParamValue_string
ParamValueWstring = ParamValue_wstring
ParamWstring = ParamValue_wstring
ParamValueLVecBase2d = ParamValue_LVecBase2d
ParamVecBase2d = ParamValue_LVecBase2d
ParamValueLVecBase2f = ParamValue_LVecBase2f
ParamVecBase2f = ParamValue_LVecBase2f
ParamValueLVecBase2i = ParamValue_LVecBase2i
ParamVecBase2i = ParamValue_LVecBase2i
ParamValueLVecBase3d = ParamValue_LVecBase3d
ParamVecBase3d = ParamValue_LVecBase3d
ParamValueLVecBase3f = ParamValue_LVecBase3f
ParamVecBase3f = ParamValue_LVecBase3f
ParamValueLVecBase3i = ParamValue_LVecBase3i
ParamVecBase3i = ParamValue_LVecBase3i
ParamValueLVecBase4d = ParamValue_LVecBase4d
ParamVecBase4d = ParamValue_LVecBase4d
ParamValueLVecBase4f = ParamValue_LVecBase4f
ParamVecBase4f = ParamValue_LVecBase4f
ParamValueLVecBase4i = ParamValue_LVecBase4i
ParamVecBase4i = ParamValue_LVecBase4i
ParamValueLMatrix3d = ParamValue_LMatrix3d
ParamMatrix3d = ParamValue_LMatrix3d
ParamValueLMatrix3f = ParamValue_LMatrix3f
ParamMatrix3f = ParamValue_LMatrix3f
ParamValueLMatrix4d = ParamValue_LMatrix4d
ParamMatrix4d = ParamValue_LMatrix4d
ParamValueLMatrix4f = ParamValue_LMatrix4f
ParamMatrix4f = ParamValue_LMatrix4f
ParamVecBase2 = ParamValue_LVecBase2f
ParamVecBase3 = ParamValue_LVecBase3f
ParamVecBase4 = ParamValue_LVecBase4f
ParamMatrix3 = ParamValue_LMatrix3f
ParamMatrix4 = ParamValue_LMatrix4f
PortalMask = BitMask_uint32_t_32
