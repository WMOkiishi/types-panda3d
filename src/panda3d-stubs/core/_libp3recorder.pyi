from os import PathLike
from typing import Any, ClassVar, TypeAlias, overload
from panda3d.core import (
    ConfigVariableFilename,
    DataNode,
    Datagram,
    Filename,
    ReferenceCount,
    SocketStream,
    TypeHandle,
    TypedReferenceCount,
)

_Filename: TypeAlias = Filename | ConfigVariableFilename | str | bytes | PathLike

class RecorderBase:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def is_recording(self) -> bool: ...
    def is_playing(self) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    isRecording = is_recording
    isPlaying = is_playing
    getClassType = get_class_type

class MouseRecorder(DataNode, RecorderBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, name: str) -> None: ...
    def upcast_to_DataNode(self) -> DataNode: ...
    def upcast_to_RecorderBase(self) -> RecorderBase: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToDataNode = upcast_to_DataNode
    upcastToRecorderBase = upcast_to_RecorderBase
    getClassType = get_class_type

class RecorderController(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    def begin_record(self, filename: _Filename) -> bool: ...
    def begin_playback(self, filename: _Filename) -> bool: ...
    def close(self) -> None: ...
    def get_start_time(self) -> int: ...
    def set_random_seed(self, random_seed: int) -> None: ...
    def get_random_seed(self) -> int: ...
    def is_recording(self) -> bool: ...
    def is_playing(self) -> bool: ...
    def is_open(self) -> bool: ...
    def get_filename(self) -> Filename: ...
    def is_error(self) -> bool: ...
    def get_clock_offset(self) -> float: ...
    def get_frame_offset(self) -> int: ...
    def add_recorder(self, name: str, recorder: RecorderBase) -> None: ...
    def has_recorder(self, name: str) -> bool: ...
    def get_recorder(self, name: str) -> RecorderBase: ...
    def remove_recorder(self, name: str) -> bool: ...
    def set_frame_tie(self, frame_tie: bool) -> None: ...
    def get_frame_tie(self) -> bool: ...
    def record_frame(self) -> None: ...
    def play_frame(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    beginRecord = begin_record
    beginPlayback = begin_playback
    getStartTime = get_start_time
    setRandomSeed = set_random_seed
    getRandomSeed = get_random_seed
    isRecording = is_recording
    isPlaying = is_playing
    isOpen = is_open
    getFilename = get_filename
    isError = is_error
    getClockOffset = get_clock_offset
    getFrameOffset = get_frame_offset
    addRecorder = add_recorder
    hasRecorder = has_recorder
    getRecorder = get_recorder
    removeRecorder = remove_recorder
    setFrameTie = set_frame_tie
    getFrameTie = get_frame_tie
    recordFrame = record_frame
    playFrame = play_frame
    getClassType = get_class_type

class SocketStreamRecorder(RecorderBase, ReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, stream: SocketStream, owns_stream: bool) -> None: ...
    def upcast_to_RecorderBase(self) -> RecorderBase: ...
    def upcast_to_ReferenceCount(self) -> ReferenceCount: ...
    def receive_datagram(self, dg: Datagram) -> bool: ...
    def send_datagram(self, dg: Datagram) -> bool: ...
    def is_closed(self) -> bool: ...
    def close(self) -> None: ...
    def set_collect_tcp(self, collect_tcp: bool) -> None: ...
    def get_collect_tcp(self) -> bool: ...
    def set_collect_tcp_interval(self, interval: float) -> None: ...
    def get_collect_tcp_interval(self) -> float: ...
    def consider_flush(self) -> bool: ...
    def flush(self) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToRecorderBase = upcast_to_RecorderBase
    upcastToReferenceCount = upcast_to_ReferenceCount
    receiveDatagram = receive_datagram
    sendDatagram = send_datagram
    isClosed = is_closed
    setCollectTcp = set_collect_tcp
    getCollectTcp = get_collect_tcp
    setCollectTcpInterval = set_collect_tcp_interval
    getCollectTcpInterval = get_collect_tcp_interval
    considerFlush = consider_flush
    getClassType = get_class_type
