from collections.abc import Mapping, Sequence
from os import PathLike
from typing import Any, ClassVar, Literal, TypeAlias, overload
from panda3d.core import ConfigVariableFilename, ConfigVariableSearchPath, TypeHandle

_ios_base_seekdir: TypeAlias = Literal[0, 1, 2]
_ios_base_openmode: TypeAlias = int
_TextEncoder_Encoding: TypeAlias = Literal[0, 1, 2, 2]
_Filename: TypeAlias = Filename | ConfigVariableFilename | str | bytes | PathLike
_Filename_Type: TypeAlias = Literal[0, 1, 2]

class basic_ios_char(ios_base):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def good(self) -> bool: ...
    def eof(self) -> bool: ...
    def fail(self) -> bool: ...
    def bad(self) -> bool: ...
    def clear(self) -> None: ...

class ios_base:
    DtoolClassDict: ClassVar[dict[str, Any]]
    beg: ClassVar[Literal[0]]
    cur: ClassVar[Literal[1]]
    end: ClassVar[Literal[2]]
    Beg = beg
    Cur = cur
    End = end

class fstream(iostream):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    def close(self) -> None: ...

class iostream(istream, ostream):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def upcast_to_istream(self) -> istream: ...
    def upcast_to_ostream(self) -> ostream: ...
    def flush(self) -> None: ...
    upcastToIstream = upcast_to_istream
    upcastToOstream = upcast_to_ostream

class istream(basic_ios_char):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def upcast_to_basic_ios_char(self) -> basic_ios_char: ...
    def get(self) -> int: ...
    def tellg(self) -> int: ...
    @overload
    def seekg(self, pos: int) -> None: ...
    @overload
    def seekg(self, off: int, dir: _ios_base_seekdir) -> None: ...
    upcastToBasicIosChar = upcast_to_basic_ios_char

class ostream(basic_ios_char):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def upcast_to_basic_ios_char(self) -> basic_ios_char: ...
    def put(self, c: str) -> None: ...
    def flush(self) -> None: ...
    def tellp(self) -> int: ...
    @overload
    def seekp(self, pos: int) -> None: ...
    @overload
    def seekp(self, off: int, dir: _ios_base_seekdir) -> None: ...
    upcastToBasicIosChar = upcast_to_basic_ios_char

class ifstream(istream):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    def close(self) -> None: ...

class ofstream(ostream):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    def close(self) -> None: ...

class IFileStream(istream):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, filename: str, mode: _ios_base_openmode = ...) -> None: ...
    def open(self, filename: str, mode: _ios_base_openmode = ...) -> None: ...
    def close(self) -> None: ...

class OFileStream(ostream):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, filename: str, mode: _ios_base_openmode = ...) -> None: ...
    def open(self, filename: str, mode: _ios_base_openmode = ...) -> None: ...
    def close(self) -> None: ...

class FileStream(iostream):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, filename: str, mode: _ios_base_openmode = ...) -> None: ...
    def open(self, filename: str, mode: _ios_base_openmode = ...) -> None: ...
    def close(self) -> None: ...

class TextEncoder:
    DtoolClassDict: ClassVar[dict[str, Any]]
    default_encoding: _TextEncoder_Encoding
    text: Any
    E_iso8859: ClassVar[Literal[0]]
    E_utf8: ClassVar[Literal[1]]
    E_utf16be: ClassVar[Literal[2]]
    E_unicode: ClassVar[Literal[2]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: TextEncoder) -> None: ...
    def set_encoding(self, encoding: _TextEncoder_Encoding) -> None: ...
    def get_encoding(self) -> _TextEncoder_Encoding: ...
    @staticmethod
    def set_default_encoding(encoding: _TextEncoder_Encoding) -> None: ...
    @staticmethod
    def get_default_encoding() -> _TextEncoder_Encoding: ...
    @overload
    def set_text(self, text: Any) -> None: ...
    @overload
    def set_text(self, text: Any, encoding: _TextEncoder_Encoding) -> None: ...
    def clear_text(self) -> None: ...
    def has_text(self) -> bool: ...
    def make_upper(self) -> None: ...
    def make_lower(self) -> None: ...
    @overload
    def get_text(self) -> Any: ...
    @overload
    def get_text(self, encoding: _TextEncoder_Encoding) -> Any: ...
    def append_text(self, text: Any) -> None: ...
    def append_unicode_char(self, character: int) -> None: ...
    def get_num_chars(self) -> int: ...
    def get_unicode_char(self, index: int) -> int: ...
    def set_unicode_char(self, index: int, character: int) -> None: ...
    @overload
    def get_encoded_char(self, index: int) -> str: ...
    @overload
    def get_encoded_char(self, index: int, encoding: _TextEncoder_Encoding) -> str: ...
    def get_text_as_ascii(self) -> str: ...
    @staticmethod
    def reencode_text(text: str, _from: _TextEncoder_Encoding, to: _TextEncoder_Encoding) -> str: ...
    @staticmethod
    def unicode_isalpha(character: int) -> bool: ...
    @staticmethod
    def unicode_isdigit(character: int) -> bool: ...
    @staticmethod
    def unicode_ispunct(character: int) -> bool: ...
    @staticmethod
    def unicode_islower(character: int) -> bool: ...
    @staticmethod
    def unicode_isupper(character: int) -> bool: ...
    @staticmethod
    def unicode_isspace(character: int) -> bool: ...
    @staticmethod
    def unicode_toupper(character: int) -> int: ...
    @staticmethod
    def unicode_tolower(character: int) -> int: ...
    @overload
    @staticmethod
    def upper(source: str) -> str: ...
    @overload
    @staticmethod
    def upper(source: str, encoding: _TextEncoder_Encoding) -> str: ...
    @overload
    @staticmethod
    def lower(source: str) -> str: ...
    @overload
    @staticmethod
    def lower(source: str, encoding: _TextEncoder_Encoding) -> str: ...
    def set_wtext(self, wtext: str) -> None: ...
    def get_wtext(self) -> str: ...
    def append_wtext(self, text: str) -> None: ...
    def get_wtext_as_ascii(self) -> str: ...
    def is_wtext(self) -> bool: ...
    @staticmethod
    def encode_wchar(ch: int, encoding: _TextEncoder_Encoding) -> bytes: ...
    @overload
    def encode_wtext(self, wtext: str) -> bytes: ...
    @overload
    def encode_wtext(self, wtext: str, encoding: _TextEncoder_Encoding) -> bytes: ...
    @overload
    def decode_text(self, text: bytes) -> str: ...
    @overload
    def decode_text(self, text: Any, encoding: _TextEncoder_Encoding) -> str: ...
    setEncoding = set_encoding
    getEncoding = get_encoding
    setDefaultEncoding = set_default_encoding
    getDefaultEncoding = get_default_encoding
    setText = set_text
    clearText = clear_text
    hasText = has_text
    makeUpper = make_upper
    makeLower = make_lower
    getText = get_text
    appendText = append_text
    appendUnicodeChar = append_unicode_char
    getNumChars = get_num_chars
    getUnicodeChar = get_unicode_char
    setUnicodeChar = set_unicode_char
    getEncodedChar = get_encoded_char
    getTextAsAscii = get_text_as_ascii
    reencodeText = reencode_text
    unicodeIsalpha = unicode_isalpha
    unicodeIsdigit = unicode_isdigit
    unicodeIspunct = unicode_ispunct
    unicodeIslower = unicode_islower
    unicodeIsupper = unicode_isupper
    unicodeIsspace = unicode_isspace
    unicodeToupper = unicode_toupper
    unicodeTolower = unicode_tolower
    setWtext = set_wtext
    getWtext = get_wtext
    appendWtext = append_wtext
    getWtextAsAscii = get_wtext_as_ascii
    isWtext = is_wtext
    encodeWchar = encode_wchar
    encodeWtext = encode_wtext
    decodeText = decode_text
    EIso8859 = E_iso8859
    EUtf8 = E_utf8
    EUtf16be = E_utf16be
    EUnicode = E_unicode

class Filename:
    DtoolClassDict: ClassVar[dict[str, Any]]
    T_general: ClassVar[Literal[0]]
    T_dso: ClassVar[Literal[1]]
    T_executable: ClassVar[Literal[2]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, path: Any) -> None: ...
    @overload
    def __init__(self, dirname: str | bytes | PathLike, basename: _Filename) -> None: ...
    def __getitem__(self, n: int) -> str: ...
    def __fspath__(self) -> str: ...
    def __iadd__(self, other: str) -> Filename: ...
    def __add__(self, other: str) -> Filename: ...
    def __truediv__(self, other: _Filename) -> Filename: ...
    def __truediv__(self, other: _Filename) -> Filename: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: str) -> bool: ...
    def __bool__(self) -> bool: ...
    def __le__(self, other: str) -> bool: ...
    @staticmethod
    def text_filename(filename: _Filename) -> Filename: ...
    @staticmethod
    def binary_filename(filename: _Filename) -> Filename: ...
    @staticmethod
    def dso_filename(filename: str) -> Filename: ...
    @staticmethod
    def executable_filename(filename: str) -> Filename: ...
    @staticmethod
    def pattern_filename(filename: str) -> Filename: ...
    @staticmethod
    def from_os_specific(os_specific: str, type: _Filename_Type = ...) -> Filename: ...
    @staticmethod
    def from_os_specific_w(os_specific: str, type: _Filename_Type = ...) -> Filename: ...
    @staticmethod
    def expand_from(user_string: str, type: _Filename_Type = ...) -> Filename: ...
    @staticmethod
    def temporary(dirname: str, prefix: str, suffix: str = ..., type: _Filename_Type = ...) -> Filename: ...
    @staticmethod
    def get_home_directory() -> Filename: ...
    @staticmethod
    def get_temp_directory() -> Filename: ...
    @staticmethod
    def get_user_appdata_directory() -> Filename: ...
    @staticmethod
    def get_common_appdata_directory() -> Filename: ...
    @overload
    def assign(self, filename: str) -> Filename: ...
    @overload
    def assign(self, copy: _Filename) -> Filename: ...
    def c_str(self) -> str: ...
    def empty(self) -> bool: ...
    def length(self) -> int: ...
    @overload
    def substr(self, begin: int) -> str: ...
    @overload
    def substr(self, begin: int, end: int) -> str: ...
    def get_fullpath(self) -> str: ...
    def get_fullpath_w(self) -> str: ...
    def get_dirname(self) -> str: ...
    def get_basename(self) -> str: ...
    def get_fullpath_wo_extension(self) -> str: ...
    def get_basename_wo_extension(self) -> str: ...
    def get_extension(self) -> str: ...
    def set_fullpath(self, s: str) -> None: ...
    def set_dirname(self, s: str) -> None: ...
    def set_basename(self, s: str) -> None: ...
    def set_fullpath_wo_extension(self, s: str) -> None: ...
    def set_basename_wo_extension(self, s: str) -> None: ...
    def set_extension(self, s: str) -> None: ...
    def set_binary(self) -> None: ...
    def set_text(self) -> None: ...
    def is_binary(self) -> bool: ...
    def is_text(self) -> bool: ...
    def is_binary_or_text(self) -> bool: ...
    def set_type(self, type: _Filename_Type) -> None: ...
    def get_type(self) -> _Filename_Type: ...
    def set_pattern(self, pattern: bool) -> None: ...
    def get_pattern(self) -> bool: ...
    def has_hash(self) -> bool: ...
    def get_filename_index(self, index: int) -> Filename: ...
    def get_hash_to_end(self) -> str: ...
    def set_hash_to_end(self, s: str) -> None: ...
    def standardize(self) -> None: ...
    def is_local(self) -> bool: ...
    def is_fully_qualified(self) -> bool: ...
    @overload
    def make_absolute(self) -> None: ...
    @overload
    def make_absolute(self, start_directory: _Filename) -> None: ...
    def make_canonical(self) -> bool: ...
    def make_true_case(self) -> bool: ...
    def to_os_specific(self) -> str: ...
    def to_os_specific_w(self) -> str: ...
    def to_os_generic(self) -> str: ...
    def to_os_short_name(self) -> str: ...
    def to_os_long_name(self) -> str: ...
    def exists(self) -> bool: ...
    def is_regular_file(self) -> bool: ...
    def is_writable(self) -> bool: ...
    def is_directory(self) -> bool: ...
    def is_executable(self) -> bool: ...
    def compare_timestamps(self, other: _Filename, this_missing_is_old: bool = ..., other_missing_is_old: bool = ...) -> int: ...
    def get_timestamp(self) -> int: ...
    def get_access_timestamp(self) -> int: ...
    def get_file_size(self) -> int: ...
    def resolve_filename(self, searchpath: ConfigVariableSearchPath | DSearchPath, default_extension: str = ...) -> bool: ...
    def make_relative_to(self, directory: _Filename, allow_backups: bool = ...) -> bool: ...
    def find_on_searchpath(self, searchpath: ConfigVariableSearchPath | DSearchPath) -> int: ...
    def scan_directory(self) -> list[str]: ...
    def open_read(self, stream: IFileStream | ifstream) -> bool: ...
    def open_write(self, stream: OFileStream | ofstream, truncate: bool = ...) -> bool: ...
    def open_append(self, stream: OFileStream | ofstream) -> bool: ...
    def open_read_write(self, stream: FileStream | fstream, truncate: bool = ...) -> bool: ...
    def open_read_append(self, stream: FileStream | fstream) -> bool: ...
    def chdir(self) -> bool: ...
    def touch(self) -> bool: ...
    def unlink(self) -> bool: ...
    def rename_to(self, other: _Filename) -> bool: ...
    def copy_to(self, other: _Filename) -> bool: ...
    def make_dir(self) -> bool: ...
    def mkdir(self) -> bool: ...
    def rmdir(self) -> bool: ...
    def compare_to(self, other: _Filename) -> int: ...
    def get_hash(self) -> int: ...
    def output(self, out: ostream) -> None: ...
    @staticmethod
    def set_filesystem_encoding(encoding: _TextEncoder_Encoding) -> None: ...
    @staticmethod
    def get_filesystem_encoding() -> _TextEncoder_Encoding: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    textFilename = text_filename
    binaryFilename = binary_filename
    dsoFilename = dso_filename
    executableFilename = executable_filename
    patternFilename = pattern_filename
    fromOsSpecific = from_os_specific
    fromOsSpecificW = from_os_specific_w
    expandFrom = expand_from
    getHomeDirectory = get_home_directory
    getTempDirectory = get_temp_directory
    getUserAppdataDirectory = get_user_appdata_directory
    getCommonAppdataDirectory = get_common_appdata_directory
    cStr = c_str
    Fspath = __fspath__
    getFullpath = get_fullpath
    getFullpathW = get_fullpath_w
    getDirname = get_dirname
    getBasename = get_basename
    getFullpathWoExtension = get_fullpath_wo_extension
    getBasenameWoExtension = get_basename_wo_extension
    getExtension = get_extension
    setFullpath = set_fullpath
    setDirname = set_dirname
    setBasename = set_basename
    setFullpathWoExtension = set_fullpath_wo_extension
    setBasenameWoExtension = set_basename_wo_extension
    setExtension = set_extension
    setBinary = set_binary
    setText = set_text
    isBinary = is_binary
    isText = is_text
    isBinaryOrText = is_binary_or_text
    setType = set_type
    getType = get_type
    setPattern = set_pattern
    getPattern = get_pattern
    hasHash = has_hash
    getFilenameIndex = get_filename_index
    getHashToEnd = get_hash_to_end
    setHashToEnd = set_hash_to_end
    isLocal = is_local
    isFullyQualified = is_fully_qualified
    makeAbsolute = make_absolute
    makeCanonical = make_canonical
    makeTrueCase = make_true_case
    toOsSpecific = to_os_specific
    toOsSpecificW = to_os_specific_w
    toOsGeneric = to_os_generic
    toOsShortName = to_os_short_name
    toOsLongName = to_os_long_name
    isRegularFile = is_regular_file
    isWritable = is_writable
    isDirectory = is_directory
    isExecutable = is_executable
    compareTimestamps = compare_timestamps
    getTimestamp = get_timestamp
    getAccessTimestamp = get_access_timestamp
    getFileSize = get_file_size
    resolveFilename = resolve_filename
    makeRelativeTo = make_relative_to
    findOnSearchpath = find_on_searchpath
    scanDirectory = scan_directory
    openRead = open_read
    openWrite = open_write
    openAppend = open_append
    openReadWrite = open_read_write
    openReadAppend = open_read_append
    renameTo = rename_to
    copyTo = copy_to
    makeDir = make_dir
    compareTo = compare_to
    getHash = get_hash
    setFilesystemEncoding = set_filesystem_encoding
    getFilesystemEncoding = get_filesystem_encoding
    getClassType = get_class_type
    TGeneral = T_general
    TDso = T_dso
    TExecutable = T_executable

class PandaSystem:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def version_string(self) -> str: ...
    @property
    def major_version(self) -> int: ...
    @property
    def minor_version(self) -> int: ...
    @property
    def sequence_version(self) -> int: ...
    @property
    def official_version(self) -> bool: ...
    @property
    def memory_alignment(self) -> int: ...
    @property
    def distributor(self) -> str: ...
    @property
    def compiler(self) -> str: ...
    @property
    def build_date(self) -> str: ...
    @property
    def git_commit(self) -> str: ...
    @property
    def platform(self) -> str: ...
    @property
    def systems(self) -> Sequence[str]: ...
    @staticmethod
    def get_version_string() -> str: ...
    @staticmethod
    def get_package_version_string() -> str: ...
    @staticmethod
    def get_package_host_url() -> str: ...
    @staticmethod
    def get_p3d_coreapi_version_string() -> str: ...
    @staticmethod
    def get_major_version() -> int: ...
    @staticmethod
    def get_minor_version() -> int: ...
    @staticmethod
    def get_sequence_version() -> int: ...
    @staticmethod
    def is_official_version() -> bool: ...
    @staticmethod
    def get_memory_alignment() -> int: ...
    @staticmethod
    def get_distributor() -> str: ...
    @staticmethod
    def get_compiler() -> str: ...
    @staticmethod
    def get_build_date() -> str: ...
    @staticmethod
    def get_git_commit() -> str: ...
    @staticmethod
    def get_platform() -> str: ...
    def has_system(self, system: str) -> bool: ...
    def get_num_systems(self) -> int: ...
    def get_system(self, n: int) -> str: ...
    def get_system_tag(self, system: str, tag: str) -> str: ...
    def add_system(self, system: str) -> None: ...
    def set_system_tag(self, system: str, tag: str, value: str) -> None: ...
    def heap_trim(self, pad: int) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    @staticmethod
    def get_global_ptr() -> PandaSystem: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_systems(self) -> tuple[str, ...]: ...
    getVersionString = get_version_string
    getPackageVersionString = get_package_version_string
    getPackageHostUrl = get_package_host_url
    getP3dCoreapiVersionString = get_p3d_coreapi_version_string
    getMajorVersion = get_major_version
    getMinorVersion = get_minor_version
    getSequenceVersion = get_sequence_version
    isOfficialVersion = is_official_version
    getMemoryAlignment = get_memory_alignment
    getDistributor = get_distributor
    getCompiler = get_compiler
    getBuildDate = get_build_date
    getGitCommit = get_git_commit
    getPlatform = get_platform
    hasSystem = has_system
    getNumSystems = get_num_systems
    getSystem = get_system
    getSystemTag = get_system_tag
    addSystem = add_system
    setSystemTag = set_system_tag
    heapTrim = heap_trim
    getGlobalPtr = get_global_ptr
    getClassType = get_class_type
    getSystems = get_systems

class DSearchPath:
    class Results:
        DtoolClassDict: ClassVar[dict[str, Any]]
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, copy: DSearchPath.Results) -> None: ...
        def __getitem__(self, n: int) -> Filename: ...
        def __len__(self) -> int: ...
        def assign(self, copy: DSearchPath.Results) -> DSearchPath.Results: ...
        def clear(self) -> None: ...
        def get_num_files(self) -> int: ...
        def get_file(self, n: int) -> Filename: ...
        def output(self, out: ostream) -> None: ...
        def write(self, out: ostream, indent_level: int = ...) -> None: ...
        getNumFiles = get_num_files
        getFile = get_file
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def directories(self) -> Sequence[Filename]: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: ConfigVariableSearchPath | DSearchPath) -> None: ...
    @overload
    def __init__(self, directory: _Filename) -> None: ...
    @overload
    def __init__(self, path: str, separator: str = ...) -> None: ...
    def assign(self, copy: ConfigVariableSearchPath | DSearchPath) -> DSearchPath: ...
    def clear(self) -> None: ...
    def append_directory(self, directory: _Filename) -> None: ...
    def prepend_directory(self, directory: _Filename) -> None: ...
    @overload
    def append_path(self, path: ConfigVariableSearchPath | DSearchPath) -> None: ...
    @overload
    def append_path(self, path: str, separator: str = ...) -> None: ...
    def prepend_path(self, path: ConfigVariableSearchPath | DSearchPath) -> None: ...
    def is_empty(self) -> bool: ...
    def get_num_directories(self) -> int: ...
    def get_directory(self, n: int) -> Filename: ...
    def find_file(self, filename: _Filename) -> Filename: ...
    @overload
    def find_all_files(self, filename: _Filename) -> DSearchPath.Results: ...
    @overload
    def find_all_files(self, filename: _Filename, results: DSearchPath.Results) -> int: ...
    @staticmethod
    def search_path(filename: _Filename, path: str, separator: str = ...) -> Filename: ...
    def output(self, out: ostream, separator: str = ...) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def get_directories(self) -> tuple[Filename, ...]: ...
    appendDirectory = append_directory
    prependDirectory = prepend_directory
    appendPath = append_path
    prependPath = prepend_path
    isEmpty = is_empty
    getNumDirectories = get_num_directories
    getDirectory = get_directory
    findFile = find_file
    findAllFiles = find_all_files
    searchPath = search_path
    getDirectories = get_directories

class ExecutionEnvironment:
    DtoolClassDict: ClassVar[dict[str, Any]]
    environment_variables: Mapping[Any, str]
    binary_name: str
    dtool_name: str
    @property
    def args(self) -> Sequence[str]: ...
    @property
    def cwd(self) -> Filename: ...
    def __init__(self, __param0: ExecutionEnvironment) -> None: ...
    @staticmethod
    def has_environment_variable(var: str) -> bool: ...
    @staticmethod
    def get_environment_variable(var: str) -> str: ...
    @staticmethod
    def set_environment_variable(var: str, value: str) -> None: ...
    @staticmethod
    def shadow_environment_variable(var: str, value: str) -> None: ...
    @staticmethod
    def clear_shadow(var: str) -> None: ...
    @staticmethod
    def expand_string(str: str) -> str: ...
    @staticmethod
    def get_num_args() -> int: ...
    @staticmethod
    def get_arg(n: int) -> str: ...
    @staticmethod
    def get_binary_name() -> str: ...
    @staticmethod
    def get_dtool_name() -> str: ...
    @staticmethod
    def set_binary_name(name: str) -> None: ...
    @staticmethod
    def set_dtool_name(name: str) -> None: ...
    @staticmethod
    def get_cwd() -> Filename: ...
    hasEnvironmentVariable = has_environment_variable
    getEnvironmentVariable = get_environment_variable
    setEnvironmentVariable = set_environment_variable
    shadowEnvironmentVariable = shadow_environment_variable
    clearShadow = clear_shadow
    expandString = expand_string
    getNumArgs = get_num_args
    getArg = get_arg
    getBinaryName = get_binary_name
    getDtoolName = get_dtool_name
    setBinaryName = set_binary_name
    setDtoolName = set_dtool_name
    getCwd = get_cwd

class GlobPattern:
    DtoolClassDict: ClassVar[dict[str, Any]]
    pattern: str
    case_sensitive: bool
    nomatch_chars: str
    @overload
    def __init__(self, pattern: str = ...) -> None: ...
    @overload
    def __init__(self, copy: GlobPattern) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: GlobPattern) -> bool: ...
    def __le__(self, other: GlobPattern) -> bool: ...
    def assign(self, copy: GlobPattern) -> GlobPattern: ...
    def set_pattern(self, pattern: str) -> None: ...
    def get_pattern(self) -> str: ...
    def set_case_sensitive(self, case_sensitive: bool) -> None: ...
    def get_case_sensitive(self) -> bool: ...
    def set_nomatch_chars(self, nomatch_chars: str) -> None: ...
    def get_nomatch_chars(self) -> str: ...
    def matches(self, candidate: str) -> bool: ...
    def matches_file(self, candidate: _Filename) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def has_glob_characters(self) -> bool: ...
    def get_const_prefix(self) -> str: ...
    def match_files(self, cwd: _Filename = ...) -> list[str]: ...
    setPattern = set_pattern
    getPattern = get_pattern
    setCaseSensitive = set_case_sensitive
    getCaseSensitive = get_case_sensitive
    setNomatchChars = set_nomatch_chars
    getNomatchChars = get_nomatch_chars
    matchesFile = matches_file
    hasGlobCharacters = has_glob_characters
    getConstPrefix = get_const_prefix
    matchFiles = match_files

class LineStream(ostream):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    def is_text_available(self) -> bool: ...
    def get_line(self) -> str: ...
    def has_newline(self) -> bool: ...
    isTextAvailable = is_text_available
    getLine = get_line
    hasNewline = has_newline

BasicIosChar = basic_ios_char
IosBase = ios_base
Fstream = fstream
Iostream = iostream
Istream = istream
Ostream = ostream
Ifstream = ifstream
ios = basic_ios_char
Ios = ios
Ofstream = ofstream
pifstream = IFileStream
Pifstream = pifstream
pofstream = OFileStream
Pofstream = pofstream
pfstream = FileStream
Pfstream = pfstream
