from os import PathLike
from typing import Any, ClassVar, Literal, TypeAlias, overload
from panda3d.core import (
    ConfigVariableColor,
    ConfigVariableFilename,
    Filename,
    LMatrix4f,
    LVecBase4f,
    Namable,
    PNMImage,
    UnalignedLVecBase4f,
)

_FreetypeFont_WindingOrder: TypeAlias = Literal[0, 1, 2, 3]
_Vec4f: TypeAlias = LVecBase4f | UnalignedLVecBase4f | LMatrix4f.Row | LMatrix4f.CRow | ConfigVariableColor
_Filename: TypeAlias = Filename | ConfigVariableFilename | str | bytes | PathLike
_PNMTextMaker_Alignment: TypeAlias = Literal[0, 1, 2]

class FreetypeFont(Namable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    winding_order: _FreetypeFont_WindingOrder
    WO_default: ClassVar[Literal[0]]
    WO_left: ClassVar[Literal[1]]
    WO_right: ClassVar[Literal[2]]
    WO_invalid: ClassVar[Literal[3]]
    def set_point_size(self, point_size: float) -> bool: ...
    def get_point_size(self) -> float: ...
    def set_pixels_per_unit(self, pixels_per_unit: float) -> bool: ...
    def get_pixels_per_unit(self) -> float: ...
    def set_pixel_size(self, pixel_size: float) -> bool: ...
    def get_pixel_size(self) -> float: ...
    def set_scale_factor(self, scale_factor: float) -> bool: ...
    def get_scale_factor(self) -> float: ...
    def set_native_antialias(self, native_antialias: bool) -> None: ...
    def get_native_antialias(self) -> bool: ...
    def get_font_pixel_size(self) -> int: ...
    def get_line_height(self) -> float: ...
    def get_space_advance(self) -> float: ...
    @staticmethod
    def get_points_per_unit() -> float: ...
    @staticmethod
    def get_points_per_inch() -> float: ...
    def set_winding_order(self, winding_order: _FreetypeFont_WindingOrder) -> None: ...
    def get_winding_order(self) -> _FreetypeFont_WindingOrder: ...
    setPointSize = set_point_size
    getPointSize = get_point_size
    setPixelsPerUnit = set_pixels_per_unit
    getPixelsPerUnit = get_pixels_per_unit
    setPixelSize = set_pixel_size
    getPixelSize = get_pixel_size
    setScaleFactor = set_scale_factor
    getScaleFactor = get_scale_factor
    setNativeAntialias = set_native_antialias
    getNativeAntialias = get_native_antialias
    getFontPixelSize = get_font_pixel_size
    getLineHeight = get_line_height
    getSpaceAdvance = get_space_advance
    getPointsPerUnit = get_points_per_unit
    getPointsPerInch = get_points_per_inch
    setWindingOrder = set_winding_order
    getWindingOrder = get_winding_order
    WODefault = WO_default
    WOLeft = WO_left
    WORight = WO_right
    WOInvalid = WO_invalid

class PNMTextGlyph:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, __param0: PNMTextGlyph) -> None: ...
    @overload
    def __init__(self, advance: float) -> None: ...
    def get_advance(self) -> int: ...
    @overload
    def place(self, dest_image: PNMImage, xp: int, yp: int, fg: _Vec4f) -> None: ...
    @overload
    def place(self, dest_image: PNMImage, xp: int, yp: int, fg: _Vec4f, interior: _Vec4f) -> None: ...
    def get_left(self) -> int: ...
    def get_right(self) -> int: ...
    def get_bottom(self) -> int: ...
    def get_top(self) -> int: ...
    def get_height(self) -> int: ...
    def get_width(self) -> int: ...
    def get_value(self, x: int, y: int) -> float: ...
    def get_interior_flag(self, x: int, y: int) -> bool: ...
    getAdvance = get_advance
    getLeft = get_left
    getRight = get_right
    getBottom = get_bottom
    getTop = get_top
    getHeight = get_height
    getWidth = get_width
    getValue = get_value
    getInteriorFlag = get_interior_flag

class PNMTextMaker(FreetypeFont):
    DtoolClassDict: ClassVar[dict[str, Any]]
    A_left: ClassVar[Literal[0]]
    A_right: ClassVar[Literal[1]]
    A_center: ClassVar[Literal[2]]
    @overload
    def __init__(self, copy: FreetypeFont) -> None: ...
    @overload
    def __init__(self, font_filename: _Filename, face_index: int) -> None: ...
    @overload
    def __init__(self, font_data: str, data_length: int, face_index: int) -> None: ...
    def is_valid(self) -> bool: ...
    def set_align(self, align_type: _PNMTextMaker_Alignment) -> None: ...
    def get_align(self) -> _PNMTextMaker_Alignment: ...
    def set_interior_flag(self, interior_flag: bool) -> None: ...
    def get_interior_flag(self) -> bool: ...
    def set_fg(self, fg: _Vec4f) -> None: ...
    def get_fg(self) -> LVecBase4f: ...
    def set_interior(self, interior: _Vec4f) -> None: ...
    def get_interior(self) -> LVecBase4f: ...
    def set_distance_field_radius(self, radius: int) -> None: ...
    def get_distance_field_radius(self) -> int: ...
    def generate_into(self, text: str, dest_image: PNMImage, x: int, y: int) -> int: ...
    def calc_width(self, text: str) -> int: ...
    def get_glyph(self, character: int) -> PNMTextGlyph: ...
    isValid = is_valid
    setAlign = set_align
    getAlign = get_align
    setInteriorFlag = set_interior_flag
    getInteriorFlag = get_interior_flag
    setFg = set_fg
    getFg = get_fg
    setInterior = set_interior
    getInterior = get_interior
    setDistanceFieldRadius = set_distance_field_radius
    getDistanceFieldRadius = get_distance_field_radius
    generateInto = generate_into
    calcWidth = calc_width
    getGlyph = get_glyph
    ALeft = A_left
    ARight = A_right
    ACenter = A_center
