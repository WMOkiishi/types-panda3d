from collections.abc import Sequence
from typing import Any, ClassVar, Literal, TypeAlias, overload
from panda3d.core import (
    ConfigVariableColor,
    Datagram,
    DatagramIterator,
    LMatrix3d,
    LMatrix3f,
    LMatrix4d,
    LMatrix4f,
    LPoint2d,
    LPoint3d,
    LPoint3f,
    LVecBase2d,
    LVecBase2f,
    LVecBase2i,
    LVecBase3d,
    LVecBase3f,
    LVecBase3i,
    LVecBase4d,
    LVecBase4f,
    LVecBase4i,
    LVector3d,
    LVector3f,
    PointerToVoid,
    TypeHandle,
    TypedReferenceCount,
    UnalignedLMatrix4d,
    UnalignedLMatrix4f,
    UnalignedLVecBase4d,
    UnalignedLVecBase4f,
    UnalignedLVecBase4i,
    ostream,
)

_Mat4d: TypeAlias = LMatrix4d | UnalignedLMatrix4d
_Vec3d: TypeAlias = LVecBase3d | LMatrix3d.Row | LMatrix3d.CRow
_CoordinateSystem: TypeAlias = Literal[0, 1, 2, 3, 4, 5]
_Mat4f: TypeAlias = LMatrix4f | UnalignedLMatrix4f
_Vec3f: TypeAlias = LVecBase3f | LMatrix3f.Row | LMatrix3f.CRow
_Vec4d: TypeAlias = LVecBase4d | UnalignedLVecBase4d | LMatrix4d.Row | LMatrix4d.CRow
_Vec4f: TypeAlias = LVecBase4f | UnalignedLVecBase4f | LMatrix4f.Row | LMatrix4f.CRow | ConfigVariableColor
_Vec4i: TypeAlias = LVecBase4i | UnalignedLVecBase4i

class ConstPointerToArray_LMatrix3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_LMatrix3d | PointerToArray_LMatrix3d) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LMatrix3d: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> LMatrix3d: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LMatrix3d) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_LMatrix3d(PointerToBase_ReferenceCountedVector_LMatrix3d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_LMatrix3d(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_LMatrix3f(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_LMatrix3f | PointerToArray_LMatrix3f) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LMatrix3f: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> LMatrix3f: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LMatrix3f) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_LMatrix3f(PointerToBase_ReferenceCountedVector_LMatrix3f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_LMatrix3f(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_LVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_LVecBase2d | PointerToArray_LVecBase2d) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase2d: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> LVecBase2d: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LVecBase2d) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_LVecBase2d(PointerToBase_ReferenceCountedVector_LVecBase2d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_LVecBase2d(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_LVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_LVecBase2f | PointerToArray_LVecBase2f) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase2f: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> LVecBase2f: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LVecBase2f) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_LVecBase2f(PointerToBase_ReferenceCountedVector_LVecBase2f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_LVecBase2f(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_LVecBase2i(PointerToArrayBase_LVecBase2i):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_LVecBase2i | PointerToArray_LVecBase2i) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase2i: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> LVecBase2i: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LVecBase2i) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_LVecBase2i(PointerToBase_ReferenceCountedVector_LVecBase2i):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_LVecBase2i(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_LVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_LVecBase3d | PointerToArray_LVecBase3d) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase3d: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> LVecBase3d: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Vec3d) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_LVecBase3d(PointerToBase_ReferenceCountedVector_LVecBase3d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_LVecBase3d(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_LVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_LVecBase3f | PointerToArray_LVecBase3f) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase3f: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> LVecBase3f: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Vec3f) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_LVecBase3f(PointerToBase_ReferenceCountedVector_LVecBase3f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_LVecBase3f(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_LVecBase3i(PointerToArrayBase_LVecBase3i):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_LVecBase3i | PointerToArray_LVecBase3i) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase3i: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> LVecBase3i: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LVecBase3i) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_LVecBase3i(PointerToBase_ReferenceCountedVector_LVecBase3i):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_LVecBase3i(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_UnalignedLMatrix4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_UnalignedLMatrix4d | PointerToArray_UnalignedLMatrix4d) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> UnalignedLMatrix4d: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> UnalignedLMatrix4d: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Mat4d) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_UnalignedLMatrix4d(PointerToBase_ReferenceCountedVector_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_UnalignedLMatrix4d(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_UnalignedLMatrix4f(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_UnalignedLMatrix4f | PointerToArray_UnalignedLMatrix4f) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> UnalignedLMatrix4f: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> UnalignedLMatrix4f: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Mat4f) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_UnalignedLMatrix4f(PointerToBase_ReferenceCountedVector_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_UnalignedLMatrix4f(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_UnalignedLVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_UnalignedLVecBase4d | PointerToArray_UnalignedLVecBase4d) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> UnalignedLVecBase4d: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> UnalignedLVecBase4d: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Vec4d) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_UnalignedLVecBase4d(PointerToBase_ReferenceCountedVector_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_UnalignedLVecBase4d(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_UnalignedLVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_UnalignedLVecBase4f | PointerToArray_UnalignedLVecBase4f) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> UnalignedLVecBase4f: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> UnalignedLVecBase4f: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Vec4f) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_UnalignedLVecBase4f(PointerToBase_ReferenceCountedVector_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_UnalignedLVecBase4f(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class ConstPointerToArray_UnalignedLVecBase4i(PointerToArrayBase_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, copy: ConstPointerToArray_UnalignedLVecBase4i | PointerToArray_UnalignedLVecBase4i) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> UnalignedLVecBase4i: ...
    def clear(self) -> None: ...
    def get_element(self, n: int) -> UnalignedLVecBase4i: ...
    def get_data(self) -> bytes: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Vec4i) -> int: ...
    getElement = get_element
    getData = get_data
    getSubdata = get_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArrayBase_UnalignedLVecBase4i(PointerToBase_ReferenceCountedVector_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...

class PointerToBase_ReferenceCountedVector_UnalignedLVecBase4i(PointerToVoid):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def output(self, out: ostream) -> None: ...

class PointerToArray_LMatrix3d(PointerToArrayBase_LMatrix3d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_LMatrix3d) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LMatrix3d: ...
    def __setitem__(self, n: int, value: LMatrix3d) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_LMatrix3d: ...
    def clear(self) -> None: ...
    def push_back(self, x: LMatrix3d) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> LMatrix3d: ...
    def set_element(self, n: int, value: LMatrix3d) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LMatrix3d) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_LMatrix3f(PointerToArrayBase_LMatrix3f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_LMatrix3f) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LMatrix3f: ...
    def __setitem__(self, n: int, value: LMatrix3f) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_LMatrix3f: ...
    def clear(self) -> None: ...
    def push_back(self, x: LMatrix3f) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> LMatrix3f: ...
    def set_element(self, n: int, value: LMatrix3f) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LMatrix3f) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_LVecBase2d(PointerToArrayBase_LVecBase2d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_LVecBase2d) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase2d: ...
    def __setitem__(self, n: int, value: LVecBase2d) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_LVecBase2d: ...
    def clear(self) -> None: ...
    def push_back(self, x: LVecBase2d) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> LVecBase2d: ...
    def set_element(self, n: int, value: LVecBase2d) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LVecBase2d) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_LVecBase2f(PointerToArrayBase_LVecBase2f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_LVecBase2f) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase2f: ...
    def __setitem__(self, n: int, value: LVecBase2f) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_LVecBase2f: ...
    def clear(self) -> None: ...
    def push_back(self, x: LVecBase2f) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> LVecBase2f: ...
    def set_element(self, n: int, value: LVecBase2f) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LVecBase2f) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_LVecBase2i(PointerToArrayBase_LVecBase2i):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_LVecBase2i) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase2i: ...
    def __setitem__(self, n: int, value: LVecBase2i) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_LVecBase2i: ...
    def clear(self) -> None: ...
    def push_back(self, x: LVecBase2i) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> LVecBase2i: ...
    def set_element(self, n: int, value: LVecBase2i) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LVecBase2i) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_LVecBase3d(PointerToArrayBase_LVecBase3d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_LVecBase3d) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase3d: ...
    def __setitem__(self, n: int, value: _Vec3d) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_LVecBase3d: ...
    def clear(self) -> None: ...
    def push_back(self, x: _Vec3d) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> LVecBase3d: ...
    def set_element(self, n: int, value: _Vec3d) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Vec3d) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_LVecBase3f(PointerToArrayBase_LVecBase3f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_LVecBase3f) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase3f: ...
    def __setitem__(self, n: int, value: _Vec3f) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_LVecBase3f: ...
    def clear(self) -> None: ...
    def push_back(self, x: _Vec3f) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> LVecBase3f: ...
    def set_element(self, n: int, value: _Vec3f) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Vec3f) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_LVecBase3i(PointerToArrayBase_LVecBase3i):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_LVecBase3i) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> LVecBase3i: ...
    def __setitem__(self, n: int, value: LVecBase3i) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_LVecBase3i: ...
    def clear(self) -> None: ...
    def push_back(self, x: LVecBase3i) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> LVecBase3i: ...
    def set_element(self, n: int, value: LVecBase3i) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: LVecBase3i) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_UnalignedLMatrix4d(PointerToArrayBase_UnalignedLMatrix4d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_UnalignedLMatrix4d) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> UnalignedLMatrix4d: ...
    def __setitem__(self, n: int, value: _Mat4d) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_UnalignedLMatrix4d: ...
    def clear(self) -> None: ...
    def push_back(self, x: _Mat4d) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> UnalignedLMatrix4d: ...
    def set_element(self, n: int, value: _Mat4d) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Mat4d) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_UnalignedLMatrix4f(PointerToArrayBase_UnalignedLMatrix4f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_UnalignedLMatrix4f) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> UnalignedLMatrix4f: ...
    def __setitem__(self, n: int, value: _Mat4f) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_UnalignedLMatrix4f: ...
    def clear(self) -> None: ...
    def push_back(self, x: _Mat4f) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> UnalignedLMatrix4f: ...
    def set_element(self, n: int, value: _Mat4f) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Mat4f) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_UnalignedLVecBase4d(PointerToArrayBase_UnalignedLVecBase4d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_UnalignedLVecBase4d) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> UnalignedLVecBase4d: ...
    def __setitem__(self, n: int, value: _Vec4d) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_UnalignedLVecBase4d: ...
    def clear(self) -> None: ...
    def push_back(self, x: _Vec4d) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> UnalignedLVecBase4d: ...
    def set_element(self, n: int, value: _Vec4d) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Vec4d) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_UnalignedLVecBase4f(PointerToArrayBase_UnalignedLVecBase4f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_UnalignedLVecBase4f) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> UnalignedLVecBase4f: ...
    def __setitem__(self, n: int, value: _Vec4f) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_UnalignedLVecBase4f: ...
    def clear(self) -> None: ...
    def push_back(self, x: _Vec4f) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> UnalignedLVecBase4f: ...
    def set_element(self, n: int, value: _Vec4f) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Vec4f) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class PointerToArray_UnalignedLVecBase4i(PointerToArrayBase_UnalignedLVecBase4i):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, type_handle: TypeHandle = ...) -> None: ...
    @overload
    def __init__(self, copy: PointerToArray_UnalignedLVecBase4i) -> None: ...
    @overload
    def __init__(self, source: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> UnalignedLVecBase4i: ...
    def __setitem__(self, n: int, value: _Vec4i) -> None: ...
    @staticmethod
    def empty_array(n: int, type_handle: TypeHandle = ...) -> PointerToArray_UnalignedLVecBase4i: ...
    def clear(self) -> None: ...
    def push_back(self, x: _Vec4i) -> None: ...
    def pop_back(self) -> None: ...
    def get_element(self, n: int) -> UnalignedLVecBase4i: ...
    def set_element(self, n: int, value: _Vec4i) -> None: ...
    def get_data(self) -> bytes: ...
    def set_data(self, data: Any) -> None: ...
    def get_subdata(self, n: int, count: int) -> bytes: ...
    def set_subdata(self, n: int, count: int, data: str) -> None: ...
    def get_ref_count(self) -> int: ...
    def get_node_ref_count(self) -> int: ...
    def count(self, __param0: _Vec4i) -> int: ...
    emptyArray = empty_array
    pushBack = push_back
    popBack = pop_back
    getElement = get_element
    setElement = set_element
    getData = get_data
    setData = set_data
    getSubdata = get_subdata
    setSubdata = set_subdata
    getRefCount = get_ref_count
    getNodeRefCount = get_node_ref_count

class BoundingVolume(TypedReferenceCount):
    DtoolClassDict: ClassVar[dict[str, Any]]
    IF_no_intersection: ClassVar[Literal[0]]
    IF_possible: ClassVar[Literal[1]]
    IF_some: ClassVar[Literal[2]]
    IF_all: ClassVar[Literal[4]]
    IF_dont_understand: ClassVar[Literal[8]]
    BT_default: ClassVar[Literal[0]]
    BT_best: ClassVar[Literal[1]]
    BT_sphere: ClassVar[Literal[2]]
    BT_box: ClassVar[Literal[3]]
    BT_fastest: ClassVar[Literal[4]]
    def make_copy(self) -> BoundingVolume: ...
    def is_empty(self) -> bool: ...
    def is_infinite(self) -> bool: ...
    def set_infinite(self) -> None: ...
    def extend_by(self, vol: BoundingVolume) -> bool: ...
    def contains(self, vol: BoundingVolume) -> int: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    makeCopy = make_copy
    isEmpty = is_empty
    isInfinite = is_infinite
    setInfinite = set_infinite
    extendBy = extend_by
    getClassType = get_class_type
    IFNoIntersection = IF_no_intersection
    IFPossible = IF_possible
    IFSome = IF_some
    IFAll = IF_all
    IFDontUnderstand = IF_dont_understand
    BTDefault = BT_default
    BTBest = BT_best
    BTSphere = BT_sphere
    BTBox = BT_box
    BTFastest = BT_fastest

class GeometricBoundingVolume(BoundingVolume):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def extend_by(self, vol: GeometricBoundingVolume) -> bool: ...
    @overload
    def extend_by(self, point: _Vec3f) -> bool: ...
    @overload
    def contains(self, vol: GeometricBoundingVolume) -> int: ...
    @overload
    def contains(self, point: _Vec3f) -> int: ...
    @overload
    def contains(self, a: _Vec3f, b: _Vec3f) -> int: ...
    def get_approx_center(self) -> LPoint3f: ...
    def xform(self, mat: _Mat4f) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    extendBy = extend_by
    getApproxCenter = get_approx_center
    getClassType = get_class_type

class FiniteBoundingVolume(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def min(self) -> LPoint3f: ...
    @property
    def max(self) -> LPoint3f: ...
    @property
    def volume(self) -> float: ...
    def get_min(self) -> LPoint3f: ...
    def get_max(self) -> LPoint3f: ...
    def get_volume(self) -> float: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getMin = get_min
    getMax = get_max
    getVolume = get_volume
    getClassType = get_class_type

class LParabolaf:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: LParabolaf) -> None: ...
    @overload
    def __init__(self, a: _Vec3f, b: _Vec3f, c: _Vec3f) -> None: ...
    def assign(self, copy: LParabolaf) -> LParabolaf: ...
    def xform(self, mat: _Mat4f) -> None: ...
    def get_a(self) -> LVecBase3f: ...
    def get_b(self) -> LVecBase3f: ...
    def get_c(self) -> LVecBase3f: ...
    def calc_point(self, t: float) -> LPoint3f: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def write_datagram_fixed(self, destination: Datagram) -> None: ...
    def read_datagram_fixed(self, source: DatagramIterator) -> None: ...
    def write_datagram(self, destination: Datagram) -> None: ...
    def read_datagram(self, source: DatagramIterator) -> None: ...
    getA = get_a
    getB = get_b
    getC = get_c
    calcPoint = calc_point
    writeDatagramFixed = write_datagram_fixed
    readDatagramFixed = read_datagram_fixed
    writeDatagram = write_datagram
    readDatagram = read_datagram

class LParabolad:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: LParabolad) -> None: ...
    @overload
    def __init__(self, a: _Vec3d, b: _Vec3d, c: _Vec3d) -> None: ...
    def assign(self, copy: LParabolad) -> LParabolad: ...
    def xform(self, mat: _Mat4d) -> None: ...
    def get_a(self) -> LVecBase3d: ...
    def get_b(self) -> LVecBase3d: ...
    def get_c(self) -> LVecBase3d: ...
    def calc_point(self, t: float) -> LPoint3d: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    def write_datagram_fixed(self, destination: Datagram) -> None: ...
    def read_datagram_fixed(self, source: DatagramIterator) -> None: ...
    def write_datagram(self, destination: Datagram) -> None: ...
    def read_datagram(self, source: DatagramIterator) -> None: ...
    getA = get_a
    getB = get_b
    getC = get_c
    calcPoint = calc_point
    writeDatagramFixed = write_datagram_fixed
    readDatagramFixed = read_datagram_fixed
    writeDatagram = write_datagram
    readDatagram = read_datagram

class LPlanef(LVecBase4f):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: _Vec4f) -> None: ...
    @overload
    def __init__(self, normal: _Vec3f, point: _Vec3f) -> None: ...
    @overload
    def __init__(self, a: _Vec3f, b: _Vec3f, c: _Vec3f) -> None: ...
    @overload
    def __init__(self, a: float, b: float, c: float, d: float) -> None: ...
    def __mul__(self, mat: LMatrix3f | _Mat4f) -> LPlanef: ...
    def __imul__(self, mat: _Mat4f) -> LPlanef: ...
    def __neg__(self) -> LPlanef: ...
    def xform(self, mat: _Mat4f) -> None: ...
    def get_reflection_mat(self) -> LMatrix4f: ...
    def get_normal(self) -> LVector3f: ...
    def get_point(self) -> LPoint3f: ...
    def dist_to_plane(self, point: _Vec3f) -> float: ...
    def normalize(self) -> bool: ...
    def normalized(self) -> LPlanef: ...
    def project(self, point: _Vec3f) -> LPoint3f: ...
    def flip(self) -> None: ...
    def intersects_line(self, intersection_point: _Vec3f, p1: _Vec3f, p2: _Vec3f) -> bool: ...
    def intersects_plane(self, _from: _Vec3f, delta: _Vec3f, other: _Vec4f) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    getReflectionMat = get_reflection_mat
    getNormal = get_normal
    getPoint = get_point
    distToPlane = dist_to_plane
    intersectsLine = intersects_line
    intersectsPlane = intersects_plane

class LPlaned(LVecBase4d):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: _Vec4d) -> None: ...
    @overload
    def __init__(self, normal: _Vec3d, point: _Vec3d) -> None: ...
    @overload
    def __init__(self, a: _Vec3d, b: _Vec3d, c: _Vec3d) -> None: ...
    @overload
    def __init__(self, a: float, b: float, c: float, d: float) -> None: ...
    def __mul__(self, mat: LMatrix3d | _Mat4d) -> LPlaned: ...
    def __imul__(self, mat: _Mat4d) -> LPlaned: ...
    def __neg__(self) -> LPlaned: ...
    def xform(self, mat: _Mat4d) -> None: ...
    def get_reflection_mat(self) -> LMatrix4d: ...
    def get_normal(self) -> LVector3d: ...
    def get_point(self) -> LPoint3d: ...
    def dist_to_plane(self, point: _Vec3d) -> float: ...
    def normalize(self) -> bool: ...
    def normalized(self) -> LPlaned: ...
    def project(self, point: _Vec3d) -> LPoint3d: ...
    def flip(self) -> None: ...
    def intersects_line(self, intersection_point: _Vec3d, p1: _Vec3d, p2: _Vec3d) -> bool: ...
    def intersects_plane(self, _from: _Vec3d, delta: _Vec3d, other: _Vec4d) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream, indent_level: int = ...) -> None: ...
    getReflectionMat = get_reflection_mat
    getNormal = get_normal
    getPoint = get_point
    distToPlane = dist_to_plane
    intersectsLine = intersects_line
    intersectsPlane = intersects_plane

class BoundingBox(FiniteBoundingVolume):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def points(self) -> Sequence[LPoint3f]: ...
    @property
    def planes(self) -> Sequence[LPlanef]: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, min: _Vec3f, max: _Vec3f) -> None: ...
    def get_num_points(self) -> int: ...
    def get_point(self, n: int) -> LPoint3f: ...
    def get_num_planes(self) -> int: ...
    def get_plane(self, n: int) -> LPlanef: ...
    def set_min_max(self, min: _Vec3f, max: _Vec3f) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_points(self) -> tuple[LPoint3f, ...]: ...
    def get_planes(self) -> tuple[LPlanef, ...]: ...
    getNumPoints = get_num_points
    getPoint = get_point
    getNumPlanes = get_num_planes
    getPlane = get_plane
    setMinMax = set_min_max
    getClassType = get_class_type
    getPoints = get_points
    getPlanes = get_planes

class LFrustumf:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: LFrustumf) -> None: ...
    @overload
    def make_ortho_2D(self) -> None: ...
    @overload
    def make_ortho_2D(self, l: float, r: float, t: float, b: float) -> None: ...
    @overload
    def make_ortho(self, fnear: float, ffar: float) -> None: ...
    @overload
    def make_ortho(self, fnear: float, ffar: float, l: float, r: float, t: float, b: float) -> None: ...
    def make_perspective_hfov(self, xfov: float, aspect: float, fnear: float, ffar: float) -> None: ...
    def make_perspective_vfov(self, yfov: float, aspect: float, fnear: float, ffar: float) -> None: ...
    def make_perspective(self, xfov: float, yfov: float, fnear: float, ffar: float) -> None: ...
    makeOrtho2D = make_ortho_2D
    makeOrtho = make_ortho
    makePerspectiveHfov = make_perspective_hfov
    makePerspectiveVfov = make_perspective_vfov
    makePerspective = make_perspective

class LFrustumd:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: LFrustumd) -> None: ...
    @overload
    def make_ortho_2D(self) -> None: ...
    @overload
    def make_ortho_2D(self, l: float, r: float, t: float, b: float) -> None: ...
    @overload
    def make_ortho(self, fnear: float, ffar: float) -> None: ...
    @overload
    def make_ortho(self, fnear: float, ffar: float, l: float, r: float, t: float, b: float) -> None: ...
    def make_perspective_hfov(self, xfov: float, aspect: float, fnear: float, ffar: float) -> None: ...
    def make_perspective_vfov(self, yfov: float, aspect: float, fnear: float, ffar: float) -> None: ...
    def make_perspective(self, xfov: float, yfov: float, fnear: float, ffar: float) -> None: ...
    makeOrtho2D = make_ortho_2D
    makeOrtho = make_ortho
    makePerspectiveHfov = make_perspective_hfov
    makePerspectiveVfov = make_perspective_vfov
    makePerspective = make_perspective

class BoundingHexahedron(FiniteBoundingVolume):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def points(self) -> Sequence[LPoint3f]: ...
    @property
    def planes(self) -> Sequence[LPlanef]: ...
    @overload
    def __init__(self, frustum: LFrustumf, is_ortho: bool, cs: _CoordinateSystem = ...) -> None: ...
    @overload
    def __init__(self, fll: _Vec3f, flr: _Vec3f, fur: _Vec3f, ful: _Vec3f, nll: _Vec3f, nlr: _Vec3f, nur: _Vec3f, nul: _Vec3f) -> None: ...
    def get_num_points(self) -> int: ...
    def get_point(self, n: int) -> LPoint3f: ...
    def get_num_planes(self) -> int: ...
    def get_plane(self, n: int) -> LPlanef: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_points(self) -> tuple[LPoint3f, ...]: ...
    def get_planes(self) -> tuple[LPlanef, ...]: ...
    getNumPoints = get_num_points
    getPoint = get_point
    getNumPlanes = get_num_planes
    getPlane = get_plane
    getClassType = get_class_type
    getPoints = get_points
    getPlanes = get_planes

class BoundingLine(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, a: _Vec3f, b: _Vec3f) -> None: ...
    def get_point_a(self) -> LPoint3f: ...
    def get_point_b(self) -> LPoint3f: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getPointA = get_point_a
    getPointB = get_point_b
    getClassType = get_class_type

class BoundingPlane(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def plane(self) -> LPlanef: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, plane: _Vec4f) -> None: ...
    def get_plane(self) -> LPlanef: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getPlane = get_plane
    getClassType = get_class_type

class BoundingSphere(FiniteBoundingVolume):
    DtoolClassDict: ClassVar[dict[str, Any]]
    center: LPoint3f
    radius: float
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, center: _Vec3f, radius: float) -> None: ...
    def get_center(self) -> LPoint3f: ...
    def get_radius(self) -> float: ...
    def set_center(self, center: _Vec3f) -> None: ...
    def set_radius(self, radius: float) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getCenter = get_center
    getRadius = get_radius
    setCenter = set_center
    setRadius = set_radius
    getClassType = get_class_type

class IntersectionBoundingVolume(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def components(self) -> Sequence[GeometricBoundingVolume]: ...
    def __init__(self) -> None: ...
    def get_num_components(self) -> int: ...
    def get_component(self, n: int) -> GeometricBoundingVolume: ...
    def clear_components(self) -> None: ...
    def add_component(self, component: GeometricBoundingVolume) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_components(self) -> tuple[GeometricBoundingVolume, ...]: ...
    getNumComponents = get_num_components
    getComponent = get_component
    clearComponents = clear_components
    addComponent = add_component
    getClassType = get_class_type
    getComponents = get_components

class Mersenne:
    DtoolClassDict: ClassVar[dict[str, Any]]
    max_value: ClassVar[Literal[2147483647]]
    @overload
    def __init__(self, __param0: Mersenne) -> None: ...
    @overload
    def __init__(self, seed: int) -> None: ...
    def get_uint31(self) -> int: ...
    getUint31 = get_uint31

class OmniBoundingVolume(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class UnionBoundingVolume(GeometricBoundingVolume):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def components(self) -> Sequence[GeometricBoundingVolume]: ...
    def __init__(self) -> None: ...
    def get_num_components(self) -> int: ...
    def get_component(self, n: int) -> GeometricBoundingVolume: ...
    def clear_components(self) -> None: ...
    def add_component(self, component: GeometricBoundingVolume) -> None: ...
    def filter_intersection(self, volume: BoundingVolume) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_components(self) -> tuple[GeometricBoundingVolume, ...]: ...
    getNumComponents = get_num_components
    getComponent = get_component
    clearComponents = clear_components
    addComponent = add_component
    filterIntersection = filter_intersection
    getClassType = get_class_type
    getComponents = get_components

class Randomizer:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, seed: int = ...) -> None: ...
    @overload
    def __init__(self, copy: Randomizer) -> None: ...
    def assign(self, copy: Randomizer) -> Randomizer: ...
    def random_int(self, range: int) -> int: ...
    def random_real(self, range: float) -> float: ...
    def random_real_unit(self) -> float: ...
    @staticmethod
    def get_next_seed() -> int: ...
    def get_seed(self) -> int: ...
    randomInt = random_int
    randomReal = random_real
    randomRealUnit = random_real_unit
    getNextSeed = get_next_seed
    getSeed = get_seed

class PerlinNoise:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def get_seed(self) -> int: ...
    getSeed = get_seed

class PerlinNoise2(PerlinNoise):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: PerlinNoise2) -> None: ...
    @overload
    def __init__(self, sx: float, sy: float, table_size: int = ..., seed: int = ...) -> None: ...
    @overload
    def __call__(self, value: LVecBase2d | LVecBase2f) -> float: ...
    @overload
    def __call__(self, x: float, y: float) -> float: ...
    def assign(self, copy: PerlinNoise2) -> PerlinNoise2: ...
    @overload
    def set_scale(self, scale: LVecBase2d | LVecBase2f | float) -> None: ...
    @overload
    def set_scale(self, sx: float, sy: float) -> None: ...
    @overload
    def noise(self, value: LVecBase2d | LVecBase2f) -> float: ...
    @overload
    def noise(self, x: float, y: float) -> float: ...
    setScale = set_scale

class PerlinNoise3(PerlinNoise):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: PerlinNoise3) -> None: ...
    @overload
    def __init__(self, sx: float, sy: float, sz: float, table_size: int = ..., seed: int = ...) -> None: ...
    @overload
    def __call__(self, value: _Vec3d | _Vec3f) -> float: ...
    @overload
    def __call__(self, x: float, y: float, z: float) -> float: ...
    def assign(self, copy: PerlinNoise3) -> PerlinNoise3: ...
    @overload
    def set_scale(self, scale: _Vec3d | _Vec3f | float) -> None: ...
    @overload
    def set_scale(self, sx: float, sy: float, sz: float) -> None: ...
    @overload
    def noise(self, value: _Vec3d | _Vec3f) -> float: ...
    @overload
    def noise(self, x: float, y: float, z: float) -> float: ...
    setScale = set_scale

class StackedPerlinNoise2:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: StackedPerlinNoise2) -> None: ...
    @overload
    def __init__(self, sx: float, sy: float, num_levels: int = ..., scale_factor: float = ..., amp_scale: float = ..., table_size: int = ..., seed: int = ...) -> None: ...
    @overload
    def __call__(self, value: LVecBase2d | LVecBase2f) -> float: ...
    @overload
    def __call__(self, x: float, y: float) -> float: ...
    def assign(self, copy: StackedPerlinNoise2) -> StackedPerlinNoise2: ...
    def add_level(self, level: PerlinNoise2, amp: float = ...) -> None: ...
    def clear(self) -> None: ...
    @overload
    def noise(self, value: LVecBase2d | LVecBase2f) -> float: ...
    @overload
    def noise(self, x: float, y: float) -> float: ...
    addLevel = add_level

class StackedPerlinNoise3:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: StackedPerlinNoise3) -> None: ...
    @overload
    def __init__(self, sx: float, sy: float, sz: float, num_levels: int = ..., scale_factor: float = ..., amp_scale: float = ..., table_size: int = ..., seed: int = ...) -> None: ...
    @overload
    def __call__(self, value: _Vec3d | _Vec3f) -> float: ...
    @overload
    def __call__(self, x: float, y: float, z: float) -> float: ...
    def assign(self, copy: StackedPerlinNoise3) -> StackedPerlinNoise3: ...
    def add_level(self, level: PerlinNoise3, amp: float = ...) -> None: ...
    def clear(self) -> None: ...
    @overload
    def noise(self, value: _Vec3d | _Vec3f) -> float: ...
    @overload
    def noise(self, x: float, y: float, z: float) -> float: ...
    addLevel = add_level

class Triangulator:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def vertices(self) -> Sequence[LPoint2d]: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: Triangulator) -> None: ...
    def clear(self) -> None: ...
    @overload
    def add_vertex(self, point: LVecBase2d) -> int: ...
    @overload
    def add_vertex(self, x: float, y: float) -> int: ...
    def get_num_vertices(self) -> int: ...
    def get_vertex(self, n: int) -> LPoint2d: ...
    def clear_polygon(self) -> None: ...
    def add_polygon_vertex(self, index: int) -> None: ...
    def is_left_winding(self) -> bool: ...
    def begin_hole(self) -> None: ...
    def add_hole_vertex(self, index: int) -> None: ...
    def triangulate(self) -> None: ...
    def get_num_triangles(self) -> int: ...
    def get_triangle_v0(self, n: int) -> int: ...
    def get_triangle_v1(self, n: int) -> int: ...
    def get_triangle_v2(self, n: int) -> int: ...
    def get_vertices(self) -> tuple[LPoint2d, ...]: ...
    addVertex = add_vertex
    getNumVertices = get_num_vertices
    getVertex = get_vertex
    clearPolygon = clear_polygon
    addPolygonVertex = add_polygon_vertex
    isLeftWinding = is_left_winding
    beginHole = begin_hole
    addHoleVertex = add_hole_vertex
    getNumTriangles = get_num_triangles
    getTriangleV0 = get_triangle_v0
    getTriangleV1 = get_triangle_v1
    getTriangleV2 = get_triangle_v2
    getVertices = get_vertices

class Triangulator3(Triangulator):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def vertices(self) -> Sequence[LPoint3d]: ...
    @property
    def plane(self) -> LPlaned: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: Triangulator3) -> None: ...
    def clear(self) -> None: ...
    @overload
    def add_vertex(self, point: _Vec3d) -> int: ...
    @overload
    def add_vertex(self, x: float, y: float, z: float) -> int: ...
    def get_num_vertices(self) -> int: ...
    def get_vertex(self, n: int) -> LPoint3d: ...
    def triangulate(self) -> None: ...
    def get_plane(self) -> LPlaned: ...
    def get_vertices(self) -> tuple[LPoint3d, ...]: ...
    addVertex = add_vertex
    getNumVertices = get_num_vertices
    getVertex = get_vertex
    getPlane = get_plane
    getVertices = get_vertices

@overload
def heads_up(mat: LMatrix3d | _Mat4d, fwd: _Vec3d, up: _Vec3d = ..., cs: _CoordinateSystem = ...) -> None: ...
@overload
def heads_up(mat: LMatrix3f | _Mat4f, fwd: _Vec3f, up: _Vec3f = ..., cs: _CoordinateSystem = ...) -> None: ...
@overload
def heads_up(quat: _Vec4d, fwd: _Vec3d, up: _Vec3d = ..., cs: _CoordinateSystem = ...) -> None: ...
@overload
def heads_up(quat: _Vec4f, fwd: _Vec3f, up: _Vec3f = ..., cs: _CoordinateSystem = ...) -> None: ...
@overload
def heads_up(mat: LMatrix3d | _Mat4d, fwd: _Vec3d, cs: _CoordinateSystem) -> None: ...
@overload
def heads_up(mat: LMatrix3f | _Mat4f, fwd: _Vec3f, cs: _CoordinateSystem) -> None: ...
@overload
def heads_up(quat: _Vec4d, fwd: _Vec3d, cs: _CoordinateSystem) -> None: ...
@overload
def heads_up(quat: _Vec4f, fwd: _Vec3f, cs: _CoordinateSystem) -> None: ...
@overload
def look_at(mat: LMatrix3d | _Mat4d, fwd: _Vec3d, up: _Vec3d = ..., cs: _CoordinateSystem = ...) -> None: ...
@overload
def look_at(mat: LMatrix3f | _Mat4f, fwd: _Vec3f, up: _Vec3f = ..., cs: _CoordinateSystem = ...) -> None: ...
@overload
def look_at(quat: _Vec4d, fwd: _Vec3d, up: _Vec3d = ..., cs: _CoordinateSystem = ...) -> None: ...
@overload
def look_at(quat: _Vec4f, fwd: _Vec3f, up: _Vec3f = ..., cs: _CoordinateSystem = ...) -> None: ...
@overload
def look_at(mat: LMatrix3d | _Mat4d, fwd: _Vec3d, cs: _CoordinateSystem) -> None: ...
@overload
def look_at(mat: LMatrix3f | _Mat4f, fwd: _Vec3f, cs: _CoordinateSystem) -> None: ...
@overload
def look_at(quat: _Vec4d, fwd: _Vec3d, cs: _CoordinateSystem) -> None: ...
@overload
def look_at(quat: _Vec4f, fwd: _Vec3f, cs: _CoordinateSystem) -> None: ...
@overload
def rotate_to(mat: LMatrix3d | _Mat4d, a: _Vec3d, b: _Vec3d) -> None: ...
@overload
def rotate_to(mat: LMatrix3f | _Mat4f, a: _Vec3f, b: _Vec3f) -> None: ...
headsUp = heads_up
lookAt = look_at
rotateTo = rotate_to
ConstPointerToArrayLMatrix3d = ConstPointerToArray_LMatrix3d
PointerToArrayBaseLMatrix3d = PointerToArrayBase_LMatrix3d
PointerToBaseReferenceCountedVectorLMatrix3d = PointerToBase_ReferenceCountedVector_LMatrix3d
ConstPointerToArrayLMatrix3f = ConstPointerToArray_LMatrix3f
PointerToArrayBaseLMatrix3f = PointerToArrayBase_LMatrix3f
PointerToBaseReferenceCountedVectorLMatrix3f = PointerToBase_ReferenceCountedVector_LMatrix3f
ConstPointerToArrayLVecBase2d = ConstPointerToArray_LVecBase2d
PointerToArrayBaseLVecBase2d = PointerToArrayBase_LVecBase2d
PointerToBaseReferenceCountedVectorLVecBase2d = PointerToBase_ReferenceCountedVector_LVecBase2d
ConstPointerToArrayLVecBase2f = ConstPointerToArray_LVecBase2f
PointerToArrayBaseLVecBase2f = PointerToArrayBase_LVecBase2f
PointerToBaseReferenceCountedVectorLVecBase2f = PointerToBase_ReferenceCountedVector_LVecBase2f
ConstPointerToArrayLVecBase2i = ConstPointerToArray_LVecBase2i
PointerToArrayBaseLVecBase2i = PointerToArrayBase_LVecBase2i
PointerToBaseReferenceCountedVectorLVecBase2i = PointerToBase_ReferenceCountedVector_LVecBase2i
ConstPointerToArrayLVecBase3d = ConstPointerToArray_LVecBase3d
PointerToArrayBaseLVecBase3d = PointerToArrayBase_LVecBase3d
PointerToBaseReferenceCountedVectorLVecBase3d = PointerToBase_ReferenceCountedVector_LVecBase3d
ConstPointerToArrayLVecBase3f = ConstPointerToArray_LVecBase3f
PointerToArrayBaseLVecBase3f = PointerToArrayBase_LVecBase3f
PointerToBaseReferenceCountedVectorLVecBase3f = PointerToBase_ReferenceCountedVector_LVecBase3f
ConstPointerToArrayLVecBase3i = ConstPointerToArray_LVecBase3i
PointerToArrayBaseLVecBase3i = PointerToArrayBase_LVecBase3i
PointerToBaseReferenceCountedVectorLVecBase3i = PointerToBase_ReferenceCountedVector_LVecBase3i
ConstPointerToArrayUnalignedLMatrix4d = ConstPointerToArray_UnalignedLMatrix4d
PointerToArrayBaseUnalignedLMatrix4d = PointerToArrayBase_UnalignedLMatrix4d
PointerToBaseReferenceCountedVectorUnalignedLMatrix4d = PointerToBase_ReferenceCountedVector_UnalignedLMatrix4d
ConstPointerToArrayUnalignedLMatrix4f = ConstPointerToArray_UnalignedLMatrix4f
PointerToArrayBaseUnalignedLMatrix4f = PointerToArrayBase_UnalignedLMatrix4f
PointerToBaseReferenceCountedVectorUnalignedLMatrix4f = PointerToBase_ReferenceCountedVector_UnalignedLMatrix4f
ConstPointerToArrayUnalignedLVecBase4d = ConstPointerToArray_UnalignedLVecBase4d
PointerToArrayBaseUnalignedLVecBase4d = PointerToArrayBase_UnalignedLVecBase4d
PointerToBaseReferenceCountedVectorUnalignedLVecBase4d = PointerToBase_ReferenceCountedVector_UnalignedLVecBase4d
ConstPointerToArrayUnalignedLVecBase4f = ConstPointerToArray_UnalignedLVecBase4f
PointerToArrayBaseUnalignedLVecBase4f = PointerToArrayBase_UnalignedLVecBase4f
PointerToBaseReferenceCountedVectorUnalignedLVecBase4f = PointerToBase_ReferenceCountedVector_UnalignedLVecBase4f
ConstPointerToArrayUnalignedLVecBase4i = ConstPointerToArray_UnalignedLVecBase4i
PointerToArrayBaseUnalignedLVecBase4i = PointerToArrayBase_UnalignedLVecBase4i
PointerToBaseReferenceCountedVectorUnalignedLVecBase4i = PointerToBase_ReferenceCountedVector_UnalignedLVecBase4i
PointerToArrayLMatrix3d = PointerToArray_LMatrix3d
PointerToArrayLMatrix3f = PointerToArray_LMatrix3f
PointerToArrayLVecBase2d = PointerToArray_LVecBase2d
PointerToArrayLVecBase2f = PointerToArray_LVecBase2f
PointerToArrayLVecBase2i = PointerToArray_LVecBase2i
PointerToArrayLVecBase3d = PointerToArray_LVecBase3d
PointerToArrayLVecBase3f = PointerToArray_LVecBase3f
PointerToArrayLVecBase3i = PointerToArray_LVecBase3i
PointerToArrayUnalignedLMatrix4d = PointerToArray_UnalignedLMatrix4d
PointerToArrayUnalignedLMatrix4f = PointerToArray_UnalignedLMatrix4f
PointerToArrayUnalignedLVecBase4d = PointerToArray_UnalignedLVecBase4d
PointerToArrayUnalignedLVecBase4f = PointerToArray_UnalignedLVecBase4f
PointerToArrayUnalignedLVecBase4i = PointerToArray_UnalignedLVecBase4i
LParabola = LParabolaf
LPlane = LPlanef
PlaneF = LPlanef
PlaneD = LPlaned
Plane = LPlanef
LFrustum = LFrustumf
FrustumF = LFrustumf
FrustumD = LFrustumd
Frustum = LFrustumf
PTA_LMatrix4f = PointerToArray_UnalignedLMatrix4f
PTALMatrix4f = PTA_LMatrix4f
CPTA_LMatrix4f = ConstPointerToArray_UnalignedLMatrix4f
CPTALMatrix4f = CPTA_LMatrix4f
PTA_LMatrix4d = PointerToArray_UnalignedLMatrix4d
PTALMatrix4d = PTA_LMatrix4d
CPTA_LMatrix4d = ConstPointerToArray_UnalignedLMatrix4d
CPTALMatrix4d = CPTA_LMatrix4d
PTA_LMatrix4 = PointerToArray_UnalignedLMatrix4f
PTALMatrix4 = PTA_LMatrix4
CPTA_LMatrix4 = ConstPointerToArray_UnalignedLMatrix4f
CPTALMatrix4 = CPTA_LMatrix4
PTAMat4 = PointerToArray_UnalignedLMatrix4f
CPTAMat4 = ConstPointerToArray_UnalignedLMatrix4f
PTAMat4d = PointerToArray_UnalignedLMatrix4d
CPTAMat4d = ConstPointerToArray_UnalignedLMatrix4d
PTA_LMatrix3f = PointerToArray_LMatrix3f
PTALMatrix3f = PTA_LMatrix3f
CPTA_LMatrix3f = ConstPointerToArray_LMatrix3f
CPTALMatrix3f = CPTA_LMatrix3f
PTA_LMatrix3d = PointerToArray_LMatrix3d
PTALMatrix3d = PTA_LMatrix3d
CPTA_LMatrix3d = ConstPointerToArray_LMatrix3d
CPTALMatrix3d = CPTA_LMatrix3d
PTA_LMatrix3 = PointerToArray_LMatrix3f
PTALMatrix3 = PTA_LMatrix3
CPTA_LMatrix3 = ConstPointerToArray_LMatrix3f
CPTALMatrix3 = CPTA_LMatrix3
PTAMat3 = PointerToArray_LMatrix3f
CPTAMat3 = ConstPointerToArray_LMatrix3f
PTAMat3d = PointerToArray_LMatrix3d
CPTAMat3d = ConstPointerToArray_LMatrix3d
PTA_LVecBase4f = PointerToArray_UnalignedLVecBase4f
PTALVecBase4f = PTA_LVecBase4f
CPTA_LVecBase4f = ConstPointerToArray_UnalignedLVecBase4f
CPTALVecBase4f = CPTA_LVecBase4f
PTA_LVecBase4d = PointerToArray_UnalignedLVecBase4d
PTALVecBase4d = PTA_LVecBase4d
CPTA_LVecBase4d = ConstPointerToArray_UnalignedLVecBase4d
CPTALVecBase4d = CPTA_LVecBase4d
PTA_LVecBase4i = PointerToArray_UnalignedLVecBase4i
PTALVecBase4i = PTA_LVecBase4i
CPTA_LVecBase4i = ConstPointerToArray_UnalignedLVecBase4i
CPTALVecBase4i = CPTA_LVecBase4i
PTA_LVecBase4 = PointerToArray_UnalignedLVecBase4f
PTALVecBase4 = PTA_LVecBase4
CPTA_LVecBase4 = ConstPointerToArray_UnalignedLVecBase4f
CPTALVecBase4 = CPTA_LVecBase4
PTAVecBase4f = PointerToArray_UnalignedLVecBase4f
CPTAVecBase4f = ConstPointerToArray_UnalignedLVecBase4f
PTAVecBase4d = PointerToArray_UnalignedLVecBase4d
CPTAVecBase4d = ConstPointerToArray_UnalignedLVecBase4d
PTA_LVecBase3f = PointerToArray_LVecBase3f
PTALVecBase3f = PTA_LVecBase3f
CPTA_LVecBase3f = ConstPointerToArray_LVecBase3f
CPTALVecBase3f = CPTA_LVecBase3f
PTA_LVecBase3d = PointerToArray_LVecBase3d
PTALVecBase3d = PTA_LVecBase3d
CPTA_LVecBase3d = ConstPointerToArray_LVecBase3d
CPTALVecBase3d = CPTA_LVecBase3d
PTA_LVecBase3i = PointerToArray_LVecBase3i
PTALVecBase3i = PTA_LVecBase3i
CPTA_LVecBase3i = ConstPointerToArray_LVecBase3i
CPTALVecBase3i = CPTA_LVecBase3i
PTA_LVecBase3 = PointerToArray_LVecBase3f
PTALVecBase3 = PTA_LVecBase3
CPTA_LVecBase3 = ConstPointerToArray_LVecBase3f
CPTALVecBase3 = CPTA_LVecBase3
PTAVecBase3f = PointerToArray_LVecBase3f
CPTAVecBase3f = ConstPointerToArray_LVecBase3f
PTAVecBase3d = PointerToArray_LVecBase3d
CPTAVecBase3d = ConstPointerToArray_LVecBase3d
PTA_LVecBase2f = PointerToArray_LVecBase2f
PTALVecBase2f = PTA_LVecBase2f
CPTA_LVecBase2f = ConstPointerToArray_LVecBase2f
CPTALVecBase2f = CPTA_LVecBase2f
PTA_LVecBase2d = PointerToArray_LVecBase2d
PTALVecBase2d = PTA_LVecBase2d
CPTA_LVecBase2d = ConstPointerToArray_LVecBase2d
CPTALVecBase2d = CPTA_LVecBase2d
PTA_LVecBase2i = PointerToArray_LVecBase2i
PTALVecBase2i = PTA_LVecBase2i
CPTA_LVecBase2i = ConstPointerToArray_LVecBase2i
CPTALVecBase2i = CPTA_LVecBase2i
PTA_LVecBase2 = PointerToArray_LVecBase2f
PTALVecBase2 = PTA_LVecBase2
CPTA_LVecBase2 = ConstPointerToArray_LVecBase2f
CPTALVecBase2 = CPTA_LVecBase2
PTAVecBase2f = PointerToArray_LVecBase2f
CPTAVecBase2f = ConstPointerToArray_LVecBase2f
PTAVecBase2d = PointerToArray_LVecBase2d
CPTAVecBase2d = ConstPointerToArray_LVecBase2d
