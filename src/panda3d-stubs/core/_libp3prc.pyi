from collections.abc import Sequence
from os import PathLike
from typing import Any, ClassVar, Literal, TypeAlias, overload

_ConfigFlags_ValueType: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
_Filename: TypeAlias = Filename | ConfigVariableFilename | str | bytes | PathLike
_NotifySeverity: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6]

class ConfigFlags:
    DtoolClassDict: ClassVar[dict[str, Any]]
    VT_undefined: ClassVar[Literal[0]]
    VT_list: ClassVar[Literal[1]]
    VT_string: ClassVar[Literal[2]]
    VT_filename: ClassVar[Literal[3]]
    VT_bool: ClassVar[Literal[4]]
    VT_int: ClassVar[Literal[5]]
    VT_double: ClassVar[Literal[6]]
    VT_enum: ClassVar[Literal[7]]
    VT_search_path: ClassVar[Literal[8]]
    VT_int64: ClassVar[Literal[9]]
    VT_color: ClassVar[Literal[10]]
    F_trust_level_mask: ClassVar[Literal[4095]]
    F_open: ClassVar[Literal[4096]]
    F_closed: ClassVar[Literal[8192]]
    F_dynamic: ClassVar[Literal[16384]]
    F_dconfig: ClassVar[Literal[32768]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: ConfigFlags) -> None: ...
    VTUndefined = VT_undefined
    VTList = VT_list
    VTString = VT_string
    VTFilename = VT_filename
    VTBool = VT_bool
    VTInt = VT_int
    VTDouble = VT_double
    VTEnum = VT_enum
    VTSearchPath = VT_search_path
    VTInt64 = VT_int64
    VTColor = VT_color
    FTrustLevelMask = F_trust_level_mask
    FOpen = F_open
    FClosed = F_closed
    FDynamic = F_dynamic
    FDconfig = F_dconfig

class ConfigPage:
    DtoolClassDict: ClassVar[dict[str, Any]]
    sort: int
    trust_level: int
    @property
    def name(self) -> str: ...
    @property
    def special(self) -> bool: ...
    @property
    def implicit(self) -> bool: ...
    @property
    def page_seq(self) -> int: ...
    @property
    def signature(self) -> str: ...
    @property
    def declarations(self) -> Sequence[ConfigDeclaration]: ...
    @staticmethod
    def get_default_page() -> ConfigPage: ...
    @staticmethod
    def get_local_page() -> ConfigPage: ...
    def get_name(self) -> str: ...
    def is_special(self) -> bool: ...
    def is_implicit(self) -> bool: ...
    def set_sort(self, sort: int) -> None: ...
    def get_sort(self) -> int: ...
    def get_page_seq(self) -> int: ...
    def get_trust_level(self) -> int: ...
    def set_trust_level(self, trust_level: int) -> None: ...
    def get_signature(self) -> str: ...
    def clear(self) -> None: ...
    def read_prc(self, _in: istream) -> bool: ...
    def read_encrypted_prc(self, _in: istream, password: str) -> bool: ...
    def make_declaration(self, variable: ConfigVariableCore | str, value: str) -> ConfigDeclaration: ...
    def delete_declaration(self, decl: ConfigDeclaration) -> bool: ...
    def get_num_declarations(self) -> int: ...
    def get_declaration(self, n: int) -> ConfigDeclaration: ...
    def modify_declaration(self, n: int) -> ConfigDeclaration: ...
    def get_variable_name(self, n: int) -> str: ...
    def get_string_value(self, n: int) -> str: ...
    def is_variable_used(self, n: int) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def output_brief_signature(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    getDefaultPage = get_default_page
    getLocalPage = get_local_page
    getName = get_name
    isSpecial = is_special
    isImplicit = is_implicit
    setSort = set_sort
    getSort = get_sort
    getPageSeq = get_page_seq
    getTrustLevel = get_trust_level
    setTrustLevel = set_trust_level
    getSignature = get_signature
    readPrc = read_prc
    readEncryptedPrc = read_encrypted_prc
    makeDeclaration = make_declaration
    deleteDeclaration = delete_declaration
    getNumDeclarations = get_num_declarations
    getDeclaration = get_declaration
    modifyDeclaration = modify_declaration
    getVariableName = get_variable_name
    getStringValue = get_string_value
    isVariableUsed = is_variable_used
    outputBriefSignature = output_brief_signature

class ConfigDeclaration(ConfigFlags):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def page(self) -> ConfigPage: ...
    @property
    def variable(self) -> ConfigVariableCore: ...
    def get_page(self) -> ConfigPage: ...
    def get_variable(self) -> ConfigVariableCore: ...
    def get_string_value(self) -> str: ...
    def set_string_value(self, value: str) -> None: ...
    def get_num_words(self) -> int: ...
    def has_string_word(self, n: int) -> bool: ...
    def has_bool_word(self, n: int) -> bool: ...
    def has_int_word(self, n: int) -> bool: ...
    def has_int64_word(self, n: int) -> bool: ...
    def has_double_word(self, n: int) -> bool: ...
    def get_string_word(self, n: int) -> str: ...
    def get_bool_word(self, n: int) -> bool: ...
    def get_int_word(self, n: int) -> int: ...
    def get_int64_word(self, n: int) -> int: ...
    def get_double_word(self, n: int) -> float: ...
    def set_string_word(self, n: int, value: str) -> None: ...
    def set_bool_word(self, n: int, value: bool) -> None: ...
    def set_int_word(self, n: int, value: int) -> None: ...
    def set_int64_word(self, n: int, value: int) -> None: ...
    def set_double_word(self, n: int, value: float) -> None: ...
    def get_filename_value(self) -> Filename: ...
    def get_decl_seq(self) -> int: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    getPage = get_page
    getVariable = get_variable
    getStringValue = get_string_value
    setStringValue = set_string_value
    getNumWords = get_num_words
    hasStringWord = has_string_word
    hasBoolWord = has_bool_word
    hasIntWord = has_int_word
    hasInt64Word = has_int64_word
    hasDoubleWord = has_double_word
    getStringWord = get_string_word
    getBoolWord = get_bool_word
    getIntWord = get_int_word
    getInt64Word = get_int64_word
    getDoubleWord = get_double_word
    setStringWord = set_string_word
    setBoolWord = set_bool_word
    setIntWord = set_int_word
    setInt64Word = set_int64_word
    setDoubleWord = set_double_word
    getFilenameValue = get_filename_value
    getDeclSeq = get_decl_seq

class ConfigVariableCore(ConfigFlags):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value_type: _ConfigFlags_ValueType
    description: str
    default_value: ConfigDeclaration
    @property
    def declarations(self) -> Sequence[ConfigDeclaration]: ...
    @property
    def name(self) -> str: ...
    @property
    def used(self) -> bool: ...
    @property
    def closed(self) -> bool: ...
    @property
    def trust_level(self) -> int: ...
    @property
    def dynamic(self) -> bool: ...
    @property
    def references(self) -> Sequence[ConfigDeclaration]: ...
    @property
    def trusted_references(self) -> Sequence[ConfigDeclaration]: ...
    @property
    def unique_references(self) -> Sequence[ConfigDeclaration]: ...
    def get_name(self) -> str: ...
    def is_used(self) -> bool: ...
    def get_value_type(self) -> _ConfigFlags_ValueType: ...
    def get_description(self) -> str: ...
    def get_flags(self) -> int: ...
    def is_closed(self) -> bool: ...
    def get_trust_level(self) -> int: ...
    def is_dynamic(self) -> bool: ...
    def get_default_value(self) -> ConfigDeclaration: ...
    def set_value_type(self, value_type: _ConfigFlags_ValueType) -> None: ...
    def set_flags(self, flags: int) -> None: ...
    def set_description(self, description: str) -> None: ...
    def set_default_value(self, default_value: str) -> None: ...
    def set_used(self) -> None: ...
    def make_local_value(self) -> ConfigDeclaration: ...
    def clear_local_value(self) -> bool: ...
    def has_local_value(self) -> bool: ...
    def has_value(self) -> bool: ...
    def get_num_declarations(self) -> int: ...
    def get_declaration(self, n: int) -> ConfigDeclaration: ...
    def get_num_references(self) -> int: ...
    def get_reference(self, n: int) -> ConfigDeclaration: ...
    def get_num_trusted_references(self) -> int: ...
    def get_trusted_reference(self, n: int) -> ConfigDeclaration: ...
    def get_num_unique_references(self) -> int: ...
    def get_unique_reference(self, n: int) -> ConfigDeclaration: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    def get_declarations(self) -> tuple[ConfigDeclaration, ...]: ...
    def get_references(self) -> tuple[ConfigDeclaration, ...]: ...
    def get_trusted_references(self) -> tuple[ConfigDeclaration, ...]: ...
    def get_unique_references(self) -> tuple[ConfigDeclaration, ...]: ...
    getName = get_name
    isUsed = is_used
    getValueType = get_value_type
    getDescription = get_description
    getFlags = get_flags
    isClosed = is_closed
    getTrustLevel = get_trust_level
    isDynamic = is_dynamic
    getDefaultValue = get_default_value
    setValueType = set_value_type
    setFlags = set_flags
    setDescription = set_description
    setDefaultValue = set_default_value
    setUsed = set_used
    makeLocalValue = make_local_value
    clearLocalValue = clear_local_value
    hasLocalValue = has_local_value
    hasValue = has_value
    getNumDeclarations = get_num_declarations
    getDeclaration = get_declaration
    getNumReferences = get_num_references
    getReference = get_reference
    getNumTrustedReferences = get_num_trusted_references
    getTrustedReference = get_trusted_reference
    getNumUniqueReferences = get_num_unique_references
    getUniqueReference = get_unique_reference
    getDeclarations = get_declarations
    getReferences = get_references
    getTrustedReferences = get_trusted_references
    getUniqueReferences = get_unique_references

class Notify:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: Notify) -> None: ...
    def set_ostream_ptr(self, ostream_ptr: ostream, delete_later: bool) -> None: ...
    def get_ostream_ptr(self) -> ostream: ...
    def clear_assert_handler(self) -> None: ...
    def has_assert_handler(self) -> bool: ...
    def has_assert_failed(self) -> bool: ...
    def get_assert_error_message(self) -> str: ...
    def clear_assert_failed(self) -> None: ...
    def get_top_category(self) -> NotifyCategory: ...
    @overload
    def get_category(self, fullname: str) -> NotifyCategory: ...
    @overload
    def get_category(self, basename: str, parent_category: NotifyCategory) -> NotifyCategory: ...
    @overload
    def get_category(self, basename: str, parent_fullname: str) -> NotifyCategory: ...
    @staticmethod
    def out() -> ostream: ...
    @staticmethod
    def null() -> ostream: ...
    @staticmethod
    def write_string(str: str) -> None: ...
    @staticmethod
    def ptr() -> Notify: ...
    setOstreamPtr = set_ostream_ptr
    getOstreamPtr = get_ostream_ptr
    clearAssertHandler = clear_assert_handler
    hasAssertHandler = has_assert_handler
    hasAssertFailed = has_assert_failed
    getAssertErrorMessage = get_assert_error_message
    clearAssertFailed = clear_assert_failed
    getTopCategory = get_top_category
    getCategory = get_category
    writeString = write_string

class ConfigPageManager(ConfigFlags):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def search_path(self) -> DSearchPath: ...
    @property
    def prc_patterns(self) -> Sequence[str]: ...
    @property
    def prc_encrypted_patterns(self) -> Sequence[str]: ...
    @property
    def prc_executable_patterns(self) -> Sequence[str]: ...
    @property
    def implicit_pages(self) -> Sequence[ConfigPage]: ...
    @property
    def explicit_pages(self) -> Sequence[ConfigPage]: ...
    def loaded_implicit_pages(self) -> bool: ...
    def load_implicit_pages(self) -> None: ...
    def reload_implicit_pages(self) -> None: ...
    def get_search_path(self) -> DSearchPath: ...
    def get_num_prc_patterns(self) -> int: ...
    def get_prc_pattern(self, n: int) -> str: ...
    def get_num_prc_encrypted_patterns(self) -> int: ...
    def get_prc_encrypted_pattern(self, n: int) -> str: ...
    def get_num_prc_executable_patterns(self) -> int: ...
    def get_prc_executable_pattern(self, n: int) -> str: ...
    def make_explicit_page(self, name: str) -> ConfigPage: ...
    def delete_explicit_page(self, page: ConfigPage) -> bool: ...
    def get_num_implicit_pages(self) -> int: ...
    def get_implicit_page(self, n: int) -> ConfigPage: ...
    def get_num_explicit_pages(self) -> int: ...
    def get_explicit_page(self, n: int) -> ConfigPage: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    @staticmethod
    def get_global_ptr() -> ConfigPageManager: ...
    loadedImplicitPages = loaded_implicit_pages
    loadImplicitPages = load_implicit_pages
    reloadImplicitPages = reload_implicit_pages
    getSearchPath = get_search_path
    getNumPrcPatterns = get_num_prc_patterns
    getPrcPattern = get_prc_pattern
    getNumPrcEncryptedPatterns = get_num_prc_encrypted_patterns
    getPrcEncryptedPattern = get_prc_encrypted_pattern
    getNumPrcExecutablePatterns = get_num_prc_executable_patterns
    getPrcExecutablePattern = get_prc_executable_pattern
    makeExplicitPage = make_explicit_page
    deleteExplicitPage = delete_explicit_page
    getNumImplicitPages = get_num_implicit_pages
    getImplicitPage = get_implicit_page
    getNumExplicitPages = get_num_explicit_pages
    getExplicitPage = get_explicit_page
    getGlobalPtr = get_global_ptr

class ConfigVariableManager:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def variables(self) -> Sequence[ConfigVariableCore]: ...
    def make_variable(self, name: str) -> ConfigVariableCore: ...
    def make_variable_template(self, pattern: str, type: _ConfigFlags_ValueType, default_value: str, description: str = ..., flags: int = ...) -> ConfigVariableCore: ...
    def get_num_variables(self) -> int: ...
    def get_variable(self, n: int) -> ConfigVariableCore: ...
    def get_variable_name(self, n: int) -> str: ...
    def is_variable_used(self, n: int) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    def write_prc_variables(self, out: ostream) -> None: ...
    def list_unused_variables(self) -> None: ...
    def list_variables(self) -> None: ...
    def list_dynamic_variables(self) -> None: ...
    @staticmethod
    def get_global_ptr() -> ConfigVariableManager: ...
    def get_variables(self) -> tuple[ConfigVariableCore, ...]: ...
    makeVariable = make_variable
    makeVariableTemplate = make_variable_template
    getNumVariables = get_num_variables
    getVariable = get_variable
    getVariableName = get_variable_name
    isVariableUsed = is_variable_used
    writePrcVariables = write_prc_variables
    listUnusedVariables = list_unused_variables
    listVariables = list_variables
    listDynamicVariables = list_dynamic_variables
    getGlobalPtr = get_global_ptr
    getVariables = get_variables

class ConfigVariableBase(ConfigFlags):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def name(self) -> str: ...
    @property
    def value_type(self) -> _ConfigFlags_ValueType: ...
    @property
    def description(self) -> str: ...
    @property
    def closed(self) -> bool: ...
    @property
    def trust_level(self) -> int: ...
    @property
    def dynamic(self) -> bool: ...
    def get_name(self) -> str: ...
    def get_value_type(self) -> _ConfigFlags_ValueType: ...
    def get_description(self) -> str: ...
    def get_flags(self) -> int: ...
    def is_closed(self) -> bool: ...
    def get_trust_level(self) -> int: ...
    def is_dynamic(self) -> bool: ...
    def clear_local_value(self) -> bool: ...
    def has_local_value(self) -> bool: ...
    def has_value(self) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    getName = get_name
    getValueType = get_value_type
    getDescription = get_description
    getFlags = get_flags
    isClosed = is_closed
    getTrustLevel = get_trust_level
    isDynamic = is_dynamic
    clearLocalValue = clear_local_value
    hasLocalValue = has_local_value
    hasValue = has_value

class ConfigVariable(ConfigVariableBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, __param0: ConfigVariable) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    def get_string_value(self) -> str: ...
    def set_string_value(self, value: str) -> None: ...
    def clear_value(self) -> None: ...
    def get_num_words(self) -> int: ...
    getStringValue = get_string_value
    setStringValue = set_string_value
    clearValue = clear_value
    getNumWords = get_num_words

class ConfigVariableBool(ConfigVariable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: bool
    @property
    def default_value(self) -> bool: ...
    @overload
    def __init__(self, __param0: ConfigVariableBool) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str, default_value: bool | str, description: str = ..., flags: int = ...) -> None: ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> bool: ...
    def assign(self, value: bool) -> ConfigVariableBool: ...
    def set_value(self, value: bool) -> None: ...
    def get_value(self) -> bool: ...
    def get_default_value(self) -> bool: ...
    def get_word(self, n: int) -> bool: ...
    def set_word(self, n: int, value: bool) -> None: ...
    setValue = set_value
    getValue = get_value
    getDefaultValue = get_default_value
    getWord = get_word
    setWord = set_word

class ConfigVariableDouble(ConfigVariable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: float
    @property
    def default_value(self) -> float: ...
    @overload
    def __init__(self, __param0: ConfigVariableDouble) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str, default_value: float | str, description: str = ..., flags: int = ...) -> None: ...
    def __float__(self) -> float: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> float: ...
    def assign(self, value: float) -> ConfigVariableDouble: ...
    def set_value(self, value: float) -> None: ...
    def get_value(self) -> float: ...
    def get_default_value(self) -> float: ...
    def get_word(self, n: int) -> float: ...
    def set_word(self, n: int, value: float) -> None: ...
    setValue = set_value
    getValue = get_value
    getDefaultValue = get_default_value
    getWord = get_word
    setWord = set_word

class ConfigVariableFilename(ConfigVariable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: Filename
    @property
    def default_value(self) -> Filename: ...
    @overload
    def __init__(self, __param0: ConfigVariableFilename) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str, default_value: _Filename, description: str = ..., flags: int = ...) -> None: ...
    def __getitem__(self, n: int) -> str: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: _Filename) -> bool: ...
    def __le__(self, other: _Filename) -> bool: ...
    def operator_typecast(self) -> Filename: ...
    def assign(self, value: _Filename) -> ConfigVariableFilename: ...
    def c_str(self) -> str: ...
    def empty(self) -> bool: ...
    def length(self) -> int: ...
    def get_fullpath(self) -> str: ...
    def get_dirname(self) -> str: ...
    def get_basename(self) -> str: ...
    def get_fullpath_wo_extension(self) -> str: ...
    def get_basename_wo_extension(self) -> str: ...
    def get_extension(self) -> str: ...
    def set_value(self, value: _Filename) -> None: ...
    def get_value(self) -> Filename: ...
    def get_default_value(self) -> Filename: ...
    def get_word(self, n: int) -> Filename: ...
    def set_word(self, n: int, value: _Filename) -> None: ...
    operatorTypecast = operator_typecast
    cStr = c_str
    getFullpath = get_fullpath
    getDirname = get_dirname
    getBasename = get_basename
    getFullpathWoExtension = get_fullpath_wo_extension
    getBasenameWoExtension = get_basename_wo_extension
    getExtension = get_extension
    setValue = set_value
    getValue = get_value
    getDefaultValue = get_default_value
    getWord = get_word
    setWord = set_word

class ConfigVariableInt(ConfigVariable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: int
    @property
    def default_value(self) -> int: ...
    @overload
    def __init__(self, __param0: ConfigVariableInt) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str, default_value: int | str, description: str = ..., flags: int = ...) -> None: ...
    def __int__(self) -> int: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> int: ...
    def assign(self, value: int) -> ConfigVariableInt: ...
    def set_value(self, value: int) -> None: ...
    def get_value(self) -> int: ...
    def get_default_value(self) -> int: ...
    def get_word(self, n: int) -> int: ...
    def set_word(self, n: int, value: int) -> None: ...
    setValue = set_value
    getValue = get_value
    getDefaultValue = get_default_value
    getWord = get_word
    setWord = set_word

class ConfigVariableInt64(ConfigVariable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: int
    @property
    def default_value(self) -> int: ...
    @overload
    def __init__(self, __param0: ConfigVariableInt64) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str, default_value: int | str, description: str = ..., flags: int = ...) -> None: ...
    def __int__(self) -> int: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> int: ...
    def assign(self, value: int) -> ConfigVariableInt64: ...
    def set_value(self, value: int) -> None: ...
    def get_value(self) -> int: ...
    def get_default_value(self) -> int: ...
    def get_word(self, n: int) -> int: ...
    def set_word(self, n: int, value: int) -> None: ...
    setValue = set_value
    getValue = get_value
    getDefaultValue = get_default_value
    getWord = get_word
    setWord = set_word

class ConfigVariableList(ConfigVariableBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, __param0: ConfigVariableList) -> None: ...
    @overload
    def __init__(self, name: str, description: str = ..., flags: int = ...) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, n: int) -> str: ...
    def get_num_values(self) -> int: ...
    def get_string_value(self, n: int) -> str: ...
    def get_num_unique_values(self) -> int: ...
    def get_unique_value(self, n: int) -> str: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    getNumValues = get_num_values
    getStringValue = get_string_value
    getNumUniqueValues = get_num_unique_values
    getUniqueValue = get_unique_value

class ConfigVariableSearchPath(ConfigVariableBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def value(self) -> DSearchPath: ...
    @property
    def default_value(self) -> DSearchPath: ...
    @property
    def directories(self) -> Sequence[Filename]: ...
    @overload
    def __init__(self, name: str, description: str = ..., flags: int = ...) -> None: ...
    @overload
    def __init__(self, name: str, default_value: ConfigVariableSearchPath | DSearchPath | str, description: str, flags: int = ...) -> None: ...
    def operator_typecast_DSearchPath(self) -> DSearchPath: ...
    def get_value(self) -> DSearchPath: ...
    def get_default_value(self) -> DSearchPath: ...
    def clear_local_value(self) -> bool: ...
    def clear(self) -> None: ...
    def append_directory(self, directory: _Filename) -> None: ...
    def prepend_directory(self, directory: _Filename) -> None: ...
    @overload
    def append_path(self, path: ConfigVariableSearchPath | DSearchPath) -> None: ...
    @overload
    def append_path(self, path: str, separator: str = ...) -> None: ...
    def prepend_path(self, path: ConfigVariableSearchPath | DSearchPath) -> None: ...
    def is_empty(self) -> bool: ...
    def get_num_directories(self) -> int: ...
    def get_directory(self, n: int) -> Filename: ...
    def find_file(self, filename: _Filename) -> Filename: ...
    @overload
    def find_all_files(self, filename: _Filename) -> DSearchPath.Results: ...
    @overload
    def find_all_files(self, filename: _Filename, results: DSearchPath.Results) -> int: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    def get_directories(self) -> tuple[Filename, ...]: ...
    operatorTypecastDSearchPath = operator_typecast_DSearchPath
    getValue = get_value
    getDefaultValue = get_default_value
    clearLocalValue = clear_local_value
    appendDirectory = append_directory
    prependDirectory = prepend_directory
    appendPath = append_path
    prependPath = prepend_path
    isEmpty = is_empty
    getNumDirectories = get_num_directories
    getDirectory = get_directory
    findFile = find_file
    findAllFiles = find_all_files
    getDirectories = get_directories

class ConfigVariableString(ConfigVariable):
    DtoolClassDict: ClassVar[dict[str, Any]]
    value: str
    @property
    def default_value(self) -> str: ...
    @overload
    def __init__(self, __param0: ConfigVariableString) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str, default_value: str, description: str = ..., flags: int = ...) -> None: ...
    def __getitem__(self, n: int) -> str: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: str) -> bool: ...
    def __le__(self, other: str) -> bool: ...
    def assign(self, value: str) -> ConfigVariableString: ...
    def c_str(self) -> str: ...
    def empty(self) -> bool: ...
    def length(self) -> int: ...
    def set_value(self, value: str) -> None: ...
    def get_value(self) -> str: ...
    def get_default_value(self) -> str: ...
    def get_word(self, n: int) -> str: ...
    def set_word(self, n: int, value: str) -> None: ...
    cStr = c_str
    setValue = set_value
    getValue = get_value
    getDefaultValue = get_default_value
    getWord = get_word
    setWord = set_word

class NotifyCategory(ConfigFlags):
    DtoolClassDict: ClassVar[dict[str, Any]]
    severity: _NotifySeverity
    @property
    def fullname(self) -> str: ...
    @property
    def basename(self) -> str: ...
    @property
    def children(self) -> Sequence[NotifyCategory]: ...
    def __init__(self, __param0: NotifyCategory) -> None: ...
    def upcast_to_ConfigFlags(self) -> ConfigFlags: ...
    def get_fullname(self) -> str: ...
    def get_basename(self) -> str: ...
    def get_severity(self) -> _NotifySeverity: ...
    def set_severity(self, severity: _NotifySeverity) -> None: ...
    def is_on(self, severity: _NotifySeverity) -> bool: ...
    def is_spam(self) -> bool: ...
    def is_debug(self) -> bool: ...
    def is_info(self) -> bool: ...
    def is_warning(self) -> bool: ...
    def is_error(self) -> bool: ...
    def is_fatal(self) -> bool: ...
    def out(self, severity: _NotifySeverity, prefix: bool = ...) -> ostream: ...
    def spam(self, prefix: bool = ...) -> ostream: ...
    def debug(self, prefix: bool = ...) -> ostream: ...
    def info(self, prefix: bool = ...) -> ostream: ...
    def warning(self, prefix: bool = ...) -> ostream: ...
    def error(self, prefix: bool = ...) -> ostream: ...
    def fatal(self, prefix: bool = ...) -> ostream: ...
    def get_num_children(self) -> int: ...
    def get_child(self, i: int) -> NotifyCategory: ...
    @staticmethod
    def set_server_delta(delta: int) -> None: ...
    def get_children(self) -> tuple[NotifyCategory, ...]: ...
    upcastToConfigFlags = upcast_to_ConfigFlags
    getFullname = get_fullname
    getBasename = get_basename
    getSeverity = get_severity
    setSeverity = set_severity
    isOn = is_on
    isSpam = is_spam
    isDebug = is_debug
    isInfo = is_info
    isWarning = is_warning
    isError = is_error
    isFatal = is_fatal
    getNumChildren = get_num_children
    getChild = get_child
    setServerDelta = set_server_delta
    getChildren = get_children

class IDecryptStream(istream):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def algorithm(self) -> str: ...
    @property
    def key_length(self) -> int: ...
    @property
    def iteration_count(self) -> int: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, source: istream, owns_source: bool, password: str) -> None: ...
    def open(self, source: istream, owns_source: bool, password: str) -> IDecryptStream: ...
    def close(self) -> IDecryptStream: ...
    def get_algorithm(self) -> str: ...
    def get_key_length(self) -> int: ...
    def get_iteration_count(self) -> int: ...
    getAlgorithm = get_algorithm
    getKeyLength = get_key_length
    getIterationCount = get_iteration_count

class OEncryptStream(ostream):
    DtoolClassDict: ClassVar[dict[str, Any]]
    algorithm: str
    key_length: int
    iteration_count: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, dest: ostream, owns_dest: bool, password: str) -> None: ...
    def open(self, dest: ostream, owns_dest: bool, password: str) -> OEncryptStream: ...
    def close(self) -> OEncryptStream: ...
    def set_algorithm(self, algorithm: str) -> None: ...
    def set_key_length(self, key_length: int) -> None: ...
    def set_iteration_count(self, iteration_count: int) -> None: ...
    setAlgorithm = set_algorithm
    setKeyLength = set_key_length
    setIterationCount = set_iteration_count

class StreamReader:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def istream(self) -> istream: ...
    @overload
    def __init__(self, copy: StreamReader) -> None: ...
    @overload
    def __init__(self, _in: istream, owns_stream: bool) -> None: ...
    def assign(self, copy: StreamReader) -> StreamReader: ...
    def get_istream(self) -> istream: ...
    def get_bool(self) -> bool: ...
    def get_int8(self) -> str: ...
    def get_uint8(self) -> str: ...
    def get_int16(self) -> int: ...
    def get_int32(self) -> int: ...
    def get_int64(self) -> int: ...
    def get_uint16(self) -> int: ...
    def get_uint32(self) -> int: ...
    def get_uint64(self) -> int: ...
    def get_float32(self) -> float: ...
    def get_float64(self) -> float: ...
    def get_be_int16(self) -> int: ...
    def get_be_int32(self) -> int: ...
    def get_be_int64(self) -> int: ...
    def get_be_uint16(self) -> int: ...
    def get_be_uint32(self) -> int: ...
    def get_be_uint64(self) -> int: ...
    def get_be_float32(self) -> float: ...
    def get_be_float64(self) -> float: ...
    def get_string(self) -> str: ...
    def get_string32(self) -> str: ...
    def get_z_string(self) -> str: ...
    def get_fixed_string(self, size: int) -> str: ...
    def skip_bytes(self, size: int) -> None: ...
    def extract_bytes(self, size: int) -> Any: ...
    def readline(self) -> Any: ...
    def readlines(self) -> Any: ...
    getIstream = get_istream
    getBool = get_bool
    getInt8 = get_int8
    getUint8 = get_uint8
    getInt16 = get_int16
    getInt32 = get_int32
    getInt64 = get_int64
    getUint16 = get_uint16
    getUint32 = get_uint32
    getUint64 = get_uint64
    getFloat32 = get_float32
    getFloat64 = get_float64
    getBeInt16 = get_be_int16
    getBeInt32 = get_be_int32
    getBeInt64 = get_be_int64
    getBeUint16 = get_be_uint16
    getBeUint32 = get_be_uint32
    getBeUint64 = get_be_uint64
    getBeFloat32 = get_be_float32
    getBeFloat64 = get_be_float64
    getString = get_string
    getString32 = get_string32
    getZString = get_z_string
    getFixedString = get_fixed_string
    skipBytes = skip_bytes
    extractBytes = extract_bytes

class StreamWriter:
    DtoolClassDict: ClassVar[dict[str, Any]]
    softspace: int
    @property
    def ostream(self) -> ostream: ...
    @overload
    def __init__(self, copy: StreamWriter) -> None: ...
    @overload
    def __init__(self, out: ostream, owns_stream: bool) -> None: ...
    def assign(self, copy: StreamWriter) -> StreamWriter: ...
    def get_ostream(self) -> ostream: ...
    def add_bool(self, value: bool) -> None: ...
    def add_int8(self, value: str) -> None: ...
    def add_uint8(self, value: str) -> None: ...
    def add_int16(self, value: int) -> None: ...
    def add_int32(self, value: int) -> None: ...
    def add_int64(self, value: int) -> None: ...
    def add_uint16(self, value: int) -> None: ...
    def add_uint32(self, value: int) -> None: ...
    def add_uint64(self, value: int) -> None: ...
    def add_float32(self, value: float) -> None: ...
    def add_float64(self, value: float) -> None: ...
    def add_be_int16(self, value: int) -> None: ...
    def add_be_int32(self, value: int) -> None: ...
    def add_be_int64(self, value: int) -> None: ...
    def add_be_uint16(self, value: int) -> None: ...
    def add_be_uint32(self, value: int) -> None: ...
    def add_be_uint64(self, value: int) -> None: ...
    def add_be_float32(self, value: float) -> None: ...
    def add_be_float64(self, value: float) -> None: ...
    def add_string(self, str: str) -> None: ...
    def add_string32(self, str: str) -> None: ...
    def add_z_string(self, str: str) -> None: ...
    def add_fixed_string(self, str: str, size: int) -> None: ...
    def pad_bytes(self, size: int) -> None: ...
    def append_data(self, data: Any) -> None: ...
    def flush(self) -> None: ...
    def write(self, str: str) -> None: ...
    getOstream = get_ostream
    addBool = add_bool
    addInt8 = add_int8
    addUint8 = add_uint8
    addInt16 = add_int16
    addInt32 = add_int32
    addInt64 = add_int64
    addUint16 = add_uint16
    addUint32 = add_uint32
    addUint64 = add_uint64
    addFloat32 = add_float32
    addFloat64 = add_float64
    addBeInt16 = add_be_int16
    addBeInt32 = add_be_int32
    addBeInt64 = add_be_int64
    addBeUint16 = add_be_uint16
    addBeUint32 = add_be_uint32
    addBeUint64 = add_be_uint64
    addBeFloat32 = add_be_float32
    addBeFloat64 = add_be_float64
    addString = add_string
    addString32 = add_string32
    addZString = add_z_string
    addFixedString = add_fixed_string
    padBytes = pad_bytes
    appendData = append_data

class StreamWrapperBase:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def acquire(self) -> None: ...
    def release(self) -> None: ...

class IStreamWrapper(StreamWrapperBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def istream(self) -> istream: ...
    def __init__(self, stream: istream) -> None: ...
    def upcast_to_StreamWrapperBase(self) -> StreamWrapperBase: ...
    def get_istream(self) -> istream: ...
    upcastToStreamWrapperBase = upcast_to_StreamWrapperBase
    getIstream = get_istream

class OStreamWrapper(StreamWrapperBase):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def ostream(self) -> ostream: ...
    def __init__(self, stream: ostream) -> None: ...
    def upcast_to_StreamWrapperBase(self) -> StreamWrapperBase: ...
    def get_ostream(self) -> ostream: ...
    upcastToStreamWrapperBase = upcast_to_StreamWrapperBase
    getOstream = get_ostream

class StreamWrapper(IStreamWrapper, OStreamWrapper):
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def iostream(self) -> iostream: ...
    def __init__(self, stream: iostream) -> None: ...
    def upcast_to_IStreamWrapper(self) -> IStreamWrapper: ...
    def upcast_to_OStreamWrapper(self) -> OStreamWrapper: ...
    def get_iostream(self) -> iostream: ...
    upcastToIStreamWrapper = upcast_to_IStreamWrapper
    upcastToOStreamWrapper = upcast_to_OStreamWrapper
    getIostream = get_iostream

NS_unspecified: Literal[0]
NS_spam: Literal[1]
NS_debug: Literal[2]
NS_info: Literal[3]
NS_warning: Literal[4]
NS_error: Literal[5]
NS_fatal: Literal[6]
NSUnspecified = NS_unspecified
NSSpam = NS_spam
NSDebug = NS_debug
NSInfo = NS_info
NSWarning = NS_warning
NSError = NS_error
NSFatal = NS_fatal
