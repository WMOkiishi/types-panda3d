from typing import Any, ClassVar, Literal, TypeAlias, overload
from panda3d.core import LMatrix3f, LPoint3f, LVecBase3f, NodePath, ostream

_Vec3f: TypeAlias = LVecBase3f | LMatrix3f.Row | LMatrix3f.CRow
_SmoothMover_SmoothMode: TypeAlias = Literal[0, 1]
_SmoothMover_PredictionMode: TypeAlias = Literal[0, 1]

class SmoothMover:
    """This class handles smoothing of sampled motion points over time, e.g.  for
    smoothing the apparent movement of remote avatars, whose positions are sent
    via occasional telemetry updates.
    
    It can operate in any of three modes: off, in which it does not smooth any
    motion but provides the last position it was told; smoothing only, in which
    it smooths motion information but never tries to anticipate where the
    avatar might be going; or full prediction, in which it smooths motion as
    well as tries to predict the avatar's position in lead of the last position
    update.  The assumption is that all SmoothMovers in the world will be
    operating in the same mode together.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    SM_off: ClassVar[Literal[0]]
    SM_on: ClassVar[Literal[1]]
    PM_off: ClassVar[Literal[0]]
    PM_on: ClassVar[Literal[1]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: SmoothMover) -> None: ...
    @overload
    def set_pos(self, pos: _Vec3f) -> bool: ...
    @overload
    def set_pos(self, x: float, y: float, z: float) -> bool: ...
    def set_x(self, x: float) -> bool: ...
    def set_y(self, y: float) -> bool: ...
    def set_z(self, z: float) -> bool: ...
    @overload
    def set_hpr(self, hpr: _Vec3f) -> bool: ...
    @overload
    def set_hpr(self, h: float, p: float, r: float) -> bool: ...
    def set_h(self, h: float) -> bool: ...
    def set_p(self, p: float) -> bool: ...
    def set_r(self, r: float) -> bool: ...
    @overload
    def set_pos_hpr(self, pos: _Vec3f, hpr: _Vec3f) -> bool: ...
    @overload
    def set_pos_hpr(self, x: float, y: float, z: float, h: float, p: float, r: float) -> bool: ...
    def get_sample_pos(self) -> LPoint3f: ...
    def get_sample_hpr(self) -> LVecBase3f: ...
    def set_phony_timestamp(self, timestamp: float = ..., period_adjust: bool = ...) -> None: ...
    def set_timestamp(self, timestamp: float) -> None: ...
    def has_most_recent_timestamp(self) -> bool: ...
    def get_most_recent_timestamp(self) -> float: ...
    def mark_position(self) -> None: ...
    def clear_positions(self, reset_velocity: bool) -> None: ...
    @overload
    def compute_smooth_position(self) -> bool: ...
    @overload
    def compute_smooth_position(self, timestamp: float) -> bool: ...
    def get_latest_position(self) -> bool: ...
    def get_smooth_pos(self) -> LPoint3f: ...
    def get_smooth_hpr(self) -> LVecBase3f: ...
    def apply_smooth_pos(self, node: NodePath) -> None: ...
    def apply_smooth_pos_hpr(self, pos_node: NodePath, hpr_node: NodePath) -> None: ...
    def apply_smooth_hpr(self, node: NodePath) -> None: ...
    def compute_and_apply_smooth_pos(self, node: NodePath) -> None: ...
    def compute_and_apply_smooth_pos_hpr(self, pos_node: NodePath, hpr_node: NodePath) -> None: ...
    def compute_and_apply_smooth_hpr(self, hpr_node: NodePath) -> None: ...
    def get_smooth_forward_velocity(self) -> float: ...
    def get_smooth_lateral_velocity(self) -> float: ...
    def get_smooth_rotational_velocity(self) -> float: ...
    def get_forward_axis(self) -> LVecBase3f: ...
    def handle_wrt_reparent(self, old_parent: NodePath, new_parent: NodePath) -> None: ...
    def set_smooth_mode(self, mode: _SmoothMover_SmoothMode) -> None: ...
    def get_smooth_mode(self) -> _SmoothMover_SmoothMode: ...
    def set_prediction_mode(self, mode: _SmoothMover_PredictionMode) -> None: ...
    def get_prediction_mode(self) -> _SmoothMover_PredictionMode: ...
    def set_delay(self, delay: float) -> None: ...
    def get_delay(self) -> float: ...
    def set_accept_clock_skew(self, flag: bool) -> None: ...
    def get_accept_clock_skew(self) -> bool: ...
    def set_max_position_age(self, age: float) -> None: ...
    def get_max_position_age(self) -> float: ...
    def set_expected_broadcast_period(self, period: float) -> None: ...
    def get_expected_broadcast_period(self) -> float: ...
    def set_reset_velocity_age(self, age: float) -> None: ...
    def get_reset_velocity_age(self) -> float: ...
    def set_directional_velocity(self, flag: bool) -> None: ...
    def get_directional_velocity(self) -> bool: ...
    def set_default_to_standing_still(self, flag: bool) -> None: ...
    def get_default_to_standing_still(self) -> bool: ...
    def output(self, out: ostream) -> None: ...
    def write(self, out: ostream) -> None: ...
    setPos = set_pos
    setX = set_x
    setY = set_y
    setZ = set_z
    setHpr = set_hpr
    setH = set_h
    setP = set_p
    setR = set_r
    setPosHpr = set_pos_hpr
    getSamplePos = get_sample_pos
    getSampleHpr = get_sample_hpr
    setPhonyTimestamp = set_phony_timestamp
    setTimestamp = set_timestamp
    hasMostRecentTimestamp = has_most_recent_timestamp
    getMostRecentTimestamp = get_most_recent_timestamp
    markPosition = mark_position
    clearPositions = clear_positions
    computeSmoothPosition = compute_smooth_position
    getLatestPosition = get_latest_position
    getSmoothPos = get_smooth_pos
    getSmoothHpr = get_smooth_hpr
    applySmoothPos = apply_smooth_pos
    applySmoothPosHpr = apply_smooth_pos_hpr
    applySmoothHpr = apply_smooth_hpr
    computeAndApplySmoothPos = compute_and_apply_smooth_pos
    computeAndApplySmoothPosHpr = compute_and_apply_smooth_pos_hpr
    computeAndApplySmoothHpr = compute_and_apply_smooth_hpr
    getSmoothForwardVelocity = get_smooth_forward_velocity
    getSmoothLateralVelocity = get_smooth_lateral_velocity
    getSmoothRotationalVelocity = get_smooth_rotational_velocity
    getForwardAxis = get_forward_axis
    handleWrtReparent = handle_wrt_reparent
    setSmoothMode = set_smooth_mode
    getSmoothMode = get_smooth_mode
    setPredictionMode = set_prediction_mode
    getPredictionMode = get_prediction_mode
    setDelay = set_delay
    getDelay = get_delay
    setAcceptClockSkew = set_accept_clock_skew
    getAcceptClockSkew = get_accept_clock_skew
    setMaxPositionAge = set_max_position_age
    getMaxPositionAge = get_max_position_age
    setExpectedBroadcastPeriod = set_expected_broadcast_period
    getExpectedBroadcastPeriod = get_expected_broadcast_period
    setResetVelocityAge = set_reset_velocity_age
    getResetVelocityAge = get_reset_velocity_age
    setDirectionalVelocity = set_directional_velocity
    getDirectionalVelocity = get_directional_velocity
    setDefaultToStandingStill = set_default_to_standing_still
    getDefaultToStandingStill = get_default_to_standing_still
    SMOff = SM_off
    SMOn = SM_on
    PMOff = PM_off
    PMOn = PM_on
