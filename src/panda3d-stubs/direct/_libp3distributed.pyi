from typing import Any, ClassVar, overload
from panda3d.core import (
    Buffered_DatagramConnection,
    ConnectionWriter,
    Datagram,
    DatagramIterator,
    HTTPChannel,
    NodePath,
    QueuedConnectionManager,
    QueuedConnectionReader,
    SocketStream,
    URLSpec,
)
from panda3d.direct import DCClass, DCFile

class CConnectionRepository:
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, has_owner_view: bool = ..., threaded_net: bool = ...) -> None: ...
    def get_dc_file(self) -> DCFile: ...
    def has_owner_view(self) -> bool: ...
    def set_handle_c_updates(self, handle_c_updates: bool) -> None: ...
    def get_handle_c_updates(self) -> bool: ...
    def set_client_datagram(self, client_datagram: bool) -> None: ...
    def get_client_datagram(self) -> bool: ...
    def set_handle_datagrams_internally(self, handle_datagrams_internally: bool) -> None: ...
    def get_handle_datagrams_internally(self) -> bool: ...
    def set_tcp_header_size(self, tcp_header_size: int) -> None: ...
    def get_tcp_header_size(self) -> int: ...
    def set_python_repository(self, python_repository: Any) -> None: ...
    def set_connection_http(self, channel: HTTPChannel) -> None: ...
    def get_stream(self) -> SocketStream: ...
    def try_connect_net(self, url: URLSpec) -> bool: ...
    def get_qcm(self) -> QueuedConnectionManager: ...
    def get_cw(self) -> ConnectionWriter: ...
    def get_qcr(self) -> QueuedConnectionReader: ...
    def connect_native(self, url: URLSpec) -> bool: ...
    def get_bdc(self) -> Buffered_DatagramConnection: ...
    def check_datagram(self) -> bool: ...
    def get_datagram(self, dg: Datagram) -> None: ...
    def get_datagram_iterator(self, di: DatagramIterator) -> None: ...
    def get_msg_channel(self, offset: int = ...) -> int: ...
    def get_msg_channel_count(self) -> int: ...
    def get_msg_sender(self) -> int: ...
    def get_msg_type(self) -> int: ...
    @staticmethod
    def get_overflow_event_name() -> str: ...
    def is_connected(self) -> bool: ...
    def send_datagram(self, dg: Datagram) -> bool: ...
    def set_want_message_bundling(self, flag: bool) -> None: ...
    def get_want_message_bundling(self) -> bool: ...
    def set_in_quiet_zone(self, flag: bool) -> None: ...
    def get_in_quiet_zone(self) -> bool: ...
    def start_message_bundle(self) -> None: ...
    def is_bundling_messages(self) -> bool: ...
    def send_message_bundle(self, channel: int, sender_channel: int) -> None: ...
    def abandon_message_bundles(self) -> None: ...
    def bundle_msg(self, dg: Datagram) -> None: ...
    def consider_flush(self) -> bool: ...
    def flush(self) -> bool: ...
    def disconnect(self) -> None: ...
    def shutdown(self) -> None: ...
    def set_simulated_disconnect(self, simulated_disconnect: bool) -> None: ...
    def get_simulated_disconnect(self) -> bool: ...
    def toggle_verbose(self) -> None: ...
    def set_verbose(self, verbose: bool) -> None: ...
    def get_verbose(self) -> bool: ...
    def set_time_warning(self, time_warning: float) -> None: ...
    def get_time_warning(self) -> float: ...
    getDcFile = get_dc_file
    hasOwnerView = has_owner_view
    setHandleCUpdates = set_handle_c_updates
    getHandleCUpdates = get_handle_c_updates
    setClientDatagram = set_client_datagram
    getClientDatagram = get_client_datagram
    setHandleDatagramsInternally = set_handle_datagrams_internally
    getHandleDatagramsInternally = get_handle_datagrams_internally
    setTcpHeaderSize = set_tcp_header_size
    getTcpHeaderSize = get_tcp_header_size
    setPythonRepository = set_python_repository
    setConnectionHttp = set_connection_http
    getStream = get_stream
    tryConnectNet = try_connect_net
    getQcm = get_qcm
    getCw = get_cw
    getQcr = get_qcr
    connectNative = connect_native
    getBdc = get_bdc
    checkDatagram = check_datagram
    getDatagram = get_datagram
    getDatagramIterator = get_datagram_iterator
    getMsgChannel = get_msg_channel
    getMsgChannelCount = get_msg_channel_count
    getMsgSender = get_msg_sender
    getMsgType = get_msg_type
    getOverflowEventName = get_overflow_event_name
    isConnected = is_connected
    sendDatagram = send_datagram
    setWantMessageBundling = set_want_message_bundling
    getWantMessageBundling = get_want_message_bundling
    setInQuietZone = set_in_quiet_zone
    getInQuietZone = get_in_quiet_zone
    startMessageBundle = start_message_bundle
    isBundlingMessages = is_bundling_messages
    sendMessageBundle = send_message_bundle
    abandonMessageBundles = abandon_message_bundles
    bundleMsg = bundle_msg
    considerFlush = consider_flush
    setSimulatedDisconnect = set_simulated_disconnect
    getSimulatedDisconnect = get_simulated_disconnect
    toggleVerbose = toggle_verbose
    setVerbose = set_verbose
    getVerbose = get_verbose
    setTimeWarning = set_time_warning
    getTimeWarning = get_time_warning

class CDistributedSmoothNodeBase:
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, __param0: CDistributedSmoothNodeBase) -> None: ...
    def set_repository(self, repository: CConnectionRepository, is_ai: bool, ai_id: int) -> None: ...
    def set_clock_delta(self, clock_delta: Any) -> None: ...
    def initialize(self, node_path: NodePath, dclass: DCClass, do_id: int) -> None: ...
    def send_everything(self) -> None: ...
    def broadcast_pos_hpr_full(self) -> None: ...
    def broadcast_pos_hpr_xyh(self) -> None: ...
    def broadcast_pos_hpr_xy(self) -> None: ...
    def set_curr_l(self, l: int) -> None: ...
    def print_curr_l(self) -> None: ...
    setRepository = set_repository
    setClockDelta = set_clock_delta
    sendEverything = send_everything
    broadcastPosHprFull = broadcast_pos_hpr_full
    broadcastPosHprXyh = broadcast_pos_hpr_xyh
    broadcastPosHprXy = broadcast_pos_hpr_xy
    setCurrL = set_curr_l
    printCurrL = print_curr_l
