from collections.abc import Sequence
from os import PathLike
from typing import Any, ClassVar, Literal, TypeAlias, overload
from panda3d.core import (
    BamCacheRecord,
    BitMask_uint32_t_32,
    ConfigVariableColor,
    ConfigVariableFilename,
    ConfigVariableSearchPath,
    DSearchPath,
    Filename,
    GlobPattern,
    LMatrix3d,
    LMatrix4d,
    LMatrix4f,
    LPoint2d,
    LPoint3d,
    LPoint4d,
    LVecBase2d,
    LVecBase3d,
    LVecBase4d,
    LVecBase4f,
    LVector3d,
    Namable,
    TypeHandle,
    TypedReferenceCount,
    UnalignedLMatrix4d,
    UnalignedLVecBase4d,
    UnalignedLVecBase4f,
    istream,
    ostream,
)

_Mat4d: TypeAlias = LMatrix4d | UnalignedLMatrix4d
_Filename: TypeAlias = Filename | ConfigVariableFilename | str | bytes | PathLike
_CoordinateSystem: TypeAlias = Literal[0, 1, 2, 3, 4, 5]
_Vec3d: TypeAlias = LVecBase3d | LMatrix3d.Row | LMatrix3d.CRow
_Vec4f: TypeAlias = LVecBase4f | UnalignedLVecBase4f | LMatrix4f.Row | LMatrix4f.CRow | ConfigVariableColor
_Vec4d: TypeAlias = LVecBase4d | UnalignedLVecBase4d | LMatrix4d.Row | LMatrix4d.CRow
_EggRenderMode_AlphaMode: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
_EggRenderMode_DepthWriteMode: TypeAlias = Literal[0, 1, 2]
_EggRenderMode_DepthTestMode: TypeAlias = Literal[0, 1, 2]
_EggRenderMode_VisibilityMode: TypeAlias = Literal[0, 1, 2]
_EggTransform_ComponentType: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
_EggGroup_GroupType: TypeAlias = Literal[-1, 0, 1, 2]
_EggGroup_BillboardType: TypeAlias = Literal[0, 32, 64, 128]
_EggGroup_CollisionSolidType: TypeAlias = Literal[0, 65536, 131072, 196608, 262144, 327680, 393216, 458752, 524288]
_EggGroup_CollideFlags: TypeAlias = Literal[0, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728]
_EggGroup_DCSType: TypeAlias = Literal[0, 16, 32, 48, 64, 80]
_EggGroup_DartType: TypeAlias = Literal[0, 268435456, 536870912, 805306368, 1073741824]
_EggGroup_BlendMode: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6]
_EggGroup_BlendOperand: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
_EggTexture_TextureType: TypeAlias = Literal[0, 1, 2, 3, 4]
_EggTexture_Format: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
_EggTexture_CompressionMode: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8]
_EggTexture_WrapMode: TypeAlias = Literal[0, 1, 2, 3, 4, 5]
_EggTexture_FilterType: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6]
_EggTexture_EnvType: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
_EggTexture_TexGen: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8]
_EggTexture_QualityLevel: TypeAlias = Literal[0, 1, 2, 3, 4]
_EggTexture_CombineChannel: TypeAlias = Literal[0, 1, 2]
_EggTexture_CombineMode: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6, 7, 8]
_EggTexture_CombineSource: TypeAlias = Literal[0, 1, 2, 3, 4, 5, 6]
_EggTexture_CombineOperand: TypeAlias = Literal[0, 1, 2, 3, 4]
_EggPrimitive_Shading: TypeAlias = Literal[0, 1, 2, 3]
_EggCurve_CurveType: TypeAlias = Literal[0, 1, 2, 3]
_EggTable_TableType: TypeAlias = Literal[0, 1, 2]

class EggUserData(TypedReferenceCount):
    """This is a base class for a user-defined data type to extend egg structures
    in processing code.  The user of the egg library may derive from
    EggUserData to associate any arbitrary data with various egg objects.
    
    However, this data will not be written out to the disk when the egg file is
    written; it is an in-memory object only.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: EggUserData) -> None: ...
    def assign(self, copy: EggUserData) -> EggUserData: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class EggObject(TypedReferenceCount):
    """The highest-level base class in the egg directory.  (Almost) all things egg
    inherit from this.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: EggObject) -> None: ...
    def assign(self, copy: EggObject) -> EggObject: ...
    def set_user_data(self, user_data: EggUserData) -> None: ...
    @overload
    def get_user_data(self) -> EggUserData: ...
    @overload
    def get_user_data(self, type: TypeHandle) -> EggUserData: ...
    @overload
    def has_user_data(self) -> bool: ...
    @overload
    def has_user_data(self, type: TypeHandle) -> bool: ...
    @overload
    def clear_user_data(self) -> None: ...
    @overload
    def clear_user_data(self, type: TypeHandle) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setUserData = set_user_data
    getUserData = get_user_data
    hasUserData = has_user_data
    clearUserData = clear_user_data
    getClassType = get_class_type

class EggNamedObject(EggObject, Namable):
    """This is a fairly low-level base class--any egg object that has a name."""
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggNamedObject) -> None: ...
    def upcast_to_EggObject(self) -> EggObject: ...
    def upcast_to_Namable(self) -> Namable: ...
    def assign(self, copy: EggNamedObject) -> EggNamedObject: ...
    def output(self, out: ostream) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToEggObject = upcast_to_EggObject
    upcastToNamable = upcast_to_Namable
    getClassType = get_class_type

class EggNode(EggNamedObject):
    """A base class for things that may be directly added into the egg hierarchy.
    This includes groups, joints, polygons, vertex pools, etc., but does not
    include things like vertices.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @property
    def parent(self) -> EggGroupNode: ...
    @property
    def depth(self) -> int: ...
    def assign(self, copy: EggNode) -> EggNode: ...
    def get_parent(self) -> EggGroupNode: ...
    def get_depth(self) -> int: ...
    def is_under_instance(self) -> bool: ...
    def is_under_transform(self) -> bool: ...
    def is_local_coord(self) -> bool: ...
    def get_vertex_frame(self) -> LMatrix4d: ...
    def get_node_frame(self) -> LMatrix4d: ...
    def get_vertex_frame_inv(self) -> LMatrix4d: ...
    def get_node_frame_inv(self) -> LMatrix4d: ...
    def get_vertex_to_node(self) -> LMatrix4d: ...
    def get_node_to_vertex(self) -> LMatrix4d: ...
    def get_vertex_frame_ptr(self) -> LMatrix4d: ...
    def get_node_frame_ptr(self) -> LMatrix4d: ...
    def get_vertex_frame_inv_ptr(self) -> LMatrix4d: ...
    def get_node_frame_inv_ptr(self) -> LMatrix4d: ...
    def get_vertex_to_node_ptr(self) -> LMatrix4d: ...
    def get_node_to_vertex_ptr(self) -> LMatrix4d: ...
    def transform(self, mat: _Mat4d) -> None: ...
    def transform_vertices_only(self, mat: _Mat4d) -> None: ...
    def flatten_transforms(self) -> None: ...
    def apply_texmats(self) -> None: ...
    def is_joint(self) -> bool: ...
    def is_anim_matrix(self) -> bool: ...
    def determine_alpha_mode(self) -> EggRenderMode: ...
    def determine_depth_write_mode(self) -> EggRenderMode: ...
    def determine_depth_test_mode(self) -> EggRenderMode: ...
    def determine_visibility_mode(self) -> EggRenderMode: ...
    def determine_depth_offset(self) -> EggRenderMode: ...
    def determine_draw_order(self) -> EggRenderMode: ...
    def determine_bin(self) -> EggRenderMode: ...
    def determine_indexed(self) -> bool: ...
    def determine_decal(self) -> bool: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def parse_egg(self, egg_syntax: str) -> bool: ...
    def test_under_integrity(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getParent = get_parent
    getDepth = get_depth
    isUnderInstance = is_under_instance
    isUnderTransform = is_under_transform
    isLocalCoord = is_local_coord
    getVertexFrame = get_vertex_frame
    getNodeFrame = get_node_frame
    getVertexFrameInv = get_vertex_frame_inv
    getNodeFrameInv = get_node_frame_inv
    getVertexToNode = get_vertex_to_node
    getNodeToVertex = get_node_to_vertex
    getVertexFramePtr = get_vertex_frame_ptr
    getNodeFramePtr = get_node_frame_ptr
    getVertexFrameInvPtr = get_vertex_frame_inv_ptr
    getNodeFrameInvPtr = get_node_frame_inv_ptr
    getVertexToNodePtr = get_vertex_to_node_ptr
    getNodeToVertexPtr = get_node_to_vertex_ptr
    transformVerticesOnly = transform_vertices_only
    flattenTransforms = flatten_transforms
    applyTexmats = apply_texmats
    isJoint = is_joint
    isAnimMatrix = is_anim_matrix
    determineAlphaMode = determine_alpha_mode
    determineDepthWriteMode = determine_depth_write_mode
    determineDepthTestMode = determine_depth_test_mode
    determineVisibilityMode = determine_visibility_mode
    determineDepthOffset = determine_depth_offset
    determineDrawOrder = determine_draw_order
    determineBin = determine_bin
    determineIndexed = determine_indexed
    determineDecal = determine_decal
    parseEgg = parse_egg
    testUnderIntegrity = test_under_integrity
    getClassType = get_class_type

class EggGroupNode(EggNode):
    """A base class for nodes in the hierarchy that are not leaf nodes.  (See also
    EggGroup, which is specifically the "<Group>" node in egg.)
    
    An EggGroupNode is an STL-style container of pointers to EggNodes, like a
    vector.  Functions push_back()/pop_back() and insert()/erase() are provided
    to manipulate the list.  The list may also be operated on (read-only) via
    iterators and begin()/end().
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    T_polygon: ClassVar[Literal[1]]
    T_convex: ClassVar[Literal[2]]
    T_composite: ClassVar[Literal[4]]
    T_recurse: ClassVar[Literal[8]]
    T_flat_shaded: ClassVar[Literal[16]]
    @property
    def children(self) -> Any: ...
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggGroupNode) -> None: ...
    def assign(self, copy: EggGroupNode) -> EggGroupNode: ...
    def empty(self) -> bool: ...
    def size(self) -> int: ...
    def clear(self) -> None: ...
    def get_first_child(self) -> EggNode: ...
    def get_next_child(self) -> EggNode: ...
    def get_children(self) -> Any: ...
    def add_child(self, node: EggNode) -> EggNode: ...
    def remove_child(self, node: EggNode) -> EggNode: ...
    def steal_children(self, other: EggGroupNode) -> None: ...
    def find_child(self, name: str) -> EggNode: ...
    def has_absolute_pathnames(self) -> bool: ...
    def resolve_filenames(self, searchpath: ConfigVariableSearchPath | DSearchPath) -> None: ...
    def force_filenames(self, directory: _Filename) -> None: ...
    def reverse_vertex_ordering(self) -> None: ...
    def recompute_vertex_normals(self, threshold: float, cs: _CoordinateSystem = ...) -> None: ...
    def recompute_polygon_normals(self, cs: _CoordinateSystem = ...) -> None: ...
    def strip_normals(self) -> None: ...
    def recompute_tangent_binormal(self, uv_name: GlobPattern) -> bool: ...
    def recompute_tangent_binormal_auto(self) -> bool: ...
    def triangulate_polygons(self, flags: int) -> int: ...
    def mesh_triangles(self, flags: int) -> None: ...
    def make_point_primitives(self) -> None: ...
    def remove_unused_vertices(self, recurse: bool) -> int: ...
    def remove_invalid_primitives(self, recurse: bool) -> int: ...
    def clear_connected_shading(self) -> None: ...
    def get_connected_shading(self) -> None: ...
    def unify_attributes(self, use_connected_shading: bool, allow_per_primitive: bool, recurse: bool) -> None: ...
    def apply_last_attribute(self, recurse: bool) -> None: ...
    def apply_first_attribute(self, recurse: bool) -> None: ...
    def post_apply_flat_attribute(self, recurse: bool) -> None: ...
    def has_primitives(self) -> bool: ...
    def joint_has_primitives(self) -> bool: ...
    def has_normals(self) -> bool: ...
    @staticmethod
    def is_right(v1: LVecBase2d, v2: LVecBase2d) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getFirstChild = get_first_child
    getNextChild = get_next_child
    getChildren = get_children
    addChild = add_child
    removeChild = remove_child
    stealChildren = steal_children
    findChild = find_child
    hasAbsolutePathnames = has_absolute_pathnames
    resolveFilenames = resolve_filenames
    forceFilenames = force_filenames
    reverseVertexOrdering = reverse_vertex_ordering
    recomputeVertexNormals = recompute_vertex_normals
    recomputePolygonNormals = recompute_polygon_normals
    stripNormals = strip_normals
    recomputeTangentBinormal = recompute_tangent_binormal
    recomputeTangentBinormalAuto = recompute_tangent_binormal_auto
    triangulatePolygons = triangulate_polygons
    meshTriangles = mesh_triangles
    makePointPrimitives = make_point_primitives
    removeUnusedVertices = remove_unused_vertices
    removeInvalidPrimitives = remove_invalid_primitives
    clearConnectedShading = clear_connected_shading
    getConnectedShading = get_connected_shading
    unifyAttributes = unify_attributes
    applyLastAttribute = apply_last_attribute
    applyFirstAttribute = apply_first_attribute
    postApplyFlatAttribute = post_apply_flat_attribute
    hasPrimitives = has_primitives
    jointHasPrimitives = joint_has_primitives
    hasNormals = has_normals
    isRight = is_right
    getClassType = get_class_type
    TPolygon = T_polygon
    TConvex = T_convex
    TComposite = T_composite
    TRecurse = T_recurse
    TFlatShaded = T_flat_shaded

class EggAnimData(EggNode):
    """A base class for EggSAnimData and EggXfmAnimData, which contain rows and
    columns of numbers.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    def assign(self, copy: EggAnimData) -> EggAnimData: ...
    def set_fps(self, type: float) -> None: ...
    def clear_fps(self) -> None: ...
    def has_fps(self) -> bool: ...
    def get_fps(self) -> float: ...
    def clear_data(self) -> None: ...
    def add_data(self, value: float) -> None: ...
    def get_size(self) -> int: ...
    def quantize(self, quantum: float) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setFps = set_fps
    clearFps = clear_fps
    hasFps = has_fps
    getFps = get_fps
    clearData = clear_data
    addData = add_data
    getSize = get_size
    getClassType = get_class_type

class EggAnimPreload(EggNode):
    """This corresponds to an <AnimPreload> entry."""
    DtoolClassDict: ClassVar[dict[str, Any]]
    fps: float
    num_frames: int
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggAnimPreload) -> None: ...
    def assign(self, copy: EggAnimPreload) -> EggAnimPreload: ...
    def set_fps(self, fps: float) -> None: ...
    def clear_fps(self) -> None: ...
    def has_fps(self) -> bool: ...
    def get_fps(self) -> float: ...
    def set_num_frames(self, num_frames: int) -> None: ...
    def clear_num_frames(self) -> None: ...
    def has_num_frames(self) -> bool: ...
    def get_num_frames(self) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setFps = set_fps
    clearFps = clear_fps
    hasFps = has_fps
    getFps = get_fps
    setNumFrames = set_num_frames
    clearNumFrames = clear_num_frames
    hasNumFrames = has_num_frames
    getNumFrames = get_num_frames
    getClassType = get_class_type

class EggAttributes:
    """The set of attributes that may be applied to vertices as well as polygons,
    such as surface normal and color.
    
    This class cannot inherit from EggObject, because it causes problems at the
    EggPolygon level with multiple appearances of the EggObject base class.
    And making EggObject a virtual base class is just no fun.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: EggAttributes) -> None: ...
    def assign(self, copy: EggAttributes) -> EggAttributes: ...
    def has_normal(self) -> bool: ...
    def get_normal(self) -> LVector3d: ...
    def set_normal(self, normal: _Vec3d) -> None: ...
    def clear_normal(self) -> None: ...
    def matches_normal(self, other: EggAttributes) -> bool: ...
    def copy_normal(self, other: EggAttributes) -> None: ...
    def has_color(self) -> bool: ...
    def get_color(self) -> LVecBase4f: ...
    def set_color(self, Color: _Vec4f) -> None: ...
    def clear_color(self) -> None: ...
    def matches_color(self, other: EggAttributes) -> bool: ...
    def copy_color(self, other: EggAttributes) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def sorts_less_than(self, other: EggAttributes) -> bool: ...
    def compare_to(self, other: EggAttributes) -> int: ...
    def transform(self, mat: _Mat4d) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    hasNormal = has_normal
    getNormal = get_normal
    setNormal = set_normal
    clearNormal = clear_normal
    matchesNormal = matches_normal
    copyNormal = copy_normal
    hasColor = has_color
    getColor = get_color
    setColor = set_color
    clearColor = clear_color
    matchesColor = matches_color
    copyColor = copy_color
    sortsLessThan = sorts_less_than
    compareTo = compare_to
    getClassType = get_class_type

class EggVertexUV(EggNamedObject):
    """The set of UV's that may or may not be assigned to a vertex.  To support
    multitexturing, there may be multiple sets of UV's on a particular vertex,
    each with its own name.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, copy: EggVertexUV) -> None: ...
    @overload
    def __init__(self, name: str, uvw: _Vec3d) -> None: ...
    @overload
    def __init__(self, name: str, uv: LVecBase2d) -> None: ...
    def assign(self, copy: EggVertexUV) -> EggVertexUV: ...
    @staticmethod
    def filter_name(name: str) -> str: ...
    def set_name(self, name: str) -> None: ...
    def get_num_dimensions(self) -> int: ...
    def has_w(self) -> bool: ...
    def get_uv(self) -> LPoint2d: ...
    def get_uvw(self) -> LPoint3d: ...
    def set_uv(self, texCoord: LVecBase2d) -> None: ...
    def set_uvw(self, texCoord: _Vec3d) -> None: ...
    def has_tangent(self) -> bool: ...
    def has_tangent4(self) -> bool: ...
    def get_tangent(self) -> LVector3d: ...
    def get_tangent4(self) -> LVecBase4d: ...
    def set_tangent(self, tangent: _Vec3d) -> None: ...
    def set_tangent4(self, tangent: _Vec4d) -> None: ...
    def clear_tangent(self) -> None: ...
    def has_binormal(self) -> bool: ...
    def get_binormal(self) -> LVector3d: ...
    def set_binormal(self, binormal: _Vec3d) -> None: ...
    def clear_binormal(self) -> None: ...
    @staticmethod
    def make_average(first: EggVertexUV, second: EggVertexUV) -> EggVertexUV: ...
    def transform(self, mat: _Mat4d) -> None: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def compare_to(self, other: EggVertexUV) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    filterName = filter_name
    setName = set_name
    getNumDimensions = get_num_dimensions
    hasW = has_w
    getUv = get_uv
    getUvw = get_uvw
    setUv = set_uv
    setUvw = set_uvw
    hasTangent = has_tangent
    hasTangent4 = has_tangent4
    getTangent = get_tangent
    getTangent4 = get_tangent4
    setTangent = set_tangent
    setTangent4 = set_tangent4
    clearTangent = clear_tangent
    hasBinormal = has_binormal
    getBinormal = get_binormal
    setBinormal = set_binormal
    clearBinormal = clear_binormal
    makeAverage = make_average
    compareTo = compare_to
    getClassType = get_class_type

class EggVertexAux(EggNamedObject):
    """The set of named auxiliary data that may or may not be assigned to a
    vertex.  Panda will import this data and create a custom column for it in
    the vertex data, but will not otherwise interpret it.  Presumably, a shader
    will process the data later.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, copy: EggVertexAux) -> None: ...
    @overload
    def __init__(self, name: str, aux: _Vec4d) -> None: ...
    def assign(self, copy: EggVertexAux) -> EggVertexAux: ...
    def set_name(self, name: str) -> None: ...
    def get_aux(self) -> LVecBase4d: ...
    def set_aux(self, aux: _Vec4d) -> None: ...
    @staticmethod
    def make_average(first: EggVertexAux, second: EggVertexAux) -> EggVertexAux: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def compare_to(self, other: EggVertexAux) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setName = set_name
    getAux = get_aux
    setAux = set_aux
    makeAverage = make_average
    compareTo = compare_to
    getClassType = get_class_type

class EggVertex(EggObject, EggAttributes):
    """Any one-, two-, three-, or four-component vertex, possibly with attributes
    such as a normal.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: EggVertex) -> None: ...
    def upcast_to_EggObject(self) -> EggObject: ...
    def upcast_to_EggAttributes(self) -> EggAttributes: ...
    def assign(self, copy: EggVertex) -> EggVertex: ...
    def get_pool(self) -> EggVertexPool: ...
    def is_forward_reference(self) -> bool: ...
    def set_pos(self, pos: LVecBase2d | _Vec3d | _Vec4d | float) -> None: ...
    def set_pos4(self, pos: _Vec4d) -> None: ...
    def get_num_dimensions(self) -> int: ...
    def get_pos1(self) -> float: ...
    def get_pos2(self) -> LPoint2d: ...
    def get_pos3(self) -> LPoint3d: ...
    def get_pos4(self) -> LPoint4d: ...
    @overload
    def has_uv(self) -> bool: ...
    @overload
    def has_uv(self, name: str) -> bool: ...
    @overload
    def get_uv(self) -> LPoint2d: ...
    @overload
    def get_uv(self, name: str) -> LPoint2d: ...
    @overload
    def set_uv(self, texCoord: LVecBase2d) -> None: ...
    @overload
    def set_uv(self, name: str, texCoord: LVecBase2d) -> None: ...
    @overload
    def clear_uv(self) -> None: ...
    @overload
    def clear_uv(self, name: str) -> None: ...
    def has_uvw(self, name: str) -> bool: ...
    def get_uvw(self, name: str) -> LPoint3d: ...
    def set_uvw(self, name: str, texCoord: _Vec3d) -> None: ...
    def get_uv_obj(self, name: str) -> EggVertexUV: ...
    def modify_uv_obj(self, name: str) -> EggVertexUV: ...
    def set_uv_obj(self, vertex_uv: EggVertexUV) -> None: ...
    @overload
    def has_aux(self) -> bool: ...
    @overload
    def has_aux(self, name: str) -> bool: ...
    @overload
    def clear_aux(self) -> None: ...
    @overload
    def clear_aux(self, name: str) -> None: ...
    def get_aux(self, name: str) -> LVecBase4d: ...
    def set_aux(self, name: str, aux: _Vec4d) -> None: ...
    def get_aux_obj(self, name: str) -> EggVertexAux: ...
    def modify_aux_obj(self, name: str) -> EggVertexAux: ...
    def set_aux_obj(self, vertex_aux: EggVertexAux) -> None: ...
    @staticmethod
    def make_average(first: EggVertex, second: EggVertex) -> EggVertex: ...
    def get_index(self) -> int: ...
    def set_external_index(self, external_index: int) -> None: ...
    def get_external_index(self) -> int: ...
    def set_external_index2(self, external_index2: int) -> None: ...
    def get_external_index2(self) -> int: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def sorts_less_than(self, other: EggVertex) -> bool: ...
    def compare_to(self, other: EggVertex) -> int: ...
    def get_num_local_coord(self) -> int: ...
    def get_num_global_coord(self) -> int: ...
    def transform(self, mat: _Mat4d) -> None: ...
    def has_gref(self, group: EggGroup) -> bool: ...
    def copy_grefs_from(self, other: EggVertex) -> None: ...
    def clear_grefs(self) -> None: ...
    def has_pref(self, prim: EggPrimitive) -> int: ...
    def test_gref_integrity(self) -> None: ...
    def test_pref_integrity(self) -> None: ...
    def output(self, out: ostream) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToEggObject = upcast_to_EggObject
    upcastToEggAttributes = upcast_to_EggAttributes
    getPool = get_pool
    isForwardReference = is_forward_reference
    setPos = set_pos
    setPos4 = set_pos4
    getNumDimensions = get_num_dimensions
    getPos1 = get_pos1
    getPos2 = get_pos2
    getPos3 = get_pos3
    getPos4 = get_pos4
    hasUv = has_uv
    getUv = get_uv
    setUv = set_uv
    clearUv = clear_uv
    hasUvw = has_uvw
    getUvw = get_uvw
    setUvw = set_uvw
    getUvObj = get_uv_obj
    modifyUvObj = modify_uv_obj
    setUvObj = set_uv_obj
    hasAux = has_aux
    clearAux = clear_aux
    getAux = get_aux
    setAux = set_aux
    getAuxObj = get_aux_obj
    modifyAuxObj = modify_aux_obj
    setAuxObj = set_aux_obj
    makeAverage = make_average
    getIndex = get_index
    setExternalIndex = set_external_index
    getExternalIndex = get_external_index
    setExternalIndex2 = set_external_index2
    getExternalIndex2 = get_external_index2
    sortsLessThan = sorts_less_than
    compareTo = compare_to
    getNumLocalCoord = get_num_local_coord
    getNumGlobalCoord = get_num_global_coord
    hasGref = has_gref
    copyGrefsFrom = copy_grefs_from
    clearGrefs = clear_grefs
    hasPref = has_pref
    testGrefIntegrity = test_gref_integrity
    testPrefIntegrity = test_pref_integrity
    getClassType = get_class_type

class EggVertexPool(EggNode):
    """A collection of vertices.  There may be any number of vertex pools in a
    single egg structure.  The vertices in a single pool need not necessarily
    have any connection to each other, but it is necessary that any one
    primitive (e.g.  a polygon) must pull all its vertices from the same pool.
    
    An EggVertexPool is an STL-style container of pointers to EggVertex's.
    Functions add_vertex() and remove_vertex() are provided to manipulate the
    list.  The list may also be operated on (read-only) via iterators and
    begin()/end().
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, copy: EggVertexPool) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    def __getitem__(self, index: int) -> EggVertex: ...
    def __len__(self) -> int: ...
    def has_vertex(self, index: int) -> bool: ...
    def has_forward_vertices(self) -> bool: ...
    def has_defined_vertices(self) -> bool: ...
    def get_vertex(self, index: int) -> EggVertex: ...
    def get_forward_vertex(self, index: int) -> EggVertex: ...
    def get_highest_index(self) -> int: ...
    def set_highest_index(self, highest_index: int) -> None: ...
    def get_num_dimensions(self) -> int: ...
    def has_normals(self) -> bool: ...
    def has_colors(self) -> bool: ...
    def has_nonwhite_colors(self) -> bool: ...
    def has_uvs(self) -> bool: ...
    def has_aux(self) -> bool: ...
    def add_vertex(self, vertex: EggVertex, index: int = ...) -> EggVertex: ...
    @overload
    def make_new_vertex(self) -> EggVertex: ...
    @overload
    def make_new_vertex(self, pos: LVecBase2d | _Vec3d | _Vec4d | float) -> EggVertex: ...
    def create_unique_vertex(self, copy: EggVertex) -> EggVertex: ...
    def find_matching_vertex(self, copy: EggVertex) -> EggVertex: ...
    def remove_vertex(self, vertex: EggVertex) -> None: ...
    def remove_unused_vertices(self) -> int: ...
    def add_unused_vertices_to_prim(self, prim: EggPrimitive) -> None: ...
    def transform(self, mat: _Mat4d) -> None: ...
    def sort_by_external_index(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    hasVertex = has_vertex
    hasForwardVertices = has_forward_vertices
    hasDefinedVertices = has_defined_vertices
    getVertex = get_vertex
    getForwardVertex = get_forward_vertex
    getHighestIndex = get_highest_index
    setHighestIndex = set_highest_index
    getNumDimensions = get_num_dimensions
    hasNormals = has_normals
    hasColors = has_colors
    hasNonwhiteColors = has_nonwhite_colors
    hasUvs = has_uvs
    hasAux = has_aux
    addVertex = add_vertex
    makeNewVertex = make_new_vertex
    createUniqueVertex = create_unique_vertex
    findMatchingVertex = find_matching_vertex
    removeVertex = remove_vertex
    removeUnusedVertices = remove_unused_vertices
    addUnusedVerticesToPrim = add_unused_vertices_to_prim
    sortByExternalIndex = sort_by_external_index
    getClassType = get_class_type

class EggRenderMode:
    """This class stores miscellaneous rendering properties that is associated
    with geometry, and which may be set on the geometry primitive level, on the
    group above it, or indirectly via a texture.  It's intended to be a base
    class for egg objects that can have these properties set.
    
    This class cannot inherit from EggObject, because it causes problems at the
    EggPolygon level with multiple appearances of the EggObject base class.
    And making EggObject a virtual base class is just no fun.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    AM_unspecified: ClassVar[Literal[0]]
    AM_off: ClassVar[Literal[1]]
    AM_on: ClassVar[Literal[2]]
    AM_blend: ClassVar[Literal[3]]
    AM_blend_no_occlude: ClassVar[Literal[4]]
    AM_ms: ClassVar[Literal[5]]
    AM_ms_mask: ClassVar[Literal[6]]
    AM_binary: ClassVar[Literal[7]]
    AM_dual: ClassVar[Literal[8]]
    AM_premultiplied: ClassVar[Literal[9]]
    DWM_unspecified: ClassVar[Literal[0]]
    DWM_off: ClassVar[Literal[1]]
    DWM_on: ClassVar[Literal[2]]
    DTM_unspecified: ClassVar[Literal[0]]
    DTM_off: ClassVar[Literal[1]]
    DTM_on: ClassVar[Literal[2]]
    VM_unspecified: ClassVar[Literal[0]]
    VM_hidden: ClassVar[Literal[1]]
    VM_normal: ClassVar[Literal[2]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: EggRenderMode) -> None: ...
    def __eq__(self, __other: object) -> bool: ...
    def __ne__(self, __other: object) -> bool: ...
    def __lt__(self, other: EggRenderMode) -> bool: ...
    def __le__(self, other: EggRenderMode) -> bool: ...
    def assign(self, copy: EggRenderMode) -> EggRenderMode: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def set_alpha_mode(self, mode: _EggRenderMode_AlphaMode) -> None: ...
    def get_alpha_mode(self) -> _EggRenderMode_AlphaMode: ...
    def set_depth_write_mode(self, mode: _EggRenderMode_DepthWriteMode) -> None: ...
    def get_depth_write_mode(self) -> _EggRenderMode_DepthWriteMode: ...
    def set_depth_test_mode(self, mode: _EggRenderMode_DepthTestMode) -> None: ...
    def get_depth_test_mode(self) -> _EggRenderMode_DepthTestMode: ...
    def set_visibility_mode(self, mode: _EggRenderMode_VisibilityMode) -> None: ...
    def get_visibility_mode(self) -> _EggRenderMode_VisibilityMode: ...
    def set_depth_offset(self, bias: int) -> None: ...
    def get_depth_offset(self) -> int: ...
    def has_depth_offset(self) -> bool: ...
    def clear_depth_offset(self) -> None: ...
    def set_draw_order(self, order: int) -> None: ...
    def get_draw_order(self) -> int: ...
    def has_draw_order(self) -> bool: ...
    def clear_draw_order(self) -> None: ...
    def set_bin(self, bin: str) -> None: ...
    def get_bin(self) -> str: ...
    def has_bin(self) -> bool: ...
    def clear_bin(self) -> None: ...
    @staticmethod
    def string_alpha_mode(string: str) -> _EggRenderMode_AlphaMode: ...
    @staticmethod
    def string_depth_write_mode(string: str) -> _EggRenderMode_DepthWriteMode: ...
    @staticmethod
    def string_depth_test_mode(string: str) -> _EggRenderMode_DepthTestMode: ...
    @staticmethod
    def string_visibility_mode(string: str) -> _EggRenderMode_VisibilityMode: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setAlphaMode = set_alpha_mode
    getAlphaMode = get_alpha_mode
    setDepthWriteMode = set_depth_write_mode
    getDepthWriteMode = get_depth_write_mode
    setDepthTestMode = set_depth_test_mode
    getDepthTestMode = get_depth_test_mode
    setVisibilityMode = set_visibility_mode
    getVisibilityMode = get_visibility_mode
    setDepthOffset = set_depth_offset
    getDepthOffset = get_depth_offset
    hasDepthOffset = has_depth_offset
    clearDepthOffset = clear_depth_offset
    setDrawOrder = set_draw_order
    getDrawOrder = get_draw_order
    hasDrawOrder = has_draw_order
    clearDrawOrder = clear_draw_order
    setBin = set_bin
    getBin = get_bin
    hasBin = has_bin
    clearBin = clear_bin
    stringAlphaMode = string_alpha_mode
    stringDepthWriteMode = string_depth_write_mode
    stringDepthTestMode = string_depth_test_mode
    stringVisibilityMode = string_visibility_mode
    getClassType = get_class_type
    AMUnspecified = AM_unspecified
    AMOff = AM_off
    AMOn = AM_on
    AMBlend = AM_blend
    AMBlendNoOcclude = AM_blend_no_occlude
    AMMs = AM_ms
    AMMsMask = AM_ms_mask
    AMBinary = AM_binary
    AMDual = AM_dual
    AMPremultiplied = AM_premultiplied
    DWMUnspecified = DWM_unspecified
    DWMOff = DWM_off
    DWMOn = DWM_on
    DTMUnspecified = DTM_unspecified
    DTMOff = DTM_off
    DTMOn = DTM_on
    VMUnspecified = VM_unspecified
    VMHidden = VM_hidden
    VMNormal = VM_normal

class EggTransform:
    """This represents the <Transform> entry of a group or texture node: a list of
    component transform operations, applied in order, that describe a net
    transform matrix.
    
    This may be either a 3-d transform, and therefore described by a 4x4
    matrix, or a 2-d transform, described by a 3x3 matrix.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    CT_invalid: ClassVar[Literal[0]]
    CT_translate2d: ClassVar[Literal[1]]
    CT_translate3d: ClassVar[Literal[2]]
    CT_rotate2d: ClassVar[Literal[3]]
    CT_rotx: ClassVar[Literal[4]]
    CT_roty: ClassVar[Literal[5]]
    CT_rotz: ClassVar[Literal[6]]
    CT_rotate3d: ClassVar[Literal[7]]
    CT_scale2d: ClassVar[Literal[8]]
    CT_scale3d: ClassVar[Literal[9]]
    CT_uniform_scale: ClassVar[Literal[10]]
    CT_matrix3: ClassVar[Literal[11]]
    CT_matrix4: ClassVar[Literal[12]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: EggTransform) -> None: ...
    def assign(self, copy: EggTransform) -> EggTransform: ...
    def clear_transform(self) -> None: ...
    def add_translate2d(self, translate: LVecBase2d) -> None: ...
    def add_translate3d(self, translate: _Vec3d) -> None: ...
    def add_rotate2d(self, angle: float) -> None: ...
    def add_rotx(self, angle: float) -> None: ...
    def add_roty(self, angle: float) -> None: ...
    def add_rotz(self, angle: float) -> None: ...
    @overload
    def add_rotate3d(self, quat: _Vec4d) -> None: ...
    @overload
    def add_rotate3d(self, angle: float, axis: _Vec3d) -> None: ...
    def add_scale2d(self, scale: LVecBase2d) -> None: ...
    def add_scale3d(self, scale: _Vec3d) -> None: ...
    def add_uniform_scale(self, scale: float) -> None: ...
    def add_matrix3(self, mat: LMatrix3d) -> None: ...
    def add_matrix4(self, mat: _Mat4d) -> None: ...
    def has_transform(self) -> bool: ...
    def has_transform2d(self) -> bool: ...
    def set_transform2d(self, mat: LMatrix3d) -> None: ...
    def has_transform3d(self) -> bool: ...
    def set_transform3d(self, mat: _Mat4d) -> None: ...
    def get_transform2d(self) -> LMatrix3d: ...
    def get_transform3d(self) -> LMatrix4d: ...
    def transform_is_identity(self) -> bool: ...
    def get_num_components(self) -> int: ...
    def get_component_type(self, n: int) -> _EggTransform_ComponentType: ...
    def get_component_number(self, n: int) -> float: ...
    def get_component_vec2(self, n: int) -> LVecBase2d: ...
    def get_component_vec3(self, n: int) -> LVecBase3d: ...
    def get_component_mat3(self, n: int) -> LMatrix3d: ...
    def get_component_mat4(self, n: int) -> LMatrix4d: ...
    def write(self, out: ostream, indent_level: int, label: str) -> None: ...
    clearTransform = clear_transform
    addTranslate2d = add_translate2d
    addTranslate3d = add_translate3d
    addRotate2d = add_rotate2d
    addRotx = add_rotx
    addRoty = add_roty
    addRotz = add_rotz
    addRotate3d = add_rotate3d
    addScale2d = add_scale2d
    addScale3d = add_scale3d
    addUniformScale = add_uniform_scale
    addMatrix3 = add_matrix3
    addMatrix4 = add_matrix4
    hasTransform = has_transform
    hasTransform2d = has_transform2d
    setTransform2d = set_transform2d
    hasTransform3d = has_transform3d
    setTransform3d = set_transform3d
    getTransform2d = get_transform2d
    getTransform3d = get_transform3d
    transformIsIdentity = transform_is_identity
    getNumComponents = get_num_components
    getComponentType = get_component_type
    getComponentNumber = get_component_number
    getComponentVec2 = get_component_vec2
    getComponentVec3 = get_component_vec3
    getComponentMat3 = get_component_mat3
    getComponentMat4 = get_component_mat4
    CTInvalid = CT_invalid
    CTTranslate2d = CT_translate2d
    CTTranslate3d = CT_translate3d
    CTRotate2d = CT_rotate2d
    CTRotx = CT_rotx
    CTRoty = CT_roty
    CTRotz = CT_rotz
    CTRotate3d = CT_rotate3d
    CTScale2d = CT_scale2d
    CTScale3d = CT_scale3d
    CTUniformScale = CT_uniform_scale
    CTMatrix3 = CT_matrix3
    CTMatrix4 = CT_matrix4

class EggSwitchCondition(EggObject):
    """This corresponds to a <SwitchCondition> entry within a group.  It indicates
    the condition at which a level-of-detail is switched in or out.  This is
    actually an abstract base class for potentially any number of specific
    different kinds of switching conditions; presently, only a <Distance> type
    is actually supported.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    def make_copy(self) -> EggSwitchCondition: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def transform(self, mat: _Mat4d) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    makeCopy = make_copy
    getClassType = get_class_type

class EggSwitchConditionDistance(EggSwitchCondition):
    """A SwitchCondition that switches the levels-of-detail based on distance from
    the camera's eyepoint.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, switch_in: float, switch_out: float, center: _Vec3d, fade: float = ...) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class EggGroup(EggGroupNode, EggRenderMode, EggTransform):
    """The main glue of the egg hierarchy, this corresponds to the <Group>,
    <Instance>, and <Joint> type nodes.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    group_type: _EggGroup_GroupType
    billboard_type: _EggGroup_BillboardType
    billboard_center: LPoint3d
    cs_type: _EggGroup_CollisionSolidType
    collide_flags: _EggGroup_CollideFlags
    collision_name: str
    dcs_type: _EggGroup_DCSType
    dart_type: _EggGroup_DartType
    switch_flag: bool
    switch_fps: float
    model_flag: bool
    texlist_flag: bool
    nofog_flag: bool
    decal_flag: bool
    direct_flag: bool
    portal_flag: bool
    occluder_flag: bool
    indexed_flag: bool
    collide_mask: BitMask_uint32_t_32
    from_collide_mask: BitMask_uint32_t_32
    into_collide_mask: BitMask_uint32_t_32
    blend_mode: _EggGroup_BlendMode
    blend_operand_a: _EggGroup_BlendOperand
    blend_operand_b: _EggGroup_BlendOperand
    blend_color: LVecBase4f
    lod: EggSwitchCondition
    default_pose: EggTransform
    scroll_u: float
    scroll_v: float
    scroll_w: float
    scroll_r: float
    GT_invalid: ClassVar[Literal[-1]]
    GT_group: ClassVar[Literal[0]]
    GT_instance: ClassVar[Literal[1]]
    GT_joint: ClassVar[Literal[2]]
    DC_unspecified: ClassVar[Literal[0]]
    DC_none: ClassVar[Literal[16]]
    DC_local: ClassVar[Literal[32]]
    DC_net: ClassVar[Literal[48]]
    DC_no_touch: ClassVar[Literal[64]]
    DC_default: ClassVar[Literal[80]]
    BT_none: ClassVar[Literal[0]]
    BT_axis: ClassVar[Literal[32]]
    BT_point_camera_relative: ClassVar[Literal[64]]
    BT_point_world_relative: ClassVar[Literal[128]]
    CST_none: ClassVar[Literal[0]]
    CST_plane: ClassVar[Literal[65536]]
    CST_polygon: ClassVar[Literal[131072]]
    CST_polyset: ClassVar[Literal[196608]]
    CST_sphere: ClassVar[Literal[262144]]
    CST_tube: ClassVar[Literal[327680]]
    CST_inv_sphere: ClassVar[Literal[393216]]
    CST_box: ClassVar[Literal[458752]]
    CST_floor_mesh: ClassVar[Literal[524288]]
    CF_none: ClassVar[Literal[0]]
    CF_descend: ClassVar[Literal[1048576]]
    CF_event: ClassVar[Literal[2097152]]
    CF_keep: ClassVar[Literal[4194304]]
    CF_solid: ClassVar[Literal[8388608]]
    CF_center: ClassVar[Literal[16777216]]
    CF_turnstile: ClassVar[Literal[33554432]]
    CF_level: ClassVar[Literal[67108864]]
    CF_intangible: ClassVar[Literal[134217728]]
    DT_none: ClassVar[Literal[0]]
    DT_structured: ClassVar[Literal[268435456]]
    DT_sync: ClassVar[Literal[536870912]]
    DT_nosync: ClassVar[Literal[805306368]]
    DT_default: ClassVar[Literal[1073741824]]
    BM_unspecified: ClassVar[Literal[0]]
    BM_none: ClassVar[Literal[1]]
    BM_add: ClassVar[Literal[2]]
    BM_subtract: ClassVar[Literal[3]]
    BM_inv_subtract: ClassVar[Literal[4]]
    BM_min: ClassVar[Literal[5]]
    BM_max: ClassVar[Literal[6]]
    BO_unspecified: ClassVar[Literal[0]]
    BO_zero: ClassVar[Literal[1]]
    BO_one: ClassVar[Literal[2]]
    BO_incoming_color: ClassVar[Literal[3]]
    BO_one_minus_incoming_color: ClassVar[Literal[4]]
    BO_fbuffer_color: ClassVar[Literal[5]]
    BO_one_minus_fbuffer_color: ClassVar[Literal[6]]
    BO_incoming_alpha: ClassVar[Literal[7]]
    BO_one_minus_incoming_alpha: ClassVar[Literal[8]]
    BO_fbuffer_alpha: ClassVar[Literal[9]]
    BO_one_minus_fbuffer_alpha: ClassVar[Literal[10]]
    BO_constant_color: ClassVar[Literal[11]]
    BO_one_minus_constant_color: ClassVar[Literal[12]]
    BO_constant_alpha: ClassVar[Literal[13]]
    BO_one_minus_constant_alpha: ClassVar[Literal[14]]
    BO_incoming_color_saturate: ClassVar[Literal[15]]
    BO_color_scale: ClassVar[Literal[16]]
    BO_one_minus_color_scale: ClassVar[Literal[17]]
    BO_alpha_scale: ClassVar[Literal[18]]
    BO_one_minus_alpha_scale: ClassVar[Literal[19]]
    @property
    def object_types(self) -> Sequence[str]: ...
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggGroup) -> None: ...
    def upcast_to_EggGroupNode(self) -> EggGroupNode: ...
    def upcast_to_EggRenderMode(self) -> EggRenderMode: ...
    def upcast_to_EggTransform(self) -> EggTransform: ...
    def assign(self, copy: EggGroup) -> EggGroup: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def write_billboard_flags(self, out: ostream, indent_level: int) -> None: ...
    def write_collide_flags(self, out: ostream, indent_level: int) -> None: ...
    def write_model_flags(self, out: ostream, indent_level: int) -> None: ...
    def write_switch_flags(self, out: ostream, indent_level: int) -> None: ...
    def write_object_types(self, out: ostream, indent_level: int) -> None: ...
    def write_decal_flags(self, out: ostream, indent_level: int) -> None: ...
    def write_tags(self, out: ostream, indent_level: int) -> None: ...
    def write_render_mode(self, out: ostream, indent_level: int) -> None: ...
    def is_joint(self) -> bool: ...
    def determine_alpha_mode(self) -> EggRenderMode: ...
    def determine_depth_write_mode(self) -> EggRenderMode: ...
    def determine_depth_test_mode(self) -> EggRenderMode: ...
    def determine_visibility_mode(self) -> EggRenderMode: ...
    def determine_depth_offset(self) -> EggRenderMode: ...
    def determine_draw_order(self) -> EggRenderMode: ...
    def determine_bin(self) -> EggRenderMode: ...
    def determine_indexed(self) -> bool: ...
    def determine_decal(self) -> bool: ...
    def set_group_type(self, type: _EggGroup_GroupType) -> None: ...
    def get_group_type(self) -> _EggGroup_GroupType: ...
    def is_instance_type(self) -> bool: ...
    def set_billboard_type(self, type: _EggGroup_BillboardType) -> None: ...
    def get_billboard_type(self) -> _EggGroup_BillboardType: ...
    def set_billboard_center(self, billboard_center: _Vec3d) -> None: ...
    def clear_billboard_center(self) -> None: ...
    def has_billboard_center(self) -> bool: ...
    def get_billboard_center(self) -> LPoint3d: ...
    def set_cs_type(self, type: _EggGroup_CollisionSolidType) -> None: ...
    def get_cs_type(self) -> _EggGroup_CollisionSolidType: ...
    def set_collide_flags(self, flags: int) -> None: ...
    def get_collide_flags(self) -> _EggGroup_CollideFlags: ...
    def set_collision_name(self, collision_name: str) -> None: ...
    def clear_collision_name(self) -> None: ...
    def has_collision_name(self) -> bool: ...
    def get_collision_name(self) -> str: ...
    def set_dcs_type(self, type: _EggGroup_DCSType) -> None: ...
    def get_dcs_type(self) -> _EggGroup_DCSType: ...
    def has_dcs_type(self) -> bool: ...
    def set_dart_type(self, type: _EggGroup_DartType) -> None: ...
    def get_dart_type(self) -> _EggGroup_DartType: ...
    def set_switch_flag(self, flag: bool) -> None: ...
    def get_switch_flag(self) -> bool: ...
    def set_switch_fps(self, fps: float) -> None: ...
    def get_switch_fps(self) -> float: ...
    def add_object_type(self, object_type: str) -> None: ...
    def clear_object_types(self) -> None: ...
    def get_num_object_types(self) -> int: ...
    def get_object_type(self, index: int) -> str: ...
    def has_object_type(self, object_type: str) -> bool: ...
    def remove_object_type(self, object_type: str) -> bool: ...
    def set_model_flag(self, flag: bool) -> None: ...
    def get_model_flag(self) -> bool: ...
    def set_texlist_flag(self, flag: bool) -> None: ...
    def get_texlist_flag(self) -> bool: ...
    def set_nofog_flag(self, flag: bool) -> None: ...
    def get_nofog_flag(self) -> bool: ...
    def set_decal_flag(self, flag: bool) -> None: ...
    def get_decal_flag(self) -> bool: ...
    def set_direct_flag(self, flag: bool) -> None: ...
    def get_direct_flag(self) -> bool: ...
    def set_portal_flag(self, flag: bool) -> None: ...
    def get_portal_flag(self) -> bool: ...
    def set_occluder_flag(self, flag: bool) -> None: ...
    def get_occluder_flag(self) -> bool: ...
    def set_polylight_flag(self, flag: bool) -> None: ...
    def get_polylight_flag(self) -> bool: ...
    def set_indexed_flag(self, flag: bool) -> None: ...
    def clear_indexed_flag(self) -> None: ...
    def has_indexed_flag(self) -> bool: ...
    def get_indexed_flag(self) -> bool: ...
    def set_collide_mask(self, mask: BitMask_uint32_t_32) -> None: ...
    def clear_collide_mask(self) -> None: ...
    def has_collide_mask(self) -> bool: ...
    def get_collide_mask(self) -> BitMask_uint32_t_32: ...
    def set_from_collide_mask(self, mask: BitMask_uint32_t_32) -> None: ...
    def clear_from_collide_mask(self) -> None: ...
    def has_from_collide_mask(self) -> bool: ...
    def get_from_collide_mask(self) -> BitMask_uint32_t_32: ...
    def set_into_collide_mask(self, mask: BitMask_uint32_t_32) -> None: ...
    def clear_into_collide_mask(self) -> None: ...
    def has_into_collide_mask(self) -> bool: ...
    def get_into_collide_mask(self) -> BitMask_uint32_t_32: ...
    def set_blend_mode(self, blend_mode: _EggGroup_BlendMode) -> None: ...
    def get_blend_mode(self) -> _EggGroup_BlendMode: ...
    def set_blend_operand_a(self, blend_operand_a: _EggGroup_BlendOperand) -> None: ...
    def get_blend_operand_a(self) -> _EggGroup_BlendOperand: ...
    def set_blend_operand_b(self, blend_operand_b: _EggGroup_BlendOperand) -> None: ...
    def get_blend_operand_b(self) -> _EggGroup_BlendOperand: ...
    def set_blend_color(self, blend_color: _Vec4f) -> None: ...
    def clear_blend_color(self) -> None: ...
    def has_blend_color(self) -> bool: ...
    def get_blend_color(self) -> LVecBase4f: ...
    def set_lod(self, lod: EggSwitchCondition) -> None: ...
    def clear_lod(self) -> None: ...
    def has_lod(self) -> bool: ...
    def get_lod(self) -> EggSwitchCondition: ...
    def set_tag(self, key: str, value: str) -> None: ...
    def get_tag(self, key: str) -> str: ...
    def has_tag(self, key: str) -> bool: ...
    def clear_tag(self, key: str) -> None: ...
    def get_default_pose(self) -> EggTransform: ...
    def modify_default_pose(self) -> EggTransform: ...
    def set_default_pose(self, transform: EggTransform) -> None: ...
    def clear_default_pose(self) -> None: ...
    def set_scroll_u(self, u_speed: float) -> None: ...
    def set_scroll_v(self, v_speed: float) -> None: ...
    def set_scroll_w(self, w_speed: float) -> None: ...
    def set_scroll_r(self, r_speed: float) -> None: ...
    def get_scroll_u(self) -> float: ...
    def get_scroll_v(self) -> float: ...
    def get_scroll_w(self) -> float: ...
    def get_scroll_r(self) -> float: ...
    def has_scrolling_uvs(self) -> bool: ...
    def ref_vertex(self, vert: EggVertex, membership: float = ...) -> None: ...
    def unref_vertex(self, vert: EggVertex) -> None: ...
    def unref_all_vertices(self) -> None: ...
    def get_vertex_membership(self, vert: EggVertex) -> float: ...
    def set_vertex_membership(self, vert: EggVertex, membership: float) -> None: ...
    def steal_vrefs(self, other: EggGroup) -> None: ...
    def test_vref_integrity(self) -> None: ...
    def add_group_ref(self, group: EggGroup) -> None: ...
    def get_num_group_refs(self) -> int: ...
    def get_group_ref(self, n: int) -> EggGroup: ...
    def remove_group_ref(self, n: int) -> None: ...
    def clear_group_refs(self) -> None: ...
    @staticmethod
    def string_group_type(strval: str) -> _EggGroup_GroupType: ...
    @staticmethod
    def string_dart_type(strval: str) -> _EggGroup_DartType: ...
    @staticmethod
    def string_dcs_type(strval: str) -> _EggGroup_DCSType: ...
    @staticmethod
    def string_billboard_type(strval: str) -> _EggGroup_BillboardType: ...
    @staticmethod
    def string_cs_type(strval: str) -> _EggGroup_CollisionSolidType: ...
    @staticmethod
    def string_collide_flags(strval: str) -> _EggGroup_CollideFlags: ...
    @staticmethod
    def string_blend_mode(strval: str) -> _EggGroup_BlendMode: ...
    @staticmethod
    def string_blend_operand(strval: str) -> _EggGroup_BlendOperand: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_object_types(self) -> tuple[str, ...]: ...
    def get_group_refs(self) -> tuple[EggGroup, ...]: ...
    upcastToEggGroupNode = upcast_to_EggGroupNode
    upcastToEggRenderMode = upcast_to_EggRenderMode
    upcastToEggTransform = upcast_to_EggTransform
    writeBillboardFlags = write_billboard_flags
    writeCollideFlags = write_collide_flags
    writeModelFlags = write_model_flags
    writeSwitchFlags = write_switch_flags
    writeObjectTypes = write_object_types
    writeDecalFlags = write_decal_flags
    writeTags = write_tags
    writeRenderMode = write_render_mode
    isJoint = is_joint
    determineAlphaMode = determine_alpha_mode
    determineDepthWriteMode = determine_depth_write_mode
    determineDepthTestMode = determine_depth_test_mode
    determineVisibilityMode = determine_visibility_mode
    determineDepthOffset = determine_depth_offset
    determineDrawOrder = determine_draw_order
    determineBin = determine_bin
    determineIndexed = determine_indexed
    determineDecal = determine_decal
    setGroupType = set_group_type
    getGroupType = get_group_type
    isInstanceType = is_instance_type
    setBillboardType = set_billboard_type
    getBillboardType = get_billboard_type
    setBillboardCenter = set_billboard_center
    clearBillboardCenter = clear_billboard_center
    hasBillboardCenter = has_billboard_center
    getBillboardCenter = get_billboard_center
    setCsType = set_cs_type
    getCsType = get_cs_type
    setCollideFlags = set_collide_flags
    getCollideFlags = get_collide_flags
    setCollisionName = set_collision_name
    clearCollisionName = clear_collision_name
    hasCollisionName = has_collision_name
    getCollisionName = get_collision_name
    setDcsType = set_dcs_type
    getDcsType = get_dcs_type
    hasDcsType = has_dcs_type
    setDartType = set_dart_type
    getDartType = get_dart_type
    setSwitchFlag = set_switch_flag
    getSwitchFlag = get_switch_flag
    setSwitchFps = set_switch_fps
    getSwitchFps = get_switch_fps
    addObjectType = add_object_type
    clearObjectTypes = clear_object_types
    getNumObjectTypes = get_num_object_types
    getObjectType = get_object_type
    hasObjectType = has_object_type
    removeObjectType = remove_object_type
    setModelFlag = set_model_flag
    getModelFlag = get_model_flag
    setTexlistFlag = set_texlist_flag
    getTexlistFlag = get_texlist_flag
    setNofogFlag = set_nofog_flag
    getNofogFlag = get_nofog_flag
    setDecalFlag = set_decal_flag
    getDecalFlag = get_decal_flag
    setDirectFlag = set_direct_flag
    getDirectFlag = get_direct_flag
    setPortalFlag = set_portal_flag
    getPortalFlag = get_portal_flag
    setOccluderFlag = set_occluder_flag
    getOccluderFlag = get_occluder_flag
    setPolylightFlag = set_polylight_flag
    getPolylightFlag = get_polylight_flag
    setIndexedFlag = set_indexed_flag
    clearIndexedFlag = clear_indexed_flag
    hasIndexedFlag = has_indexed_flag
    getIndexedFlag = get_indexed_flag
    setCollideMask = set_collide_mask
    clearCollideMask = clear_collide_mask
    hasCollideMask = has_collide_mask
    getCollideMask = get_collide_mask
    setFromCollideMask = set_from_collide_mask
    clearFromCollideMask = clear_from_collide_mask
    hasFromCollideMask = has_from_collide_mask
    getFromCollideMask = get_from_collide_mask
    setIntoCollideMask = set_into_collide_mask
    clearIntoCollideMask = clear_into_collide_mask
    hasIntoCollideMask = has_into_collide_mask
    getIntoCollideMask = get_into_collide_mask
    setBlendMode = set_blend_mode
    getBlendMode = get_blend_mode
    setBlendOperandA = set_blend_operand_a
    getBlendOperandA = get_blend_operand_a
    setBlendOperandB = set_blend_operand_b
    getBlendOperandB = get_blend_operand_b
    setBlendColor = set_blend_color
    clearBlendColor = clear_blend_color
    hasBlendColor = has_blend_color
    getBlendColor = get_blend_color
    setLod = set_lod
    clearLod = clear_lod
    hasLod = has_lod
    getLod = get_lod
    setTag = set_tag
    getTag = get_tag
    hasTag = has_tag
    clearTag = clear_tag
    getDefaultPose = get_default_pose
    modifyDefaultPose = modify_default_pose
    setDefaultPose = set_default_pose
    clearDefaultPose = clear_default_pose
    setScrollU = set_scroll_u
    setScrollV = set_scroll_v
    setScrollW = set_scroll_w
    setScrollR = set_scroll_r
    getScrollU = get_scroll_u
    getScrollV = get_scroll_v
    getScrollW = get_scroll_w
    getScrollR = get_scroll_r
    hasScrollingUvs = has_scrolling_uvs
    refVertex = ref_vertex
    unrefVertex = unref_vertex
    unrefAllVertices = unref_all_vertices
    getVertexMembership = get_vertex_membership
    setVertexMembership = set_vertex_membership
    stealVrefs = steal_vrefs
    testVrefIntegrity = test_vref_integrity
    addGroupRef = add_group_ref
    getNumGroupRefs = get_num_group_refs
    getGroupRef = get_group_ref
    removeGroupRef = remove_group_ref
    clearGroupRefs = clear_group_refs
    stringGroupType = string_group_type
    stringDartType = string_dart_type
    stringDcsType = string_dcs_type
    stringBillboardType = string_billboard_type
    stringCsType = string_cs_type
    stringCollideFlags = string_collide_flags
    stringBlendMode = string_blend_mode
    stringBlendOperand = string_blend_operand
    getClassType = get_class_type
    getObjectTypes = get_object_types
    getGroupRefs = get_group_refs
    GTInvalid = GT_invalid
    GTGroup = GT_group
    GTInstance = GT_instance
    GTJoint = GT_joint
    DCUnspecified = DC_unspecified
    DCNone = DC_none
    DCLocal = DC_local
    DCNet = DC_net
    DCNoTouch = DC_no_touch
    DCDefault = DC_default
    BTNone = BT_none
    BTAxis = BT_axis
    BTPointCameraRelative = BT_point_camera_relative
    BTPointWorldRelative = BT_point_world_relative
    CSTNone = CST_none
    CSTPlane = CST_plane
    CSTPolygon = CST_polygon
    CSTPolyset = CST_polyset
    CSTSphere = CST_sphere
    CSTTube = CST_tube
    CSTInvSphere = CST_inv_sphere
    CSTBox = CST_box
    CSTFloorMesh = CST_floor_mesh
    CFNone = CF_none
    CFDescend = CF_descend
    CFEvent = CF_event
    CFKeep = CF_keep
    CFSolid = CF_solid
    CFCenter = CF_center
    CFTurnstile = CF_turnstile
    CFLevel = CF_level
    CFIntangible = CF_intangible
    DTNone = DT_none
    DTStructured = DT_structured
    DTSync = DT_sync
    DTNosync = DT_nosync
    DTDefault = DT_default
    BMUnspecified = BM_unspecified
    BMNone = BM_none
    BMAdd = BM_add
    BMSubtract = BM_subtract
    BMInvSubtract = BM_inv_subtract
    BMMin = BM_min
    BMMax = BM_max
    BOUnspecified = BO_unspecified
    BOZero = BO_zero
    BOOne = BO_one
    BOIncomingColor = BO_incoming_color
    BOOneMinusIncomingColor = BO_one_minus_incoming_color
    BOFbufferColor = BO_fbuffer_color
    BOOneMinusFbufferColor = BO_one_minus_fbuffer_color
    BOIncomingAlpha = BO_incoming_alpha
    BOOneMinusIncomingAlpha = BO_one_minus_incoming_alpha
    BOFbufferAlpha = BO_fbuffer_alpha
    BOOneMinusFbufferAlpha = BO_one_minus_fbuffer_alpha
    BOConstantColor = BO_constant_color
    BOOneMinusConstantColor = BO_one_minus_constant_color
    BOConstantAlpha = BO_constant_alpha
    BOOneMinusConstantAlpha = BO_one_minus_constant_alpha
    BOIncomingColorSaturate = BO_incoming_color_saturate
    BOColorScale = BO_color_scale
    BOOneMinusColorScale = BO_one_minus_color_scale
    BOAlphaScale = BO_alpha_scale
    BOOneMinusAlphaScale = BO_one_minus_alpha_scale

class EggBin(EggGroup):
    """A type of group node that holds related subnodes.  This is a special kind
    of node that will never be read in from an egg file, but can only exist in
    the egg scene graph if it is created via the use of an EggBinMaker.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggGroup) -> None: ...
    def set_bin_number(self, bin_number: int) -> None: ...
    def get_bin_number(self) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setBinNumber = set_bin_number
    getBinNumber = get_bin_number
    getClassType = get_class_type

class EggBinMaker(EggObject):
    """This is a handy class for collecting related nodes together.  It is an
    abstract class; to use it you must subclass off of it.  See the somewhat
    lengthy comment above.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    def make_bins(self, root_group: EggGroupNode) -> int: ...
    def prepare_node(self, node: EggNode) -> None: ...
    def get_bin_number(self, node: EggNode) -> int: ...
    def sorts_less(self, bin_number: int, a: EggNode, b: EggNode) -> bool: ...
    def collapse_group(self, group: EggGroup, bin_number: int) -> bool: ...
    def get_bin_name(self, bin_number: int, child: EggNode) -> str: ...
    def make_bin(self, bin_number: int, child: EggNode, collapse_from: EggGroup) -> EggBin: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    makeBins = make_bins
    prepareNode = prepare_node
    getBinNumber = get_bin_number
    sortsLess = sorts_less
    collapseGroup = collapse_group
    getBinName = get_bin_name
    makeBin = make_bin
    getClassType = get_class_type

class EggComment(EggNode):
    """A comment that appears in an egg file within a <Comment> entry."""
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, copy: EggComment) -> None: ...
    @overload
    def __init__(self, node_name: str, comment: str) -> None: ...
    def __str__(self) -> str: ...
    @overload
    def assign(self, copy: EggComment) -> EggComment: ...
    @overload
    def assign(self, comment: str) -> EggComment: ...
    def set_comment(self, comment: str) -> None: ...
    def get_comment(self) -> str: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setComment = set_comment
    getComment = get_comment
    getClassType = get_class_type

class EggFilenameNode(EggNode):
    """This is an egg node that contains a filename.  It references a physical
    file relative to the directory the egg file was loaded in.  It is a base
    class for EggTexture and EggExternalReference.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    def assign(self, copy: EggFilenameNode) -> EggFilenameNode: ...
    def get_default_extension(self) -> str: ...
    def get_filename(self) -> Filename: ...
    def set_filename(self, filename: _Filename) -> None: ...
    def get_fullpath(self) -> Filename: ...
    def set_fullpath(self, fullpath: _Filename) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getDefaultExtension = get_default_extension
    getFilename = get_filename
    setFilename = set_filename
    getFullpath = get_fullpath
    setFullpath = set_fullpath
    getClassType = get_class_type

class EggTexture(EggFilenameNode, EggRenderMode, EggTransform):
    """Defines a texture map that may be applied to geometry."""
    DtoolClassDict: ClassVar[dict[str, Any]]
    texture_type: _EggTexture_TextureType
    format: _EggTexture_Format
    compression_mode: _EggTexture_CompressionMode
    wrap_mode: _EggTexture_WrapMode
    wrap_u: _EggTexture_WrapMode
    wrap_v: _EggTexture_WrapMode
    wrap_w: _EggTexture_WrapMode
    minfilter: _EggTexture_FilterType
    magfilter: _EggTexture_FilterType
    anisotropic_degree: int
    env_type: _EggTexture_EnvType
    saved_result: bool
    tex_gen: _EggTexture_TexGen
    quality_level: _EggTexture_QualityLevel
    stage_name: str
    priority: int
    color: LVecBase4f
    border_color: LVecBase4f
    uv_name: str
    rgb_scale: int
    alpha_scale: int
    alpha_filename: Filename
    alpha_fullpath: Filename
    alpha_file_channel: int
    multiview: bool
    num_views: int
    read_mipmaps: bool
    min_lod: float
    max_lod: float
    lod_bias: float
    E_basename: ClassVar[Literal[1]]
    E_extension: ClassVar[Literal[2]]
    E_dirname: ClassVar[Literal[4]]
    E_complete_filename: ClassVar[Literal[7]]
    E_transform: ClassVar[Literal[8]]
    E_attributes: ClassVar[Literal[16]]
    E_tref_name: ClassVar[Literal[32]]
    TT_unspecified: ClassVar[Literal[0]]
    TT_1d_texture: ClassVar[Literal[1]]
    TT_2d_texture: ClassVar[Literal[2]]
    TT_3d_texture: ClassVar[Literal[3]]
    TT_cube_map: ClassVar[Literal[4]]
    F_unspecified: ClassVar[Literal[0]]
    F_rgba: ClassVar[Literal[1]]
    F_rgbm: ClassVar[Literal[2]]
    F_rgba12: ClassVar[Literal[3]]
    F_rgba8: ClassVar[Literal[4]]
    F_rgba4: ClassVar[Literal[5]]
    F_rgba5: ClassVar[Literal[6]]
    F_rgb: ClassVar[Literal[7]]
    F_rgb12: ClassVar[Literal[8]]
    F_rgb8: ClassVar[Literal[9]]
    F_rgb5: ClassVar[Literal[10]]
    F_rgb332: ClassVar[Literal[11]]
    F_red: ClassVar[Literal[12]]
    F_green: ClassVar[Literal[13]]
    F_blue: ClassVar[Literal[14]]
    F_alpha: ClassVar[Literal[15]]
    F_luminance: ClassVar[Literal[16]]
    F_luminance_alpha: ClassVar[Literal[17]]
    F_luminance_alphamask: ClassVar[Literal[18]]
    F_srgb: ClassVar[Literal[19]]
    F_srgb_alpha: ClassVar[Literal[20]]
    CM_default: ClassVar[Literal[0]]
    CM_off: ClassVar[Literal[1]]
    CM_on: ClassVar[Literal[2]]
    CM_fxt1: ClassVar[Literal[3]]
    CM_dxt1: ClassVar[Literal[4]]
    CM_dxt2: ClassVar[Literal[5]]
    CM_dxt3: ClassVar[Literal[6]]
    CM_dxt4: ClassVar[Literal[7]]
    CM_dxt5: ClassVar[Literal[8]]
    WM_unspecified: ClassVar[Literal[0]]
    WM_clamp: ClassVar[Literal[1]]
    WM_repeat: ClassVar[Literal[2]]
    WM_mirror: ClassVar[Literal[3]]
    WM_mirror_once: ClassVar[Literal[4]]
    WM_border_color: ClassVar[Literal[5]]
    FT_unspecified: ClassVar[Literal[0]]
    FT_nearest: ClassVar[Literal[1]]
    FT_linear: ClassVar[Literal[2]]
    FT_nearest_mipmap_nearest: ClassVar[Literal[3]]
    FT_linear_mipmap_nearest: ClassVar[Literal[4]]
    FT_nearest_mipmap_linear: ClassVar[Literal[5]]
    FT_linear_mipmap_linear: ClassVar[Literal[6]]
    ET_unspecified: ClassVar[Literal[0]]
    ET_modulate: ClassVar[Literal[1]]
    ET_decal: ClassVar[Literal[2]]
    ET_blend: ClassVar[Literal[3]]
    ET_replace: ClassVar[Literal[4]]
    ET_add: ClassVar[Literal[5]]
    ET_blend_color_scale: ClassVar[Literal[6]]
    ET_modulate_glow: ClassVar[Literal[7]]
    ET_modulate_gloss: ClassVar[Literal[8]]
    ET_normal: ClassVar[Literal[9]]
    ET_normal_height: ClassVar[Literal[10]]
    ET_glow: ClassVar[Literal[11]]
    ET_gloss: ClassVar[Literal[12]]
    ET_height: ClassVar[Literal[13]]
    ET_selector: ClassVar[Literal[14]]
    ET_normal_gloss: ClassVar[Literal[15]]
    ET_emission: ClassVar[Literal[16]]
    CM_unspecified: ClassVar[Literal[0]]
    CM_replace: ClassVar[Literal[1]]
    CM_modulate: ClassVar[Literal[2]]
    CM_add: ClassVar[Literal[3]]
    CM_add_signed: ClassVar[Literal[4]]
    CM_interpolate: ClassVar[Literal[5]]
    CM_subtract: ClassVar[Literal[6]]
    CM_dot3_rgb: ClassVar[Literal[7]]
    CM_dot3_rgba: ClassVar[Literal[8]]
    CC_rgb: ClassVar[Literal[0]]
    CC_alpha: ClassVar[Literal[1]]
    CC_num_channels: ClassVar[Literal[2]]
    CI_num_indices: ClassVar[Literal[3]]
    CS_unspecified: ClassVar[Literal[0]]
    CS_texture: ClassVar[Literal[1]]
    CS_constant: ClassVar[Literal[2]]
    CS_primary_color: ClassVar[Literal[3]]
    CS_previous: ClassVar[Literal[4]]
    CS_constant_color_scale: ClassVar[Literal[5]]
    CS_last_saved_result: ClassVar[Literal[6]]
    CO_unspecified: ClassVar[Literal[0]]
    CO_src_color: ClassVar[Literal[1]]
    CO_one_minus_src_color: ClassVar[Literal[2]]
    CO_src_alpha: ClassVar[Literal[3]]
    CO_one_minus_src_alpha: ClassVar[Literal[4]]
    TG_unspecified: ClassVar[Literal[0]]
    TG_eye_sphere_map: ClassVar[Literal[1]]
    TG_world_cube_map: ClassVar[Literal[2]]
    TG_eye_cube_map: ClassVar[Literal[3]]
    TG_world_normal: ClassVar[Literal[4]]
    TG_eye_normal: ClassVar[Literal[5]]
    TG_world_position: ClassVar[Literal[6]]
    TG_eye_position: ClassVar[Literal[7]]
    TG_point_sprite: ClassVar[Literal[8]]
    QL_unspecified: ClassVar[Literal[0]]
    QL_default: ClassVar[Literal[1]]
    QL_fastest: ClassVar[Literal[2]]
    QL_normal: ClassVar[Literal[3]]
    QL_best: ClassVar[Literal[4]]
    @property
    def multitexture_sort(self) -> int: ...
    @overload
    def __init__(self, copy: EggTexture) -> None: ...
    @overload
    def __init__(self, tref_name: str, filename: _Filename) -> None: ...
    def upcast_to_EggFilenameNode(self) -> EggFilenameNode: ...
    def upcast_to_EggRenderMode(self) -> EggRenderMode: ...
    def upcast_to_EggTransform(self) -> EggTransform: ...
    def assign(self, copy: EggTexture) -> EggTexture: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def is_equivalent_to(self, other: EggTexture, eq: int) -> bool: ...
    def sorts_less_than(self, other: EggTexture, eq: int) -> bool: ...
    def has_alpha_channel(self, num_components: int) -> bool: ...
    def set_texture_type(self, texture_type: _EggTexture_TextureType) -> None: ...
    def get_texture_type(self) -> _EggTexture_TextureType: ...
    def set_format(self, format: _EggTexture_Format) -> None: ...
    def get_format(self) -> _EggTexture_Format: ...
    def set_compression_mode(self, mode: _EggTexture_CompressionMode) -> None: ...
    def get_compression_mode(self) -> _EggTexture_CompressionMode: ...
    def set_wrap_mode(self, mode: _EggTexture_WrapMode) -> None: ...
    def get_wrap_mode(self) -> _EggTexture_WrapMode: ...
    def set_wrap_u(self, mode: _EggTexture_WrapMode) -> None: ...
    def get_wrap_u(self) -> _EggTexture_WrapMode: ...
    def determine_wrap_u(self) -> _EggTexture_WrapMode: ...
    def set_wrap_v(self, mode: _EggTexture_WrapMode) -> None: ...
    def get_wrap_v(self) -> _EggTexture_WrapMode: ...
    def determine_wrap_v(self) -> _EggTexture_WrapMode: ...
    def set_wrap_w(self, mode: _EggTexture_WrapMode) -> None: ...
    def get_wrap_w(self) -> _EggTexture_WrapMode: ...
    def determine_wrap_w(self) -> _EggTexture_WrapMode: ...
    def set_minfilter(self, type: _EggTexture_FilterType) -> None: ...
    def get_minfilter(self) -> _EggTexture_FilterType: ...
    def set_magfilter(self, type: _EggTexture_FilterType) -> None: ...
    def get_magfilter(self) -> _EggTexture_FilterType: ...
    def set_anisotropic_degree(self, anisotropic_degree: int) -> None: ...
    def clear_anisotropic_degree(self) -> None: ...
    def has_anisotropic_degree(self) -> bool: ...
    def get_anisotropic_degree(self) -> int: ...
    def set_env_type(self, type: _EggTexture_EnvType) -> None: ...
    def get_env_type(self) -> _EggTexture_EnvType: ...
    def affects_polygon_alpha(self) -> bool: ...
    def set_combine_mode(self, channel: _EggTexture_CombineChannel, cm: _EggTexture_CombineMode) -> None: ...
    def get_combine_mode(self, channel: _EggTexture_CombineChannel) -> _EggTexture_CombineMode: ...
    def set_combine_source(self, channel: _EggTexture_CombineChannel, n: int, cs: _EggTexture_CombineSource) -> None: ...
    def get_combine_source(self, channel: _EggTexture_CombineChannel, n: int) -> _EggTexture_CombineSource: ...
    def set_combine_operand(self, channel: _EggTexture_CombineChannel, n: int, co: _EggTexture_CombineOperand) -> None: ...
    def get_combine_operand(self, channel: _EggTexture_CombineChannel, n: int) -> _EggTexture_CombineOperand: ...
    def set_saved_result(self, saved_result: bool) -> None: ...
    def get_saved_result(self) -> bool: ...
    def set_tex_gen(self, tex_gen: _EggTexture_TexGen) -> None: ...
    def get_tex_gen(self) -> _EggTexture_TexGen: ...
    def set_quality_level(self, quality_level: _EggTexture_QualityLevel) -> None: ...
    def get_quality_level(self) -> _EggTexture_QualityLevel: ...
    def set_stage_name(self, stage_name: str) -> None: ...
    def clear_stage_name(self) -> None: ...
    def has_stage_name(self) -> bool: ...
    def get_stage_name(self) -> str: ...
    def set_priority(self, priority: int) -> None: ...
    def clear_priority(self) -> None: ...
    def has_priority(self) -> bool: ...
    def get_priority(self) -> int: ...
    def set_color(self, color: _Vec4f) -> None: ...
    def clear_color(self) -> None: ...
    def has_color(self) -> bool: ...
    def get_color(self) -> LVecBase4f: ...
    def set_border_color(self, border_color: _Vec4f) -> None: ...
    def clear_border_color(self) -> None: ...
    def has_border_color(self) -> bool: ...
    def get_border_color(self) -> LVecBase4f: ...
    def set_uv_name(self, uv_name: str) -> None: ...
    def clear_uv_name(self) -> None: ...
    def has_uv_name(self) -> bool: ...
    def get_uv_name(self) -> str: ...
    def set_rgb_scale(self, rgb_scale: int) -> None: ...
    def clear_rgb_scale(self) -> None: ...
    def has_rgb_scale(self) -> bool: ...
    def get_rgb_scale(self) -> int: ...
    def set_alpha_scale(self, alpha_scale: int) -> None: ...
    def clear_alpha_scale(self) -> None: ...
    def has_alpha_scale(self) -> bool: ...
    def get_alpha_scale(self) -> int: ...
    def set_alpha_filename(self, filename: _Filename) -> None: ...
    def clear_alpha_filename(self) -> None: ...
    def has_alpha_filename(self) -> bool: ...
    def get_alpha_filename(self) -> Filename: ...
    def set_alpha_fullpath(self, fullpath: _Filename) -> None: ...
    def get_alpha_fullpath(self) -> Filename: ...
    def set_alpha_file_channel(self, alpha_file_channel: int) -> None: ...
    def clear_alpha_file_channel(self) -> None: ...
    def has_alpha_file_channel(self) -> bool: ...
    def get_alpha_file_channel(self) -> int: ...
    def set_multiview(self, multiview: bool) -> None: ...
    def get_multiview(self) -> bool: ...
    def set_num_views(self, num_views: int) -> None: ...
    def clear_num_views(self) -> None: ...
    def has_num_views(self) -> bool: ...
    def get_num_views(self) -> int: ...
    def set_read_mipmaps(self, read_mipmaps: bool) -> None: ...
    def get_read_mipmaps(self) -> bool: ...
    def set_min_lod(self, min_lod: float) -> None: ...
    def clear_min_lod(self) -> None: ...
    def has_min_lod(self) -> bool: ...
    def get_min_lod(self) -> float: ...
    def set_max_lod(self, max_lod: float) -> None: ...
    def clear_max_lod(self) -> None: ...
    def has_max_lod(self) -> bool: ...
    def get_max_lod(self) -> float: ...
    def set_lod_bias(self, lod_bias: float) -> None: ...
    def clear_lod_bias(self) -> None: ...
    def has_lod_bias(self) -> bool: ...
    def get_lod_bias(self) -> float: ...
    def clear_multitexture(self) -> None: ...
    def multitexture_over(self, other: EggTexture) -> bool: ...
    def get_multitexture_sort(self) -> int: ...
    @staticmethod
    def string_texture_type(string: str) -> _EggTexture_TextureType: ...
    @staticmethod
    def string_format(string: str) -> _EggTexture_Format: ...
    @staticmethod
    def string_compression_mode(string: str) -> _EggTexture_CompressionMode: ...
    @staticmethod
    def string_wrap_mode(string: str) -> _EggTexture_WrapMode: ...
    @staticmethod
    def string_filter_type(string: str) -> _EggTexture_FilterType: ...
    @staticmethod
    def string_env_type(string: str) -> _EggTexture_EnvType: ...
    @staticmethod
    def string_combine_mode(string: str) -> _EggTexture_CombineMode: ...
    @staticmethod
    def string_combine_source(string: str) -> _EggTexture_CombineSource: ...
    @staticmethod
    def string_combine_operand(string: str) -> _EggTexture_CombineOperand: ...
    @staticmethod
    def string_tex_gen(string: str) -> _EggTexture_TexGen: ...
    @staticmethod
    def string_quality_level(string: str) -> _EggTexture_QualityLevel: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    upcastToEggFilenameNode = upcast_to_EggFilenameNode
    upcastToEggRenderMode = upcast_to_EggRenderMode
    upcastToEggTransform = upcast_to_EggTransform
    isEquivalentTo = is_equivalent_to
    sortsLessThan = sorts_less_than
    hasAlphaChannel = has_alpha_channel
    setTextureType = set_texture_type
    getTextureType = get_texture_type
    setFormat = set_format
    getFormat = get_format
    setCompressionMode = set_compression_mode
    getCompressionMode = get_compression_mode
    setWrapMode = set_wrap_mode
    getWrapMode = get_wrap_mode
    setWrapU = set_wrap_u
    getWrapU = get_wrap_u
    determineWrapU = determine_wrap_u
    setWrapV = set_wrap_v
    getWrapV = get_wrap_v
    determineWrapV = determine_wrap_v
    setWrapW = set_wrap_w
    getWrapW = get_wrap_w
    determineWrapW = determine_wrap_w
    setMinfilter = set_minfilter
    getMinfilter = get_minfilter
    setMagfilter = set_magfilter
    getMagfilter = get_magfilter
    setAnisotropicDegree = set_anisotropic_degree
    clearAnisotropicDegree = clear_anisotropic_degree
    hasAnisotropicDegree = has_anisotropic_degree
    getAnisotropicDegree = get_anisotropic_degree
    setEnvType = set_env_type
    getEnvType = get_env_type
    affectsPolygonAlpha = affects_polygon_alpha
    setCombineMode = set_combine_mode
    getCombineMode = get_combine_mode
    setCombineSource = set_combine_source
    getCombineSource = get_combine_source
    setCombineOperand = set_combine_operand
    getCombineOperand = get_combine_operand
    setSavedResult = set_saved_result
    getSavedResult = get_saved_result
    setTexGen = set_tex_gen
    getTexGen = get_tex_gen
    setQualityLevel = set_quality_level
    getQualityLevel = get_quality_level
    setStageName = set_stage_name
    clearStageName = clear_stage_name
    hasStageName = has_stage_name
    getStageName = get_stage_name
    setPriority = set_priority
    clearPriority = clear_priority
    hasPriority = has_priority
    getPriority = get_priority
    setColor = set_color
    clearColor = clear_color
    hasColor = has_color
    getColor = get_color
    setBorderColor = set_border_color
    clearBorderColor = clear_border_color
    hasBorderColor = has_border_color
    getBorderColor = get_border_color
    setUvName = set_uv_name
    clearUvName = clear_uv_name
    hasUvName = has_uv_name
    getUvName = get_uv_name
    setRgbScale = set_rgb_scale
    clearRgbScale = clear_rgb_scale
    hasRgbScale = has_rgb_scale
    getRgbScale = get_rgb_scale
    setAlphaScale = set_alpha_scale
    clearAlphaScale = clear_alpha_scale
    hasAlphaScale = has_alpha_scale
    getAlphaScale = get_alpha_scale
    setAlphaFilename = set_alpha_filename
    clearAlphaFilename = clear_alpha_filename
    hasAlphaFilename = has_alpha_filename
    getAlphaFilename = get_alpha_filename
    setAlphaFullpath = set_alpha_fullpath
    getAlphaFullpath = get_alpha_fullpath
    setAlphaFileChannel = set_alpha_file_channel
    clearAlphaFileChannel = clear_alpha_file_channel
    hasAlphaFileChannel = has_alpha_file_channel
    getAlphaFileChannel = get_alpha_file_channel
    setMultiview = set_multiview
    getMultiview = get_multiview
    setNumViews = set_num_views
    clearNumViews = clear_num_views
    hasNumViews = has_num_views
    getNumViews = get_num_views
    setReadMipmaps = set_read_mipmaps
    getReadMipmaps = get_read_mipmaps
    setMinLod = set_min_lod
    clearMinLod = clear_min_lod
    hasMinLod = has_min_lod
    getMinLod = get_min_lod
    setMaxLod = set_max_lod
    clearMaxLod = clear_max_lod
    hasMaxLod = has_max_lod
    getMaxLod = get_max_lod
    setLodBias = set_lod_bias
    clearLodBias = clear_lod_bias
    hasLodBias = has_lod_bias
    getLodBias = get_lod_bias
    clearMultitexture = clear_multitexture
    multitextureOver = multitexture_over
    getMultitextureSort = get_multitexture_sort
    stringTextureType = string_texture_type
    stringFormat = string_format
    stringCompressionMode = string_compression_mode
    stringWrapMode = string_wrap_mode
    stringFilterType = string_filter_type
    stringEnvType = string_env_type
    stringCombineMode = string_combine_mode
    stringCombineSource = string_combine_source
    stringCombineOperand = string_combine_operand
    stringTexGen = string_tex_gen
    stringQualityLevel = string_quality_level
    getClassType = get_class_type
    EBasename = E_basename
    EExtension = E_extension
    EDirname = E_dirname
    ECompleteFilename = E_complete_filename
    ETransform = E_transform
    EAttributes = E_attributes
    ETrefName = E_tref_name
    TTUnspecified = TT_unspecified
    TT1dTexture = TT_1d_texture
    TT2dTexture = TT_2d_texture
    TT3dTexture = TT_3d_texture
    TTCubeMap = TT_cube_map
    FUnspecified = F_unspecified
    FRgba = F_rgba
    FRgbm = F_rgbm
    FRgba12 = F_rgba12
    FRgba8 = F_rgba8
    FRgba4 = F_rgba4
    FRgba5 = F_rgba5
    FRgb = F_rgb
    FRgb12 = F_rgb12
    FRgb8 = F_rgb8
    FRgb5 = F_rgb5
    FRgb332 = F_rgb332
    FRed = F_red
    FGreen = F_green
    FBlue = F_blue
    FAlpha = F_alpha
    FLuminance = F_luminance
    FLuminanceAlpha = F_luminance_alpha
    FLuminanceAlphamask = F_luminance_alphamask
    FSrgb = F_srgb
    FSrgbAlpha = F_srgb_alpha
    CMDefault = CM_default
    CMOff = CM_off
    CMOn = CM_on
    CMFxt1 = CM_fxt1
    CMDxt1 = CM_dxt1
    CMDxt2 = CM_dxt2
    CMDxt3 = CM_dxt3
    CMDxt4 = CM_dxt4
    CMDxt5 = CM_dxt5
    WMUnspecified = WM_unspecified
    WMClamp = WM_clamp
    WMRepeat = WM_repeat
    WMMirror = WM_mirror
    WMMirrorOnce = WM_mirror_once
    WMBorderColor = WM_border_color
    FTUnspecified = FT_unspecified
    FTNearest = FT_nearest
    FTLinear = FT_linear
    FTNearestMipmapNearest = FT_nearest_mipmap_nearest
    FTLinearMipmapNearest = FT_linear_mipmap_nearest
    FTNearestMipmapLinear = FT_nearest_mipmap_linear
    FTLinearMipmapLinear = FT_linear_mipmap_linear
    ETUnspecified = ET_unspecified
    ETModulate = ET_modulate
    ETDecal = ET_decal
    ETBlend = ET_blend
    ETReplace = ET_replace
    ETAdd = ET_add
    ETBlendColorScale = ET_blend_color_scale
    ETModulateGlow = ET_modulate_glow
    ETModulateGloss = ET_modulate_gloss
    ETNormal = ET_normal
    ETNormalHeight = ET_normal_height
    ETGlow = ET_glow
    ETGloss = ET_gloss
    ETHeight = ET_height
    ETSelector = ET_selector
    ETNormalGloss = ET_normal_gloss
    ETEmission = ET_emission
    CMUnspecified = CM_unspecified
    CMReplace = CM_replace
    CMModulate = CM_modulate
    CMAdd = CM_add
    CMAddSigned = CM_add_signed
    CMInterpolate = CM_interpolate
    CMSubtract = CM_subtract
    CMDot3Rgb = CM_dot3_rgb
    CMDot3Rgba = CM_dot3_rgba
    CCRgb = CC_rgb
    CCAlpha = CC_alpha
    CCNumChannels = CC_num_channels
    CINumIndices = CI_num_indices
    CSUnspecified = CS_unspecified
    CSTexture = CS_texture
    CSConstant = CS_constant
    CSPrimaryColor = CS_primary_color
    CSPrevious = CS_previous
    CSConstantColorScale = CS_constant_color_scale
    CSLastSavedResult = CS_last_saved_result
    COUnspecified = CO_unspecified
    COSrcColor = CO_src_color
    COOneMinusSrcColor = CO_one_minus_src_color
    COSrcAlpha = CO_src_alpha
    COOneMinusSrcAlpha = CO_one_minus_src_alpha
    TGUnspecified = TG_unspecified
    TGEyeSphereMap = TG_eye_sphere_map
    TGWorldCubeMap = TG_world_cube_map
    TGEyeCubeMap = TG_eye_cube_map
    TGWorldNormal = TG_world_normal
    TGEyeNormal = TG_eye_normal
    TGWorldPosition = TG_world_position
    TGEyePosition = TG_eye_position
    TGPointSprite = TG_point_sprite
    QLUnspecified = QL_unspecified
    QLDefault = QL_default
    QLFastest = QL_fastest
    QLNormal = QL_normal
    QLBest = QL_best

class EggMaterial(EggNode):
    DtoolClassDict: ClassVar[dict[str, Any]]
    base: LVecBase4f
    diff: LVecBase4f
    amb: LVecBase4f
    emit: LVecBase4f
    spec: LVecBase4f
    shininess: float
    roughness: float
    metallic: float
    ior: float
    local: bool
    E_attributes: ClassVar[Literal[1]]
    E_mref_name: ClassVar[Literal[2]]
    @overload
    def __init__(self, copy: EggMaterial) -> None: ...
    @overload
    def __init__(self, mref_name: str) -> None: ...
    def is_equivalent_to(self, other: EggMaterial, eq: int) -> bool: ...
    def sorts_less_than(self, other: EggMaterial, eq: int) -> bool: ...
    def set_base(self, base: _Vec4f) -> None: ...
    def clear_base(self) -> None: ...
    def has_base(self) -> bool: ...
    def get_base(self) -> LVecBase4f: ...
    def set_diff(self, diff: _Vec4f) -> None: ...
    def clear_diff(self) -> None: ...
    def has_diff(self) -> bool: ...
    def get_diff(self) -> LVecBase4f: ...
    def set_amb(self, amb: _Vec4f) -> None: ...
    def clear_amb(self) -> None: ...
    def has_amb(self) -> bool: ...
    def get_amb(self) -> LVecBase4f: ...
    def set_emit(self, emit: _Vec4f) -> None: ...
    def clear_emit(self) -> None: ...
    def has_emit(self) -> bool: ...
    def get_emit(self) -> LVecBase4f: ...
    def set_spec(self, spec: _Vec4f) -> None: ...
    def clear_spec(self) -> None: ...
    def has_spec(self) -> bool: ...
    def get_spec(self) -> LVecBase4f: ...
    def set_shininess(self, shininess: float) -> None: ...
    def clear_shininess(self) -> None: ...
    def has_shininess(self) -> bool: ...
    def get_shininess(self) -> float: ...
    def set_roughness(self, roughness: float) -> None: ...
    def clear_roughness(self) -> None: ...
    def has_roughness(self) -> bool: ...
    def get_roughness(self) -> float: ...
    def set_metallic(self, metallic: float) -> None: ...
    def clear_metallic(self) -> None: ...
    def has_metallic(self) -> bool: ...
    def get_metallic(self) -> float: ...
    def set_ior(self, ior: float) -> None: ...
    def clear_ior(self) -> None: ...
    def has_ior(self) -> bool: ...
    def get_ior(self) -> float: ...
    def set_local(self, local: bool) -> None: ...
    def clear_local(self) -> None: ...
    def has_local(self) -> bool: ...
    def get_local(self) -> bool: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    isEquivalentTo = is_equivalent_to
    sortsLessThan = sorts_less_than
    setBase = set_base
    clearBase = clear_base
    hasBase = has_base
    getBase = get_base
    setDiff = set_diff
    clearDiff = clear_diff
    hasDiff = has_diff
    getDiff = get_diff
    setAmb = set_amb
    clearAmb = clear_amb
    hasAmb = has_amb
    getAmb = get_amb
    setEmit = set_emit
    clearEmit = clear_emit
    hasEmit = has_emit
    getEmit = get_emit
    setSpec = set_spec
    clearSpec = clear_spec
    hasSpec = has_spec
    getSpec = get_spec
    setShininess = set_shininess
    clearShininess = clear_shininess
    hasShininess = has_shininess
    getShininess = get_shininess
    setRoughness = set_roughness
    clearRoughness = clear_roughness
    hasRoughness = has_roughness
    getRoughness = get_roughness
    setMetallic = set_metallic
    clearMetallic = clear_metallic
    hasMetallic = has_metallic
    getMetallic = get_metallic
    setIor = set_ior
    clearIor = clear_ior
    hasIor = has_ior
    getIor = get_ior
    setLocal = set_local
    clearLocal = clear_local
    hasLocal = has_local
    getLocal = get_local
    getClassType = get_class_type
    EAttributes = E_attributes
    EMrefName = E_mref_name

class EggPrimitive(EggNode, EggAttributes, EggRenderMode):
    """A base class for any of a number of kinds of geometry primitives: polygons,
    point lights, nurbs patches, parametrics curves, etc.  Things with a set of
    vertices and some rendering properties like color.
    
    An EggPrimitive is an STL-style container of pointers to EggVertex's.  In
    fact, it IS a vector, and can be manipulated in all the ways that vectors
    can.  However, it is necessary that all vertices belong to the same vertex
    pool.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    material: EggMaterial
    bface_flag: bool
    vertices: Sequence[EggVertex]
    S_unknown: ClassVar[Literal[0]]
    S_overall: ClassVar[Literal[1]]
    S_per_face: ClassVar[Literal[2]]
    S_per_vertex: ClassVar[Literal[3]]
    @property
    def sort_name(self) -> str: ...
    @property
    def shading(self) -> _EggPrimitive_Shading: ...
    @property
    def connected_shading(self) -> _EggPrimitive_Shading: ...
    @property
    def textures(self) -> Sequence[EggTexture]: ...
    @property
    def pool(self) -> EggVertexPool: ...
    def upcast_to_EggNode(self) -> EggNode: ...
    def upcast_to_EggAttributes(self) -> EggAttributes: ...
    def upcast_to_EggRenderMode(self) -> EggRenderMode: ...
    def assign(self, copy: EggPrimitive) -> EggPrimitive: ...
    def make_copy(self) -> EggPrimitive: ...
    def determine_alpha_mode(self) -> EggRenderMode: ...
    def determine_depth_write_mode(self) -> EggRenderMode: ...
    def determine_depth_test_mode(self) -> EggRenderMode: ...
    def determine_visibility_mode(self) -> EggRenderMode: ...
    def determine_depth_offset(self) -> EggRenderMode: ...
    def determine_draw_order(self) -> EggRenderMode: ...
    def determine_bin(self) -> EggRenderMode: ...
    def get_sort_name(self) -> str: ...
    def get_shading(self) -> _EggPrimitive_Shading: ...
    def clear_connected_shading(self) -> None: ...
    def get_connected_shading(self) -> _EggPrimitive_Shading: ...
    def set_texture(self, texture: EggTexture) -> None: ...
    @overload
    def has_texture(self) -> bool: ...
    @overload
    def has_texture(self, texture: EggTexture) -> bool: ...
    @overload
    def get_texture(self) -> EggTexture: ...
    @overload
    def get_texture(self, n: int) -> EggTexture: ...
    def add_texture(self, texture: EggTexture) -> None: ...
    def clear_texture(self) -> None: ...
    def get_num_textures(self) -> int: ...
    def set_material(self, material: EggMaterial) -> None: ...
    def clear_material(self) -> None: ...
    def get_material(self) -> EggMaterial: ...
    def has_material(self) -> bool: ...
    def set_bface_flag(self, flag: bool) -> None: ...
    def get_bface_flag(self) -> bool: ...
    def copy_attributes(self, other: EggAttributes) -> None: ...
    def has_vertex_normal(self) -> bool: ...
    def has_vertex_color(self) -> bool: ...
    def unify_attributes(self, shading: _EggPrimitive_Shading) -> None: ...
    def apply_last_attribute(self) -> None: ...
    def apply_first_attribute(self) -> None: ...
    def post_apply_flat_attribute(self) -> None: ...
    def reverse_vertex_ordering(self) -> None: ...
    def cleanup(self) -> bool: ...
    def remove_doubled_verts(self, closed: bool) -> None: ...
    def remove_nonunique_verts(self) -> None: ...
    def has_primitives(self) -> bool: ...
    def joint_has_primitives(self) -> bool: ...
    def has_normals(self) -> bool: ...
    def clear(self) -> None: ...
    def add_vertex(self, vertex: EggVertex) -> EggVertex: ...
    @overload
    def remove_vertex(self, vertex: EggVertex) -> EggVertex: ...
    @overload
    def remove_vertex(self, index: int) -> None: ...
    def copy_vertices(self, other: EggPrimitive) -> None: ...
    def get_num_vertices(self) -> int: ...
    def get_vertex(self, index: int) -> EggVertex: ...
    def set_vertex(self, index: int, vertex: EggVertex) -> None: ...
    def insert_vertex(self, index: int, vertex: EggVertex) -> None: ...
    def get_pool(self) -> EggVertexPool: ...
    def write(self, out: ostream, indent_level: int) -> None: ...
    def test_vref_integrity(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_textures(self) -> tuple[EggTexture, ...]: ...
    def get_vertices(self) -> tuple[EggVertex, ...]: ...
    upcastToEggNode = upcast_to_EggNode
    upcastToEggAttributes = upcast_to_EggAttributes
    upcastToEggRenderMode = upcast_to_EggRenderMode
    makeCopy = make_copy
    determineAlphaMode = determine_alpha_mode
    determineDepthWriteMode = determine_depth_write_mode
    determineDepthTestMode = determine_depth_test_mode
    determineVisibilityMode = determine_visibility_mode
    determineDepthOffset = determine_depth_offset
    determineDrawOrder = determine_draw_order
    determineBin = determine_bin
    getSortName = get_sort_name
    getShading = get_shading
    clearConnectedShading = clear_connected_shading
    getConnectedShading = get_connected_shading
    setTexture = set_texture
    hasTexture = has_texture
    getTexture = get_texture
    addTexture = add_texture
    clearTexture = clear_texture
    getNumTextures = get_num_textures
    setMaterial = set_material
    clearMaterial = clear_material
    getMaterial = get_material
    hasMaterial = has_material
    setBfaceFlag = set_bface_flag
    getBfaceFlag = get_bface_flag
    copyAttributes = copy_attributes
    hasVertexNormal = has_vertex_normal
    hasVertexColor = has_vertex_color
    unifyAttributes = unify_attributes
    applyLastAttribute = apply_last_attribute
    applyFirstAttribute = apply_first_attribute
    postApplyFlatAttribute = post_apply_flat_attribute
    reverseVertexOrdering = reverse_vertex_ordering
    removeDoubledVerts = remove_doubled_verts
    removeNonuniqueVerts = remove_nonunique_verts
    hasPrimitives = has_primitives
    jointHasPrimitives = joint_has_primitives
    hasNormals = has_normals
    addVertex = add_vertex
    removeVertex = remove_vertex
    copyVertices = copy_vertices
    getNumVertices = get_num_vertices
    getVertex = get_vertex
    setVertex = set_vertex
    insertVertex = insert_vertex
    getPool = get_pool
    testVrefIntegrity = test_vref_integrity
    getClassType = get_class_type
    getTextures = get_textures
    getVertices = get_vertices
    SUnknown = S_unknown
    SOverall = S_overall
    SPerFace = S_per_face
    SPerVertex = S_per_vertex

class EggCompositePrimitive(EggPrimitive):
    """The base class for primitives such as triangle strips and triangle fans,
    which include several component triangles, each of which might have its own
    color and/or normal.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    components: Sequence[EggAttributes]
    def assign(self, copy: EggCompositePrimitive) -> EggCompositePrimitive: ...
    def get_num_components(self) -> int: ...
    def get_component(self, i: int) -> EggAttributes: ...
    def set_component(self, i: int, attrib: EggAttributes) -> None: ...
    def triangulate_into(self, container: EggGroupNode) -> bool: ...
    def triangulate_in_place(self) -> EggCompositePrimitive: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_components(self) -> tuple[EggAttributes, ...]: ...
    getNumComponents = get_num_components
    getComponent = get_component
    setComponent = set_component
    triangulateInto = triangulate_into
    triangulateInPlace = triangulate_in_place
    getClassType = get_class_type
    getComponents = get_components

class EggData(EggGroupNode):
    """This is the primary interface into all the egg data, and the root of the
    egg file structure.  An EggData structure corresponds exactly with an egg
    file on the disk.
    
    The EggData class inherits from EggGroupNode its collection of children,
    which are accessed by using the EggData itself as an STL container with
    begin() and end() calls.  The children of the EggData class are the
    toplevel nodes in the egg file.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    auto_resolve_externals: bool
    coordinate_system: _CoordinateSystem
    egg_filename: Filename
    egg_timestamp: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: EggData) -> None: ...
    def assign(self, copy: EggData) -> EggData: ...
    @staticmethod
    def resolve_egg_filename(egg_filename: _Filename, searchpath: ConfigVariableSearchPath | DSearchPath = ...) -> bool: ...
    @overload
    def read(self, _in: istream) -> bool: ...
    @overload
    def read(self, filename: _Filename, display_name: str = ...) -> bool: ...
    def merge(self, other: EggData) -> None: ...
    @overload
    def load_externals(self, searchpath: ConfigVariableSearchPath | DSearchPath = ...) -> bool: ...
    @overload
    def load_externals(self, searchpath: ConfigVariableSearchPath | DSearchPath, record: BamCacheRecord) -> bool: ...
    def collapse_equivalent_textures(self) -> int: ...
    def collapse_equivalent_materials(self) -> int: ...
    @overload
    def write_egg(self, filename: _Filename) -> bool: ...
    @overload
    def write_egg(self, out: ostream) -> bool: ...
    def set_auto_resolve_externals(self, resolve: bool) -> None: ...
    def get_auto_resolve_externals(self) -> bool: ...
    def original_had_absolute_pathnames(self) -> bool: ...
    def set_coordinate_system(self, coordsys: _CoordinateSystem) -> None: ...
    def get_coordinate_system(self) -> _CoordinateSystem: ...
    def set_egg_filename(self, egg_filename: _Filename) -> None: ...
    def get_egg_filename(self) -> Filename: ...
    def set_egg_timestamp(self, egg_timestamp: int) -> None: ...
    def get_egg_timestamp(self) -> int: ...
    def recompute_vertex_normals(self, threshold: float) -> None: ...
    def recompute_polygon_normals(self) -> None: ...
    def strip_normals(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    resolveEggFilename = resolve_egg_filename
    loadExternals = load_externals
    collapseEquivalentTextures = collapse_equivalent_textures
    collapseEquivalentMaterials = collapse_equivalent_materials
    writeEgg = write_egg
    setAutoResolveExternals = set_auto_resolve_externals
    getAutoResolveExternals = get_auto_resolve_externals
    originalHadAbsolutePathnames = original_had_absolute_pathnames
    setCoordinateSystem = set_coordinate_system
    getCoordinateSystem = get_coordinate_system
    setEggFilename = set_egg_filename
    getEggFilename = get_egg_filename
    setEggTimestamp = set_egg_timestamp
    getEggTimestamp = get_egg_timestamp
    recomputeVertexNormals = recompute_vertex_normals
    recomputePolygonNormals = recompute_polygon_normals
    stripNormals = strip_normals
    getClassType = get_class_type

class EggCoordinateSystem(EggNode):
    """The <CoordinateSystem> entry at the top of an egg file.  Don't confuse this
    with the enum EggData::CoordinateSystem, which is the value contained by
    this entry.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, value: _CoordinateSystem = ...) -> None: ...
    @overload
    def __init__(self, copy: EggCoordinateSystem | _CoordinateSystem) -> None: ...
    def set_value(self, value: _CoordinateSystem) -> None: ...
    def get_value(self) -> _CoordinateSystem: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setValue = set_value
    getValue = get_value
    getClassType = get_class_type

class EggCurve(EggPrimitive):
    """A parametric curve of some kind.  See EggNurbsCurve."""
    DtoolClassDict: ClassVar[dict[str, Any]]
    CT_none: ClassVar[Literal[0]]
    CT_xyz: ClassVar[Literal[1]]
    CT_hpr: ClassVar[Literal[2]]
    CT_t: ClassVar[Literal[3]]
    def assign(self, copy: EggCurve) -> EggCurve: ...
    def set_subdiv(self, subdiv: int) -> None: ...
    def get_subdiv(self) -> int: ...
    def set_curve_type(self, type: _EggCurve_CurveType) -> None: ...
    def get_curve_type(self) -> _EggCurve_CurveType: ...
    @staticmethod
    def string_curve_type(string: str) -> _EggCurve_CurveType: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setSubdiv = set_subdiv
    getSubdiv = get_subdiv
    setCurveType = set_curve_type
    getCurveType = get_curve_type
    stringCurveType = string_curve_type
    getClassType = get_class_type
    CTNone = CT_none
    CTXyz = CT_xyz
    CTHpr = CT_hpr
    CTT = CT_t

class EggExternalReference(EggFilenameNode):
    """Defines a reference to another egg file which should be inserted at this
    point.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, copy: EggExternalReference) -> None: ...
    @overload
    def __init__(self, node_name: str, filename: str) -> None: ...
    def assign(self, copy: EggExternalReference) -> EggExternalReference: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class EggNameUniquifier(EggObject):
    """This is a handy class for guaranteeing unique node names in an egg
    hierarchy.  It is an abstract class; to use it you must subclass off of it.
    See the comment above.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    def clear(self) -> None: ...
    def uniquify(self, node: EggNode) -> None: ...
    def get_node(self, category: str, name: str) -> EggNode: ...
    def has_name(self, category: str, name: str) -> bool: ...
    def add_name(self, category: str, name: str, node: EggNode = ...) -> bool: ...
    def get_category(self, node: EggNode) -> str: ...
    def filter_name(self, node: EggNode) -> str: ...
    def generate_name(self, node: EggNode, category: str, index: int) -> str: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getNode = get_node
    hasName = has_name
    addName = add_name
    getCategory = get_category
    filterName = filter_name
    generateName = generate_name
    getClassType = get_class_type

class EggGroupUniquifier(EggNameUniquifier):
    """This is a specialization of EggNameUniquifier to generate unique names for
    EggGroup nodes.  It's not called automatically; you must invoke it yourself
    if you want it.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self, filter_names: bool = ...) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class EggLine(EggCompositePrimitive):
    """A line segment, or a series of connected line segments, defined by a <Line>
    entry.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggLine) -> None: ...
    def assign(self, copy: EggLine) -> EggLine: ...
    def has_thick(self) -> bool: ...
    def get_thick(self) -> float: ...
    def set_thick(self, thick: float) -> None: ...
    def clear_thick(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    hasThick = has_thick
    getThick = get_thick
    setThick = set_thick
    clearThick = clear_thick
    getClassType = get_class_type

class EggMaterialCollection:
    """This is a collection of materials by MRef name.  It can extract the
    materials from an egg file and sort them all together; it can also manage
    the creation of unique materials and the assignment of unique MRef names.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: EggMaterialCollection) -> None: ...
    def assign(self, copy: EggMaterialCollection) -> EggMaterialCollection: ...
    def clear(self) -> None: ...
    def extract_materials(self, node: EggGroupNode) -> int: ...
    def find_used_materials(self, node: EggNode) -> int: ...
    def remove_unused_materials(self, node: EggNode) -> None: ...
    def collapse_equivalent_materials(self, eq: int, node: EggGroupNode) -> int: ...
    def uniquify_mrefs(self) -> None: ...
    def sort_by_mref(self) -> None: ...
    def add_material(self, material: EggMaterial) -> bool: ...
    def remove_material(self, material: EggMaterial) -> bool: ...
    def create_unique_material(self, copy: EggMaterial, eq: int) -> EggMaterial: ...
    def find_mref(self, mref_name: str) -> EggMaterial: ...
    extractMaterials = extract_materials
    findUsedMaterials = find_used_materials
    removeUnusedMaterials = remove_unused_materials
    collapseEquivalentMaterials = collapse_equivalent_materials
    uniquifyMrefs = uniquify_mrefs
    sortByMref = sort_by_mref
    addMaterial = add_material
    removeMaterial = remove_material
    createUniqueMaterial = create_unique_material
    findMref = find_mref

class EggPolygon(EggPrimitive):
    """A single polygon."""
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggPolygon) -> None: ...
    def assign(self, copy: EggPolygon) -> EggPolygon: ...
    def calculate_normal(self, result: _Vec3d, cs: _CoordinateSystem = ...) -> bool: ...
    def is_planar(self) -> bool: ...
    def recompute_polygon_normal(self, cs: _CoordinateSystem = ...) -> bool: ...
    def triangulate_into(self, container: EggGroupNode, convex_also: bool) -> bool: ...
    def triangulate_in_place(self, convex_also: bool) -> EggPolygon: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    calculateNormal = calculate_normal
    isPlanar = is_planar
    recomputePolygonNormal = recompute_polygon_normal
    triangulateInto = triangulate_into
    triangulateInPlace = triangulate_in_place
    getClassType = get_class_type

class EggNurbsCurve(EggCurve):
    """A parametric NURBS curve."""
    DtoolClassDict: ClassVar[dict[str, Any]]
    order: int
    knots: Sequence[float]
    @property
    def degree(self) -> int: ...
    @property
    def closed(self) -> bool: ...
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggNurbsCurve) -> None: ...
    def assign(self, copy: EggNurbsCurve) -> EggNurbsCurve: ...
    def setup(self, order: int, num_knots: int) -> None: ...
    def set_order(self, order: int) -> None: ...
    def set_num_knots(self, num: int) -> None: ...
    def set_knot(self, k: int, value: float) -> None: ...
    def is_valid(self) -> bool: ...
    def get_order(self) -> int: ...
    def get_degree(self) -> int: ...
    def get_num_knots(self) -> int: ...
    def get_num_cvs(self) -> int: ...
    def is_closed(self) -> bool: ...
    def get_knot(self, k: int) -> float: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_knots(self) -> tuple[float, ...]: ...
    setOrder = set_order
    setNumKnots = set_num_knots
    setKnot = set_knot
    isValid = is_valid
    getOrder = get_order
    getDegree = get_degree
    getNumKnots = get_num_knots
    getNumCvs = get_num_cvs
    isClosed = is_closed
    getKnot = get_knot
    getClassType = get_class_type
    getKnots = get_knots

class EggSurface(EggPrimitive):
    """A parametric surface of some kind.  See EggNurbsSurface."""
    DtoolClassDict: ClassVar[dict[str, Any]]
    def assign(self, copy: EggSurface) -> EggSurface: ...
    def set_u_subdiv(self, subdiv: int) -> None: ...
    def get_u_subdiv(self) -> int: ...
    def set_v_subdiv(self, subdiv: int) -> None: ...
    def get_v_subdiv(self) -> int: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setUSubdiv = set_u_subdiv
    getUSubdiv = get_u_subdiv
    setVSubdiv = set_v_subdiv
    getVSubdiv = get_v_subdiv
    getClassType = get_class_type

class EggNurbsSurface(EggSurface):
    """A parametric NURBS surface."""
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggNurbsSurface) -> None: ...
    def assign(self, copy: EggNurbsSurface) -> EggNurbsSurface: ...
    def setup(self, u_order: int, v_order: int, num_u_knots: int, num_v_knots: int) -> None: ...
    def set_u_order(self, u_order: int) -> None: ...
    def set_v_order(self, v_order: int) -> None: ...
    def set_num_u_knots(self, num: int) -> None: ...
    def set_num_v_knots(self, num: int) -> None: ...
    def set_u_knot(self, k: int, value: float) -> None: ...
    def set_v_knot(self, k: int, value: float) -> None: ...
    def set_cv(self, ui: int, vi: int, vertex: EggVertex) -> None: ...
    def is_valid(self) -> bool: ...
    def get_u_order(self) -> int: ...
    def get_v_order(self) -> int: ...
    def get_u_degree(self) -> int: ...
    def get_v_degree(self) -> int: ...
    def get_num_u_knots(self) -> int: ...
    def get_num_v_knots(self) -> int: ...
    def get_num_u_cvs(self) -> int: ...
    def get_num_v_cvs(self) -> int: ...
    def get_num_cvs(self) -> int: ...
    def get_u_index(self, vertex_index: int) -> int: ...
    def get_v_index(self, vertex_index: int) -> int: ...
    def get_vertex_index(self, ui: int, vi: int) -> int: ...
    def is_closed_u(self) -> bool: ...
    def is_closed_v(self) -> bool: ...
    def get_u_knot(self, k: int) -> float: ...
    def get_v_knot(self, k: int) -> float: ...
    def get_cv(self, ui: int, vi: int) -> EggVertex: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    def get_u_knots(self) -> tuple[float, ...]: ...
    def get_v_knots(self) -> tuple[float, ...]: ...
    setUOrder = set_u_order
    setVOrder = set_v_order
    setNumUKnots = set_num_u_knots
    setNumVKnots = set_num_v_knots
    setUKnot = set_u_knot
    setVKnot = set_v_knot
    setCv = set_cv
    isValid = is_valid
    getUOrder = get_u_order
    getVOrder = get_v_order
    getUDegree = get_u_degree
    getVDegree = get_v_degree
    getNumUKnots = get_num_u_knots
    getNumVKnots = get_num_v_knots
    getNumUCvs = get_num_u_cvs
    getNumVCvs = get_num_v_cvs
    getNumCvs = get_num_cvs
    getUIndex = get_u_index
    getVIndex = get_v_index
    getVertexIndex = get_vertex_index
    isClosedU = is_closed_u
    isClosedV = is_closed_v
    getUKnot = get_u_knot
    getVKnot = get_v_knot
    getCv = get_cv
    getClassType = get_class_type
    getUKnots = get_u_knots
    getVKnots = get_v_knots

class EggPatch(EggPrimitive):
    """A single "patch", a special primitive to be rendered only with a
    tessellation shader.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggPatch) -> None: ...
    def assign(self, copy: EggPatch) -> EggPatch: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class EggPoint(EggPrimitive):
    """A single point, or a collection of points as defined by a single
    <PointLight> entry.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggPoint) -> None: ...
    def assign(self, copy: EggPoint) -> EggPoint: ...
    def has_thick(self) -> bool: ...
    def get_thick(self) -> float: ...
    def set_thick(self, thick: float) -> None: ...
    def clear_thick(self) -> None: ...
    def has_perspective(self) -> bool: ...
    def get_perspective(self) -> bool: ...
    def set_perspective(self, perspective: bool) -> None: ...
    def clear_perspective(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    hasThick = has_thick
    getThick = get_thick
    setThick = set_thick
    clearThick = clear_thick
    hasPerspective = has_perspective
    getPerspective = get_perspective
    setPerspective = set_perspective
    clearPerspective = clear_perspective
    getClassType = get_class_type

class EggPolysetMaker(EggBinMaker):
    """A specialization on EggBinMaker for making polysets that share the same
    basic rendering characteristic.  This really just defines the example
    functions described in the leading comment to EggBinMaker.
    
    It makes some common assumptions about how polysets should be grouped; if
    these are not sufficient, you can always rederive your own further
    specialization of this class.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    BN_none: ClassVar[Literal[0]]
    BN_polyset: ClassVar[Literal[1]]
    P_has_texture: ClassVar[Literal[1]]
    P_texture: ClassVar[Literal[2]]
    P_has_material: ClassVar[Literal[4]]
    P_material: ClassVar[Literal[8]]
    P_has_poly_color: ClassVar[Literal[16]]
    P_poly_color: ClassVar[Literal[32]]
    P_has_poly_normal: ClassVar[Literal[64]]
    P_has_vertex_normal: ClassVar[Literal[128]]
    P_has_vertex_color: ClassVar[Literal[256]]
    P_bface: ClassVar[Literal[512]]
    def __init__(self) -> None: ...
    def set_properties(self, properties: int) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setProperties = set_properties
    getClassType = get_class_type
    BNNone = BN_none
    BNPolyset = BN_polyset
    PHasTexture = P_has_texture
    PTexture = P_texture
    PHasMaterial = P_has_material
    PMaterial = P_material
    PHasPolyColor = P_has_poly_color
    PPolyColor = P_poly_color
    PHasPolyNormal = P_has_poly_normal
    PHasVertexNormal = P_has_vertex_normal
    PHasVertexColor = P_has_vertex_color
    PBface = P_bface

class EggPoolUniquifier(EggNameUniquifier):
    """This is a specialization of EggNameUniquifier to generate unique names for
    textures, materials, and vertex pools prior to writing out an egg file.
    It's automatically called by EggData prior to writing out an egg file.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    def __init__(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class EggSAnimData(EggAnimData):
    """Corresponding to an <S$Anim> entry, this stores a single column of numbers,
    for instance for a morph target, or as one column in an EggXfmSAnim.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggSAnimData) -> None: ...
    def assign(self, copy: EggSAnimData) -> EggSAnimData: ...
    def get_num_rows(self) -> int: ...
    def get_value(self, row: int) -> float: ...
    def set_value(self, row: int, value: float) -> None: ...
    def optimize(self) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getNumRows = get_num_rows
    getValue = get_value
    setValue = set_value
    getClassType = get_class_type

class EggTable(EggGroupNode):
    """This corresponds to a <Table> or a <Bundle> entry.  As such, it doesn't
    actually contain a table of numbers, but it may be a parent to an
    EggSAnimData or an EggXfmAnimData, which do.  It may also be a parent to
    another <Table> or <Bundle>, establishing a hierarchy of tables.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    TT_invalid: ClassVar[Literal[0]]
    TT_table: ClassVar[Literal[1]]
    TT_bundle: ClassVar[Literal[2]]
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggTable) -> None: ...
    def assign(self, copy: EggTable) -> EggTable: ...
    def set_table_type(self, type: _EggTable_TableType) -> None: ...
    def get_table_type(self) -> _EggTable_TableType: ...
    def has_transform(self) -> bool: ...
    @staticmethod
    def string_table_type(string: str) -> _EggTable_TableType: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setTableType = set_table_type
    getTableType = get_table_type
    hasTransform = has_transform
    stringTableType = string_table_type
    getClassType = get_class_type
    TTInvalid = TT_invalid
    TTTable = TT_table
    TTBundle = TT_bundle

class EggTextureCollection:
    """This is a collection of textures by TRef name.  It can extract the textures
    from an egg file and sort them all together; it can also manage the
    creation of unique textures and the assignment of unique TRef names.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, copy: EggTextureCollection) -> None: ...
    def __getitem__(self, n: int) -> EggTexture: ...
    def __len__(self) -> int: ...
    def assign(self, copy: EggTextureCollection) -> EggTextureCollection: ...
    def clear(self) -> None: ...
    def extract_textures(self, node: EggGroupNode) -> int: ...
    def is_empty(self) -> bool: ...
    def get_num_textures(self) -> int: ...
    def get_texture(self, index: int) -> EggTexture: ...
    def find_used_textures(self, node: EggNode) -> int: ...
    def remove_unused_textures(self, node: EggNode) -> None: ...
    def collapse_equivalent_textures(self, eq: int, node: EggGroupNode) -> int: ...
    def uniquify_trefs(self) -> None: ...
    def sort_by_tref(self) -> None: ...
    def sort_by_basename(self) -> None: ...
    def add_texture(self, texture: EggTexture) -> bool: ...
    def remove_texture(self, texture: EggTexture) -> bool: ...
    def create_unique_texture(self, copy: EggTexture, eq: int) -> EggTexture: ...
    def find_tref(self, tref_name: str) -> EggTexture: ...
    def find_filename(self, filename: _Filename) -> EggTexture: ...
    def get_textures(self) -> tuple[EggTexture, ...]: ...
    extractTextures = extract_textures
    isEmpty = is_empty
    getNumTextures = get_num_textures
    getTexture = get_texture
    findUsedTextures = find_used_textures
    removeUnusedTextures = remove_unused_textures
    collapseEquivalentTextures = collapse_equivalent_textures
    uniquifyTrefs = uniquify_trefs
    sortByTref = sort_by_tref
    sortByBasename = sort_by_basename
    addTexture = add_texture
    removeTexture = remove_texture
    createUniqueTexture = create_unique_texture
    findTref = find_tref
    findFilename = find_filename
    getTextures = get_textures

class EggTriangleFan(EggCompositePrimitive):
    """A connected fan of triangles.  This does not normally appear in an egg
    file; it is typically generated as a result of meshing.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggTriangleFan) -> None: ...
    def assign(self, copy: EggTriangleFan) -> EggTriangleFan: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class EggTriangleStrip(EggCompositePrimitive):
    """A connected strip of triangles.  This does not normally appear in an egg
    file; it is typically generated as a result of meshing.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ...) -> None: ...
    @overload
    def __init__(self, copy: EggTriangleStrip) -> None: ...
    def assign(self, copy: EggTriangleStrip) -> EggTriangleStrip: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    getClassType = get_class_type

class EggXfmSAnim(EggGroupNode):
    """This corresponds to an <Xfm$Anim_S$> entry, which is a collection of up to
    nine <S$Anim> entries that specify the nine components of a transformation.
    It's implemented as a group that can contain any number of EggSAnimData
    children.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ..., cs: _CoordinateSystem = ...) -> None: ...
    @overload
    def __init__(self, convert_from: EggXfmAnimData) -> None: ...
    @overload
    def __init__(self, copy: EggXfmSAnim) -> None: ...
    def assign(self, copy: EggXfmSAnim) -> EggXfmSAnim: ...
    def set_fps(self, fps: float) -> None: ...
    def clear_fps(self) -> None: ...
    def has_fps(self) -> bool: ...
    def get_fps(self) -> float: ...
    def set_order(self, order: str) -> None: ...
    def clear_order(self) -> None: ...
    def has_order(self) -> bool: ...
    def get_order(self) -> str: ...
    @staticmethod
    def get_standard_order() -> str: ...
    def get_coordinate_system(self) -> _CoordinateSystem: ...
    def optimize(self) -> None: ...
    def optimize_to_standard_order(self) -> None: ...
    def normalize(self) -> None: ...
    def get_num_rows(self) -> int: ...
    def get_value(self, row: int, mat: _Mat4d) -> None: ...
    def set_value(self, row: int, mat: _Mat4d) -> bool: ...
    def clear_data(self) -> None: ...
    def add_data(self, mat: _Mat4d) -> bool: ...
    @overload
    def add_component_data(self, component: int, value: float) -> None: ...
    @overload
    def add_component_data(self, component_name: str, value: float) -> None: ...
    @staticmethod
    def compose_with_order(mat: _Mat4d, scale: _Vec3d, shear: _Vec3d, hpr: _Vec3d, trans: _Vec3d, order: str, cs: _CoordinateSystem) -> None: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setFps = set_fps
    clearFps = clear_fps
    hasFps = has_fps
    getFps = get_fps
    setOrder = set_order
    clearOrder = clear_order
    hasOrder = has_order
    getOrder = get_order
    getStandardOrder = get_standard_order
    getCoordinateSystem = get_coordinate_system
    optimizeToStandardOrder = optimize_to_standard_order
    getNumRows = get_num_rows
    getValue = get_value
    setValue = set_value
    clearData = clear_data
    addData = add_data
    addComponentData = add_component_data
    composeWithOrder = compose_with_order
    getClassType = get_class_type

class EggXfmAnimData(EggAnimData):
    """Corresponding to an <Xfm$Anim> entry, this stores a two-dimensional table
    with up to nine columns, one for each component of a transformation.  This
    is an older syntax of egg anim table, not often used currently--it's
    replaced by EggXfmSAnim.
    """
    DtoolClassDict: ClassVar[dict[str, Any]]
    @overload
    def __init__(self, name: str = ..., cs: _CoordinateSystem = ...) -> None: ...
    @overload
    def __init__(self, copy: EggXfmAnimData) -> None: ...
    @overload
    def __init__(self, convert_from: EggXfmSAnim) -> None: ...
    def assign(self, copy: EggXfmAnimData) -> EggXfmAnimData: ...
    def set_order(self, order: str) -> None: ...
    def clear_order(self) -> None: ...
    def has_order(self) -> bool: ...
    def get_order(self) -> str: ...
    @staticmethod
    def get_standard_order() -> str: ...
    def set_contents(self, contents: str) -> None: ...
    def clear_contents(self) -> None: ...
    def has_contents(self) -> bool: ...
    def get_contents(self) -> str: ...
    def get_coordinate_system(self) -> _CoordinateSystem: ...
    def get_num_rows(self) -> int: ...
    def get_num_cols(self) -> int: ...
    @overload
    def get_value(self, row: int, mat: _Mat4d) -> None: ...
    @overload
    def get_value(self, row: int, col: int) -> float: ...
    @staticmethod
    def get_class_type() -> TypeHandle: ...
    setOrder = set_order
    clearOrder = clear_order
    hasOrder = has_order
    getOrder = get_order
    getStandardOrder = get_standard_order
    setContents = set_contents
    clearContents = clear_contents
    hasContents = has_contents
    getContents = get_contents
    getCoordinateSystem = get_coordinate_system
    getNumRows = get_num_rows
    getNumCols = get_num_cols
    getValue = get_value
    getClassType = get_class_type

def parse_egg_data(egg_syntax: str) -> EggData: ...
def parse_egg_node(egg_syntax: str) -> EggNode: ...
parseEggData = parse_egg_data
parseEggNode = parse_egg_node
