from typing import ClassVar
from typing_extensions import Literal, TypeAlias

from panda3d.core import (
    BitMask_uint32_t_32,
    CollisionHandlerEvent,
    CollisionHandlerFluidPusher,
    CollisionHandlerGravity,
    CollisionHandlerPusher,
    CollisionNode,
    CollisionRay,
    CollisionTraverser,
    ConfigVariableBool,
    LVecBase3f,
    LVector3f,
    NodePath,
)
from ..directnotify.Notifier import Notifier
from ..showbase.DirectObject import DirectObject

_OldBool: TypeAlias = Literal[0, 1]

class GravityWalker(DirectObject):
    notify: ClassVar[Notifier]
    wantDebugIndicator: ClassVar[ConfigVariableBool]
    wantFloorSphere: ClassVar[ConfigVariableBool]
    earlyEventSphere: ClassVar[ConfigVariableBool]
    DiagonalFactor: ClassVar[float]
    mayJump: bool | _OldBool
    jumpDelayTask = ...
    controlsTask = ...
    indicatorTask = ...
    falling: bool | _OldBool
    needToDeltaPos: bool | _OldBool
    physVelocityIndicator = ...
    avatarControlForwardSpeed: float
    avatarControlJumpForce: float
    avatarControlReverseSpeed: float
    avatarControlRotateSpeed: float
    priorParent: LVector3f
    moving: bool | _OldBool
    speed: float
    rotationSpeed: float
    slideSpeed: float
    vel: LVector3f
    collisionsActive: bool | _OldBool
    isAirborne: bool | _OldBool
    highMark = ...
    avatar = ...
    cRay: CollisionRay
    cRayNodePath: NodePath[CollisionNode]
    lifter: CollisionHandlerGravity
    avatarRadius: float
    pusher: CollisionHandlerPusher | CollisionHandlerFluidPusher
    cWallSphereNodePath: NodePath[CollisionNode]
    event: CollisionHandlerEvent
    cEventSphereNodePath: NodePath[CollisionNode]
    pusherFloorhandler: CollisionHandlerPusher
    cFloorSphereNodePath: NodePath[CollisionNode]
    wallBitmask: BitMask_uint32_t_32
    floorBitmask: BitMask_uint32_t_32
    avatarNodePath = ...
    cTrav: CollisionTraverser
    def __init__(
        self,
        gravity: float = 64.348,
        standableGround: float = 0.707,
        hardLandingForce: float = 16,
        legacyLifter: bool = False,
    ) -> None: ...
    def setWalkSpeed(self, forward: float, jump: float, reverse: float, rotate: float) -> None: ...
    def getSpeeds(self) -> tuple[float, float, float]: ...
    def getIsAirborne(self) -> bool | _OldBool: ...
    def setAvatar(self, avatar) -> None: ...
    def setupRay(self, floorBitmask: BitMask_uint32_t_32, floorOffset: float, reach: float) -> None: ...
    def setupWallSphere(self, bitmask: BitMask_uint32_t_32, avatarRadius: float) -> None: ...
    def setupEventSphere(self, bitmask: BitMask_uint32_t_32, avatarRadius: float) -> None: ...
    def setupFloorSphere(self, bitmask: BitMask_uint32_t_32, avatarRadius: float) -> None: ...
    def setWallBitMask(self, bitMask: BitMask_uint32_t_32) -> None: ...
    def stFloorBitMask(self, bitMask: BitMask_uint32_t_32) -> None: ...
    def swapFloorBitMask(self, oldMask: BitMask_uint32_t_32, newMask: BitMask_uint32_t_32) -> None: ...
    def setGravity(self, gravity: float) -> None: ...
    def getGravity(self, gravity: object) -> float: ...
    def initializeCollisions(
        self,
        collisionTraverser: CollisionTraverser,
        avatarNodePath,
        avatarRadius: float = 1.4,
        floorOffset: float = 1,
        reach: float = 1,
    ) -> None: ...
    def setTag(self, key: str, value: str) -> None: ...
    def setAirborneHeightFunc(self, unused_parameter: object) -> None: ...
    def getAirborneHeight(self) -> float: ...
    def setAvatarPhysicsIndicator(self, indicator: NodePath) -> None: ...
    def deleteCollisions(self) -> None: ...
    def setCollisionsActive(self, active: bool = True) -> None: ...
    def getCollisionsActive(self) -> bool | _OldBool: ...
    def placeOnFloor(self) -> None: ...
    def oneTimeCollide(self) -> None: ...
    def setMayJump(self, task: object) -> Literal[1]: ...
    def startJumpDelay(self, delay: float) -> None: ...
    def addBlastForce(self, vector: LVecBase3f) -> None: ...
    def displayDebugInfo(self) -> None: ...
    def handleAvatarControls(self, task: object) -> Literal[1]: ...
    def doDeltaPos(self) -> None: ...
    def setPriorParentVector(self) -> None: ...
    def reset(self) -> None: ...
    def getVelocity(self) -> LVector3f: ...
    def enableAvatarControls(self) -> None: ...
    def disableAvatarControls(self) -> None: ...
    def flushEventHandlers(self) -> None: ...
    def setCollisionRayHeight(self, height: float) -> None: ...
