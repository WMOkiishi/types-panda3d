from typing import ClassVar
from typing_extensions import Literal

from panda3d.core import (
    BitMask_uint32_t_32,
    CollisionHandlerFloor,
    CollisionHandlerPusher,
    CollisionNode,
    CollisionRay,
    CollisionSphere,
    CollisionTraverser,
    ConfigVariableBool,
    LVector3f,
    NodePath,
)
from ..directnotify.Notifier import Notifier
from ..showbase.DirectObject import DirectObject

class NonPhysicsWalker(DirectObject):
    notify: ClassVar[Notifier]
    wantDebugIndicator: ClassVar[ConfigVariableBool]
    slideName: ClassVar[str]
    worldVelocity: LVector3f
    collisionsActive: bool
    speed: float
    rotationSpeed: float
    slideSpeed: float
    vel: LVector3f
    stopThisFrame: bool
    avatarControlForwardSpeed: float
    avatarControlReverseSpeed: float
    avatarControlRotateSpeed: float
    avatar = ...
    avatarNodePath = ...
    getAirborneHeight = ...
    cTrav: CollisionTraverser
    cSphere: CollisionSphere
    cSphereNodePath: NodePath[CollisionNode]
    cSphereBitMask: BitMask_uint32_t_32
    cRay: CollisionRay
    cRayNodePath: NodePath[CollisionNode]
    cRayBitMask: BitMask_uint32_t_32
    pusher: CollisionHandlerPusher
    lifter: CollisionHandlerFloor
    def __init__(self) -> None: ...
    def setWalkSpeed(self, forward: float, jump: object, reverse: float, rotate: float) -> None: ...
    def getSpeeds(self) -> tuple[float, float, float]: ...
    def setAvatar(self, avatar) -> None: ...
    def setAirborneHeightFunc(self, getAirborneHeight) -> None: ...
    def setWallBitMask(self, bitMask: BitMask_uint32_t_32) -> None: ...
    def setFloorBitMask(self, bitMask: BitMask_uint32_t_32) -> None: ...
    def swapFloorBitMask(self, oldMask: BitMask_uint32_t_32, newMask: BitMask_uint32_t_32) -> None: ...
    def initializeCollisions(
        self,
        collisionTraverser: CollisionTraverser,
        avatarNodePath,
        avatarRadius: float = 1.4,
        floorOffset: float = 1,
        reach: float = 1,
    ) -> None: ...
    def deleteCollisions(self) -> None: ...
    def setTag(self, key: str, value: str) -> None: ...
    def setCollisionsActive(self, active: bool = True) -> None: ...
    def placeOnFloor(self) -> None: ...
    def oneTimeCollide(self) -> None: ...
    def addBlastForce(self, vector: object) -> None: ...
    def displayDebugInfo(self) -> None: ...
    def handleAvatarControls(self, task: object) -> Literal[1]: ...
    def doDeltaPos(self) -> None: ...
    def reset(self) -> None: ...
    def getVelocity(self) -> LVector3f: ...
    def enableAvatarControls(self) -> None: ...
    def disableAvatarControls(self) -> None: ...
    def flushEventHandlers(self) -> None: ...
