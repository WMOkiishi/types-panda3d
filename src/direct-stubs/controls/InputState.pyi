from abc import ABCMeta, abstractmethod
from typing import ClassVar
from typing_extensions import Literal

from ..directnotify.Notifier import Notifier
from ..showbase.DirectObject import DirectObject

class InputStateToken(metaclass=ABCMeta):
    Inval: ClassVar[str]
    def __init__(self, inputState) -> None: ...
    @abstractmethod
    def release(self) -> None: ...
    def is_valid(self) -> bool: ...
    def invalidate(self) -> None: ...
    def __hash__(self) -> int: ...
    isValid = is_valid

class InputStateWatchToken(InputStateToken, DirectObject): ...
class InputStateForceToken(InputStateToken): ...

class InputStateTokenGroup:
    def __init__(self) -> None: ...
    def add_token(self, token: InputStateToken) -> None: ...
    def release(self) -> None: ...
    addToken = add_token

class InputState(DirectObject):
    notify: ClassVar[Notifier]
    WASD: ClassVar[Literal['WASD']]
    QE: ClassVar[Literal['QE']]
    ArrowKeys: ClassVar[Literal['ArrowKeys']]
    Keyboard: ClassVar[Literal['Keyboard']]
    Mouse: ClassVar[Literal['Mouse']]
    def __init__(self) -> None: ...
    def delete(self) -> None: ...
    def is_set(self, name: str, inputSource: str | None = None) -> bool: ...
    def get_event_name(self, name: object) -> str: ...
    def set(self, name: str, isActive: bool, inputSource: str | None = None) -> None: ...
    def release_inputs(self, name: str) -> None: ...
    def watch(
        self,
        name: str,
        eventOn: str,
        eventOff: str,
        startState: bool = False,
        inputSource: str | None = None,
    ) -> InputStateWatchToken: ...
    def watchWithModifiers(
        self,
        name: str,
        event: str,
        startState: bool = False,
        inputSource: str | None = None,
    ) -> InputStateTokenGroup: ...
    def force(self, name, value: bool, inputSource: str) -> InputStateForceToken: ...
    def debug_print(self, message: str) -> None: ...
    isSet = is_set
    getEventName = get_event_name
    releaseInputs = release_inputs
    debugPrint = debug_print
