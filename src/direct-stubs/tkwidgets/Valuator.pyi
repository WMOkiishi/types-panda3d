__all__ = ['Valuator', 'ValuatorGroup', 'ValuatorGroupPanel']

from typing import Any, ClassVar
from typing_extensions import Final, Literal

Pmw: Any

VALUATOR_MINI: Final[Literal['mini']]
VALUATOR_FULL: Final[Literal['full']]

class Valuator(Pmw.MegaWidget):
    sfBase: ClassVar[float]
    sfDist: ClassVar[int]
    deadband: ClassVar[int]
    adjustedValue = ...
    propertyList: list[str]
    fInit: bool
    entryFormat: str
    def __init__(self, parent=None, **kw: Any) -> None: ...
    def st(self, value, fCommand: bool = True) -> None: ...
    def get(self): ...
    def setEntry(self, value, fCommand: bool = True) -> None: ...
    def setEntryFormat(self) -> None: ...
    def validateEntryInput(self, event) -> None: ...
    def setState(self) -> None: ...
    def setLabel(self) -> None: ...
    def zero(self) -> None: ...
    def reset(self) -> None: ...
    def mouseReset(self, event) -> None: ...
    def addPropertyToDialog(self, property, pDict) -> None: ...
    def createValuator(self) -> None: ...
    def packValuator(self) -> None: ...
    def addValuatorMenuEntries(self) -> None: ...
    def addValuatorPropertiesToDialog(self) -> None: ...

FLOATER: Final[Literal['floater']]
DIAL: Final[Literal['dial']]
ANGLEDIAL: Final[Literal['angledial']]
SLIDER: Final[Literal['slider']]

class ValuatorGroup(Pmw.MegaWidget): ...
class ValuatorGroupPanel(Pmw.MegaToplevel): ...

def rgbPanel(nodePath, callback=None, style: Literal['mini', 'full'] = 'mini') -> ValuatorGroupPanel: ...
def lightRGBPanel(light, style: Literal['mini', 'full'] = 'mini') -> ValuatorGroupPanel: ...
