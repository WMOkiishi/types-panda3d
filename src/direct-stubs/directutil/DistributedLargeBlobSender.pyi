from os import PathLike

from ..distributed.ClientRepository import ClientRepository
from ..distributed.DistributedObject import DistributedObject

class DistributedLargeBlobSender(DistributedObject):
    complete: bool
    doneEvent: str | None
    mode: int
    useDisk: bool
    targetAvId: int
    blob: str
    def __init__(self, cr: ClientRepository) -> None: ...
    def generate(self) -> None: ...
    def setMode(self, mode: int) -> None: ...
    def setTargetAvId(self, avId: int) -> None: ...
    def announceGenerate(self) -> None: ...
    def setChunk(self, chunk: str) -> None: ...
    def setFilename(self, filename: str | bytes | PathLike) -> None: ...
    def isComplete(self) -> bool: ...
    def setDoneEvent(self, event: str | None) -> None: ...
    def privOnBlobComplete(self) -> None: ...
    def getBlob(self) -> str: ...
    def sendAck(self) -> None: ...
