from collections.abc import Iterable
from typing import NoReturn

class RotatingLog:
    path: str
    timeInterval: float | None
    timeLimit: float | None
    sizeLimit: float | None
    def __init__(self, path: str = './log_file', hourInterval: float | None = 24, megabyteLimit: float | None = 1024) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    def shouldRotate(self) -> bool: ...
    def filePath(self) -> str: ...
    def rotate(self) -> None: ...
    def write(self, data: str) -> int: ...
    def flush(self) -> None: ...
    def fileno(self) -> int: ...
    def isatty(self) -> bool: ...
    def __next__(self) -> str: ...
    next = __next__
    def read(self, size: int | None) -> str: ...
    def readline(self, size: int) -> str: ...
    def readlines(self, sizehint: int) -> list[str]: ...
    def xreadlines(self) -> NoReturn: ...
    def seek(self, offset: int, whence: int = 0) -> int: ...
    def tell(self) -> int: ...
    def truncate(self, size: int | None) -> int: ...
    def writelines(self, sequence: Iterable[str]) -> None: ...
