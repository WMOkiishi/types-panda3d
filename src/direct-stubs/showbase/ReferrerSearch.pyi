from collections.abc import Generator, Reversible, Sized
from typing import Any

from .Job import Job

class ReferrerSearch(Job):
    obj: object
    maxRefs: int
    visited: set[int]
    depth: int
    found: int
    shouldPrintStats: bool
    def __init__(self, obj: object, maxRefs: int = ...) -> None: ...
    def __call__(self) -> None: ...
    def run(self) -> Generator[Any | None, None, None]: ...
    def __del__(self) -> None: ...
    def truncateAtNewLine(self, s: str) -> str: ...
    def printStatsWhenAble(self) -> None: ...
    def myrepr(self, referrer: object, refersTo: object) -> str: ...
    def step(self, depth: int, path: Reversible[object]) -> None: ...
    def stepGenerator(self, depth: int, path: Reversible[object]) -> None: ...
    def printStats(self, path: Reversible[object]) -> None: ...
    def isAtRoot(self, at: object, path: Reversible[object]) -> bool: ...
    def isManyRef(self, at: object, path: Reversible[object], referrers: Sized) -> bool | None: ...
