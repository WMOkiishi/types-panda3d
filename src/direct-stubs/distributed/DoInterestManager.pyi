from collections.abc import Callable
from typing import ClassVar, TypeVar
from typing_extensions import Literal, Protocol

from direct.directnotify.Notifier import Notifier
from direct.showbase.DirectObject import DirectObject
from panda3d.core import ConfigVariableBool, DatagramIterator

_Self = TypeVar('_Self')

class _HasNum(Protocol):
    num: int

class InterestState:
    StateActive: ClassVar[str]
    StatePendingDel: ClassVar[str]
    desc: str
    state: str
    context: int
    events: list[str]
    eventCounter: _HasNum
    parentId: int
    zoneIdList: list[int]
    auto: bool
    def __init__(
        self,
        desc: str,
        state: str,
        context: int,
        event: str,
        parentId: int,
        zoneIdList: list[int],
        eventCounter: _HasNum,
        auto: bool = False,
    ) -> None: ...
    def addEvent(self, event: str) -> None: ...
    def getEvents(self) -> list[str]: ...
    def clearEvents(self) -> None: ...
    def sendEvents(self) -> None: ...
    def setDesc(self, desc: str) -> None: ...
    def isPendingDelete(self) -> bool: ...

class InterestHandle:
    def __init__(self, id: int) -> None: ...
    def asInt(self) -> int: ...
    def __eq__(self: _Self, other: _Self | int) -> bool: ...  # type: ignore[override]

NO_CONTEXT: Literal[0]

class DoInterestManager(DirectObject):
    notify: ClassVar[Notifier]
    InterestDebug: ClassVar[ConfigVariableBool]
    def __init__(self) -> None: ...
    def setNoNewInterests(self, flag: bool) -> None: ...
    def noNewInterests(self) -> bool: ...
    def setAllInterestsCompleteCallback(self, callback: Callable[[], object]) -> None: ...
    def getAllInterestsCompleteEvent(self) -> str: ...
    def resetInterestStateForConnectionLoss(self) -> None: ...
    def isValidInterestHandle(self, handle: InterestHandle) -> bool: ...
    def updateInterestDescription(self, handle: InterestHandle, desc: str) -> None: ...
    def addInterest(self, parentId: int, zoneIdList: list[int], description: str, event: str | None = None) -> InterestHandle | None: ...
    def addAutoInterest(self, parentId: int, zoneIdList: list[int], description: str) -> InterestHandle | None: ...
    def removeInterest(self, handle: InterestHandle, event: str | None = None) -> bool: ...
    def removeAutoInterest(self, handle: InterestHandle) -> bool: ...
    def removeAIInterest(self, handle: int) -> None: ...
    def alterInterest(
        self,
        handle: InterestHandle,
        parentId: int,
        zoneIdList: list[int],
        description: str | None = None,
        event: str | None = None,
    ) -> bool: ...
    def openAutoInterests(self, obj) -> None: ...
    def closeAutoInterests(self, obj) -> None: ...
    def cleanupWaitAllInterestsComplete(self) -> None: ...
    def queueAllInterestsCompleteEvent(self, frames: int = 5) -> None: ...
    def handleInterestDoneMessage(self, di: DatagramIterator) -> None: ...
