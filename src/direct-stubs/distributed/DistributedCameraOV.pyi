from typing import Any

from .DistributedCamera import Fixture
from .DistributedObject import DistributedObject
from .DistributedObjectOV import DistributedObjectOV

class DistributedCameraOV(DistributedObjectOV):
    parent: int
    fixtures: list[Fixture]
    def getObject(self) -> DistributedObject | None: ...
    def setCamParent(self, doId: int) -> None: ...
    def setFixtures(self, fixtures: list[Fixture]) -> None: ...
    def storeToFile(self, name: str) -> None: ...
    def unpackFixture(self, data: str) -> tuple[Any, Any, Any]: ...
    def loadFromFile(self, name: str) -> None: ...
    def refreshFixture(self, id: int, data: str) -> None: ...
    def b_setFixtures(self, fixtures: list[Fixture]) -> None: ...
    def d_setFixtures(self, fixtures: list[Fixture]) -> None: ...
    def addFixture(self, fixture: Fixture, index: int | None = None) -> int: ...
    def blinkFixture(self, index: int) -> None: ...
    def standbyFixture(self, index: int) -> None: ...
    def testFixture(self, index: int) -> None: ...
    def removeFixture(self, index: int) -> None: ...
    def saveFixture(self, index: int | None = None) -> int: ...
    def startRecording(self) -> None: ...
    def stopRecording(self) -> None: ...
