from typing_extensions import Literal

from .ClientRepository import ClientRepository
from .DistributedNodeAI import DistributedNodeAI
from .DistributedSmoothNodeBase import DistributedSmoothNodeBase

class DistributedSmoothNodeAI(DistributedNodeAI, DistributedSmoothNodeBase):
    def __init__(self, air: ClientRepository, name: str | None = None) -> None: ...
    def generate(self) -> None: ...
    def disable(self) -> None: ...
    def delete(self) -> None: ...
    def setSmStop(self, t: object = None) -> None: ...
    def setSmH(self, h: float, t: object = None) -> None: ...
    def setSmZ(self, z: float, t: object = None) -> None: ...
    def setSmXY(self, x: float, y: float, t: object = None) -> None: ...
    def setSmXZ(self, x: float, z: float, t: object = None) -> None: ...
    def setSmPos(self, x: float, y: float, z: float, t: object = None) -> None: ...
    def setSmHpr(self, h: float, p: float, r: float, t: object = None) -> None: ...
    def setSmXYH(self, x: float, y: float, h: float, t: object = None) -> None: ...
    def setSmXYZH(self, x: float, y: float, z: float, h: float, t: object = None) -> None: ...
    def setSmPosHpr(self, x: float, y: float, z: float, h: float, p: float, r: float, t: object = None) -> None: ...
    def setSmPosHprL(self, l: object, x: float, y: float, z: float, h: float, p: float, r: float, t: object = None) -> None: ...
    def clearSmoothing(self, bogus: object = None) -> None: ...
    def setComponentX(self, x: float) -> None: ...
    def setComponentY(self, y: float) -> None: ...
    def setComponentZ(self, z: float) -> None: ...
    def setComponentH(self, h: float) -> None: ...
    def setComponentP(self, p: float) -> None: ...
    def setComponentR(self, r: float) -> None: ...
    def setComponentL(self, l: object) -> None: ...
    def setComponentT(self, t: object) -> None: ...
    def getComponentX(self) -> float: ...
    def getComponentY(self) -> float: ...
    def getComponentZ(self) -> float: ...
    def getComponentH(self) -> float: ...
    def getComponentP(self) -> float: ...
    def getComponentR(self) -> float: ...
    def getComponentL(self) -> int: ...
    def getComponentT(self) -> Literal[0]: ...
