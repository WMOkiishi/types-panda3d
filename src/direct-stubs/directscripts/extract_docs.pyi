from typing import TypeVar
from typing_extensions import Protocol

_T_contra = TypeVar("_T_contra", contravariant=True)

class _SupportsWrite(Protocol[_T_contra]):
    def write(self, __s: _T_contra) -> object: ...

LICENSE: list[str]
MAINPAGE: str

def comment(code: str) -> str: ...
def block_comment(code: str) -> str: ...
def translateFunctionName(name: str) -> str: ...
def translateTypeName(name: str, mangle: bool = True) -> str: ...
def translated_type_name(type: int, scoped: bool = True) -> str: ...
def processElement(handle: _SupportsWrite[str], element: int) -> None: ...
def processFunction(handle: _SupportsWrite[str], function: int, isConstructor: bool = False) -> None: ...
def processType(handle: _SupportsWrite[str], type: int) -> None: ...
def processModule(handle: _SupportsWrite[str], package: str) -> None: ...
