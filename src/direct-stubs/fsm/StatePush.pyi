__all__ = ['EnterExit', 'EventArgument', 'EventPulse', 'FunctionCall', 'Pulse', 'StateVar']

from collections.abc import Callable
from typing import Any
from typing_extensions import Self

from ..showbase.DirectObject import DirectObject

class PushesStateChanges:
    def __init__(self, value: bool) -> None: ...
    def destroy(self) -> None: ...
    def getState(self): ...
    def pushCurrentState(self) -> Self: ...

class ReceivesStateChanges:
    def __init__(self, source: PushesStateChanges) -> None: ...
    def destroy(self) -> None: ...

class StateVar(PushesStateChanges):
    def set(self, value: bool) -> None: ...
    def get(self): ...

class StateChangeNode(PushesStateChanges, ReceivesStateChanges):
    def __init__(self, source: PushesStateChanges) -> None: ...

class ReceivesMultipleStateChanges:
    def __init__(self) -> None: ...
    def destroy(self) -> None: ...

class FunctionCall(ReceivesMultipleStateChanges, PushesStateChanges):
    def __init__(self, func: Callable, *args: Any, **kArgs: Any) -> None: ...
    def getState(self) -> tuple[tuple[Any, ...], dict[str, Any]]: ...

class EnterExit(StateChangeNode):
    def __init__(self, source: PushesStateChanges, enterFunc: Callable[[], object], exitFunc: Callable[[], object]) -> None: ...

class Pulse(PushesStateChanges):
    def __init__(self) -> None: ...
    def sendPulse(self) -> None: ...

class EventPulse(Pulse, DirectObject):
    def __init__(self, event: str) -> None: ...

class EventArgument(PushesStateChanges, DirectObject):
    def __init__(self, event: str, index: int = 0) -> None: ...

class AttrSetter(StateChangeNode):
    def __init__(self, source: PushesStateChanges, object: object, attrName: str) -> None: ...
